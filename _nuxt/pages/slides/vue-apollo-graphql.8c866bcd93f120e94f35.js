webpackJsonp([11],{aLDJ:function(t,a,e){"use strict";a.a={name:"vue-apollo-graphql",layout:"slides"}},dA6k:function(t,a,e){"use strict";var i=function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"slides"},[t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),e("section",[t._m(5),e("section",[e("h3",[t._v("Vue 객체에 apollo provider 주입")]),t._m(6),e("div",{staticStyle:{display:"inline-block",width:"50%",margin:"0 auto","vertical-align":"top"}},[e("div",{staticClass:"fragment"},[e("pre",{staticStyle:{margin:"0 auto"}},[e("code",{staticStyle:{"font-size":"15px"},attrs:{"data-trim":"","data-noescape":""}},[t._v("\n            // main.js\n            ...\n            import apolloProvider from './apollo-provider'\n\n            /* eslint-disable no-new */\n            new Vue({\n              el: '#app',\n              router,\n              provide: apolloProvider.provide(),  // Provider 주입\n              store,\n              template: '"),e("App"),t._v("',\n              components: { App }\n            })\n          ")],1)])]),t._m(7)]),t._m(8)]),t._m(9),t._m(10)]),t._m(11),t._m(12),t._m(13)])};i._withStripped=!0;var n={render:i,staticRenderFns:[function(){var t=this.$createElement,a=this._self._c||t;return a("section",{attrs:{"data-background":"/blog/static/image/javascript/vue/vuetifulkorea4_background.png"}},[a("aside",{staticClass:"notes"},[this._v("\n      안녕하세요. NHN벅스 최준석입니다. GraphQL, Apollo가 생소한 주제일 수 하지만\n      개발하면서 Slack 채널에 질문을 해도 이미 충분히 많은 분들이 사용해보셨고, 실무에 사용하시는 분도 있으셨습니다.\n      GraphQL과 Apollo의 본질에 대한 설명이나 서버 파트에 대해서 설명을 드리겠습니다.\n      잘부탁드립니다.\n    ")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("section",[a("div",[a("h2",[this._v("순서")]),a("ul",{staticStyle:{"list-style":"none",margin:"0"}},[a("li",{staticClass:"fragment"},[this._v("1. 왜 쓰는지 납득을 해야 쓰지")]),a("li",{staticClass:"fragment"},[this._v("2. REST API를 GraphQL로")]),a("li",{staticClass:"fragment"},[this._v("3. Client")]),a("li",{staticClass:"fragment"},[this._v("4. 왜 이걸 써야하는거죠")]),a("li",{staticClass:"fragment"},[this._v("Q & A")])])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("section",[a("h2",[this._v("들어가기전에")]),a("div",{staticClass:"fragment",staticStyle:{"margin-top":"20px"}},[a("a",{attrs:{href:"https://jicjjang.github.io/blog/slides/graphql-start-server",target:"_blank"}},[this._v("기본적인 백엔드 내용은 이 링크를!")])]),a("div",{staticClass:"fragment",staticStyle:{"margin-top":"20px"}},[a("a",{attrs:{href:"https://jicjjang.github.io/blog/slides/graphql-start-client",target:"_blank"}},[this._v("기본적인 프론트 내용은 이 링크를!")])]),a("div",{staticClass:"fragment",staticStyle:{"margin-top":"20px"}},[a("a",{attrs:{href:"https://github.com/seouldrinker/seoulDrinkerGraphql",target:"_blank"}},[this._v("오늘의 코드는 이곳에"),a("br"),this._v("(https://github.com/seouldrinker/seoulDrinkerGraphql)!")])]),a("div",{staticClass:"fragment",staticStyle:{"margin-top":"20px"}},[this._v("더 자세한 내용은 구글링...! (내용은 백엔드 쪽에 거의 다 있어요 헤헤)")]),a("aside",{staticClass:"notes"},[this._v("\n      이미 한차례 사내 세미나를 했었고, 그때 자료도 있으니 발표 후에 한번 둘러봐주세요 :)\n      이 자료들과 겹치는 내용도 있겠지만, 이해를 돕기위해 추가하기도 했습니다.\n    ")])])},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("section",[e("section",[e("h2",[t._v("1. 왜 쓰는지 납득을 해야 쓰지")]),e("div",{staticClass:"fragment"},[t._v("그동안 잘쓰고 있던 API. 한계는??")]),e("ul",{staticClass:"fragment",staticStyle:{"margin-top":"20px"}},[e("li",[t._v("플랫폼마다 조금씩 다른 쿼리,"),e("br"),t._v("그때 그때 원하는 데이터만 보고싶은데...")]),e("li",[t._v("생각보다 편하다고 쓰고있었는데, 정형화된 규칙이 있을까?"),e("br"),t._v("(JSON이 규칙을 가지고 있진 않음)")]),e("li",[t._v("필터는? 정렬은?")]),e("li",[t._v("페이지네이ㅅ....")]),e("li",[t._v("읍읍")])]),e("aside",{staticClass:"notes"},[t._v("\n        나름 편하다고 쓰고 있는 API는 깊게들어갈수록 생각보다 어렵습니다. 뭔가 규칙도 없고, 정렬, 필터, pagination 등등...\n        최종 선택은 본인과 팀의 결정이지만, 규칙이 없다는 건 리미터가 없다는 것이니 생각보다 위험합니다.\n        이런 문제들에 대해 일부라도 해결할 수 있다면 한번쯤 사용해 볼만 하겠죠.\n      ")])]),e("section",[e("h3",[t._v("그렇다면 DB... DB를 보자!!")]),e("div",{staticStyle:{"font-size":"30px"}},[e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"20%","padding-left":"1%","padding-right":"1%","margin-left":"1%","vertical-align":"top","border-left":"1px solid #fff","border-right":"1px solid #fff"}},[t._v("GraphQL에서 `RDB`가 나을까 `NoSQL`이 나을까?")]),e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"20%","padding-left":"1%","padding-right":"1%","margin-left":"1%","vertical-align":"top","border-left":"1px solid #fff","border-right":"1px solid #fff"}},[t._v("보통 DB에서 성능에 영향을 많이 주더라도 사용하게 되는 JOIN... 하지만 JOIN이 힘든 NoSql에서 쿼리가 급격히 늘어날수도...")]),e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"20%","padding-left":"1%","padding-right":"1%","margin-left":"1%","vertical-align":"top","border-left":"1px solid #fff","border-right":"1px solid #fff"}},[t._v("RDB가 나쁠 이유는 없는데?")]),e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"20%","padding-left":"1%","padding-right":"1%","margin-left":"1%","vertical-align":"top","border-left":"1px solid #fff","border-right":"1px solid #fff"}},[t._v("심지어 각각의 클라이언트에서 Depth에 대한 난이도 조절 가능...!")])]),e("aside",{staticClass:"notes"},[t._v("\n        그렇다면 디비는 어떨까요? 회사 세미나의 예제 코드는 MongoDB로, NoSQL 환경이었습니다."),e("br"),t._v("\n        과도한 DB를 버텨야 하는 회사 업무에서는 어울리지 않아 보인다는 의견이 있었으나"),e("br"),t._v("\n        RDB로 적용한 사용자들의 리뷰에서는 충분히 잘 사용하고 있다는 의견 또한 많았습니다.\n      ")])]),e("section",[e("h3",[t._v("Depth 조절이 가능하다니 무슨 소리죠?")]),e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"30%"}},[e("pre",[e("code",{staticStyle:{"font-size":"15px"},attrs:{"data-trim":"","data-noescape":""}},[t._v("\n          module.exports = `\n            type A {\n              _id: String!\n              Aprop1: String\n              Aprop2: String\n              Aprop3: [B]\n            }\n            type b {\n              _id: String!\n              Bprop1: String\n              Bprop2: [C]\n            }\n            ...\n          `\n        ")])])]),e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"30%","vertical-align":"top"}},[e("pre",[e("code",{staticStyle:{"font-size":"15px"},attrs:{"data-trim":"","data-noescape":""}},[t._v("\n          module.exports = `\n            type C {\n              _id: String!\n              Cprop1: String\n              Cprop2: [D]\n            }\n            type D {\n              _id: String!\n              Dprop1: String\n              Dprop2: [A]       // 두둥...!\n            }\n            ...\n          `\n        ")])])]),e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"40%","margin-top":"60px","vertical-align":"top"}},[t._v("\n        이런 Recursive한 관계..."),e("br"),t._v("서비스를 하다보면 없을 순 없다 ㅠㅠ...\n      ")]),e("aside",{staticClass:"notes"},[t._v("\n        코드에 대해선 뒤에서 설명드리겠으니 여기선 Depth 조절만 알아봅시다."),e("br"),t._v("\n        이런 방식으로 GraphQL의 type들을 선언하는데, PK, FK 등"),e("br"),t._v("\n        다른 타입에 대한 의존성이 있을 수 있는데 이런 관계에 대해"),e("br"),t._v("\n        어느 정도까지 연결 되게 할 것인지 정할 수 있다는 것입니다.\n      ")])]),e("section",[e("h2",[t._v("GraphQL의 목표")]),e("div",{staticStyle:{width:"90%",margin:"0 auto"}},[e("span",{staticStyle:{display:"inline-block",width:"58%",margin:"5px","vertical-align":"top"}},[e("img",{staticClass:"fragment",staticStyle:{margin:"0 auto"},attrs:{"data-fragment-index":"1",src:"/blog/static/slides/image/graphql-start/about1.jpg"}}),e("div",{staticClass:"fragment",staticStyle:{"margin-top":"20px","font-size":"20px"},attrs:{"data-fragment-index":"3"}},[t._v("필요한 것만 정확히 물어볼 수있는 기능을 제공하며 시간이 지남에 따라 API를 쉽게 개발할 수 있도록...")])]),e("span",{staticStyle:{display:"inline-block",width:"38%",margin:"5px"}},[e("img",{staticClass:"fragment",staticStyle:{margin:"0 auto"},attrs:{"data-fragment-index":"2",src:"/blog/static/slides/image/graphql-start/about2.jpg"}}),e("div",{staticClass:"fragment",staticStyle:{"margin-top":"20px","font-size":"20px"},attrs:{"data-fragment-index":"4"}},[t._v("GraphQL은 단독 버전 관리를 통해 기존 코드 수정없이 보다 깨끗하고 유지보수가 쉽게 사용이 가능...")])])]),e("aside",{staticClass:"notes"},[t._v("\n        단편적인 내용들이지만, 규칙을 정하고 유지보수를 용의하게 하기 위해,\n        즉, GraphQL은"),e("br"),t._v("\n        필요한 것만 물어보는 것으로"),e("br"),t._v("\n        여러 플랫폼에 대해 단독 버전 관리를"),e("br"),t._v("\n        하는 것이 목표입니다.\n      ")])])])},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("section",[e("section",[e("h2",[t._v("2. REST API를 GraphQL로")]),e("div",[t._v("솔직히 한번쯤은 들어봤을 GraphQL. but, 노관심")]),e("br"),e("div",{staticClass:"fragment",staticStyle:{"font-size":"32px"}},[e("div",{staticStyle:{display:"inline-block",width:"50%","text-align":"center"}},[e("div",[t._v("REST API")]),e("p",[e("span",{staticStyle:{color:"red"}},[t._v("URI")]),t._v(" 중심으로 데이터의 CRUD 진행")]),e("div",{staticStyle:{width:"60%","max-width":"580px",margin:"0 auto","vertical-align":"top"}},[e("img",{staticStyle:{display:"block",margin:"0 auto"},attrs:{src:"/blog/static/slides/image/vue-apollo-graphql/query_api.png"}})])]),e("div",{staticStyle:{display:"inline-block",width:"50%","text-align":"center","vertical-align":"top"}},[e("div",[t._v("GraphQL")]),e("p",[e("span",{staticStyle:{color:"red"}},[t._v("Query")]),t._v("와 "),e("span",{staticStyle:{color:"red"}},[t._v("Mutation")]),t._v("으로 데이터의 CRUD를 진행")]),e("div",{staticStyle:{width:"60%","max-width":"580px",margin:"0 auto","vertical-align":"top"}},[e("img",{staticStyle:{display:"block",margin:"0 auto"},attrs:{src:"/blog/static/slides/image/vue-apollo-graphql/query_graphql.png"}})])])]),e("aside",{staticClass:"notes"},[t._v("\n        이제 실제로 구현해봐야겠죠? backend의 endpoint에 대한 개발을 하지 않으시는 분들도 있으시겠지만,\n        서버 얘기를 하지 않을 수 없습니다 ㅠㅠ. 함께 적용을 하고 함께 변경해야 하니까요. REST와\n        GraphQL을 동시에 사용할 수도 있습니다.\n        "),e("br"),t._v("---"),e("br"),t._v("\n        기존에 사용하던 API는 URI중심으로 데이터를 쿼리합니다. 그에 반해 GraphQL은 Query와 Mutation을 중심으로 데이터를 쿼리합니다.\n        uri에 보이시는 대로 GraphQL은 `/graphql` 하나로 사용하는데, 이는 GraphQL의 권장사항 입니다.\n      ")])]),e("section",[e("h3",[t._v("서버는 살짝만")]),e("div",{staticClass:"fragment",staticStyle:{"font-size":"32px"},attrs:{"data-fragment-index":"1"}},[t._v("하기에는... 생각보단 쉬워요! (클라이언트보단)")]),e("div",{staticClass:"fragment",staticStyle:{"margin-top":"20px"},attrs:{"data-fragment-index":"2"}},[e("a",{attrs:{href:"https://github.com/seouldrinker/seoulDrinkerApi",target:"_blank"}},[t._v("기존 API 코드")]),t._v("와\n        "),e("a",{attrs:{href:"https://github.com/seouldrinker/seoulDrinkerGraphql",target:"_blank"}},[t._v("GraphQL 코드")])]),e("div",{staticClass:"fragment",attrs:{"data-fragment-index":"2"}},[t._v("어떤 부분이 달라졌는지 확인해봅시다.")]),e("aside",{staticClass:"notes"},[t._v("\n        서버 코드는 Node고 매우 짧습니다. ppt 2장으로 끝나니 GraphQL에 대해 간단히 훑어보겠습니다.\n      ")])]),e("section",[e("h3",[t._v("우선 라우팅부터")]),e("div",{staticClass:"fragment",staticStyle:{"font-size":"32px"}},[t._v("\n        API에서 GraphQL로 경로가 바뀌었습니다.\n      ")]),e("br"),e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"60%"}},[e("pre",[e("code",{staticStyle:{"font-size":"15px"},attrs:{"data-trim":"","data-noescape":""}},[t._v("\n          ...\n          // server.js\n          import { graphqlExpress, graphiqlExpress } from 'apollo-server-express'\n          import schema from './graphql'\n          app.use('/graphql', cors(), bodyParser.json(), graphqlExpress({ schema }))\n          app.use('/graphiql', cors(), graphiqlExpress({ endpointURL: '/graphql' }))\n          ...\n        ")])]),e("pre",{staticStyle:{"margin-top":"20px"}},[e("code",{staticStyle:{"font-size":"15px"},attrs:{"data-trim":"","data-noescape":""}},[t._v("\n          // graphql/index.js\n          import { makeExecutableSchema } from 'graphql-tools'\n          import typeDefs from './typeDefs'     // 타입 정의\n          import resolvers from './resolvers'   // 정의된 타입 구현\n\n          export default makeExecutableSchema({ typeDefs, resolvers })\n        ")])])]),e("div",{staticStyle:{display:"inline-block",width:"40%","vertical-align":"top"}},[e("div",{staticClass:"fragment"},[t._v("graphql과 graphiql의 차이")]),e("div",{staticClass:"fragment",staticStyle:{margin:"20px auto 0 auto"}},[e("img",{staticStyle:{display:"block",margin:"0 auto"},attrs:{src:"/blog/static/slides/image/vue-apollo-graphql/graphiql.png"}})])]),e("aside",{staticClass:"notes"},[t._v("\n        라우팅 경로를 추가해줍니다. 위에서 `/graphql` 하나만 넣는게 권장사항이라 했으나, 2개가 들어가있는 이유는\n        디버깅 용도로 사용하는 graphiql 입니다. 이 또한 endpoint는 `/graphql`을 가리키고 있습니다.\n        "),e("br"),t._v("---"),e("br"),t._v("\n        graphql 라우터는 schema를 받는데, schema는 typeDefs와 resolvers를 실행 가능하게 만든 모듈입니다.\n      ")])]),e("section",[e("h3",[t._v("typedef와 resolver")]),e("div",{staticClass:"fragment",staticStyle:{"font-size":"32px"}},[t._v("\n        정말 단순하게도, 이 파일 2개를 만들면 서버는 끝.\n      ")]),e("br"),e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"50%"}},[e("pre",[e("code",{staticStyle:{"font-size":"15px"},attrs:{"data-trim":"","data-noescape":""}},[t._v("\n          // graphql/typedef.js\n          module.exports = `\n            scalar Date       // 다른 타입에 대해서는 Date와 같이 scalar로 정의\n\n            type News {       // DB에서 가져올 타입은 scalar없이 정의.\n              _id: String!    // graphql의 기본 데이터 형은 String과 Int 두개\n              context: String // !는 requied\n              image: String\n              is_ok: Int!\n              crt_dt: Date!\n              udt_dt: Date!\n            }\n            type Query {\n              newsList: [News]\n            }\n          `\n        ")])])]),e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"50%","vertical-align":"top"}},[e("pre",[e("code",{staticStyle:{"font-size":"15px"},attrs:{"data-trim":"","data-noescape":""}},[t._v("\n          // graphql/resolver.js\n          import { getNewsList } from '../modules/news'\n\n          module.exports = {\n            Query: {\n              newsList: () => getNewsList()\n            }\n          }\n        ")])]),e("pre",{staticStyle:{"margin-top":"20px"}},[e("code",{staticStyle:{"font-size":"15px"},attrs:{"data-trim":"","data-noescape":""}},[t._v("\n          // modules/news.js\n          // API에서 쓰던 모듈과 같음\n          // MongoDB 조회. 끝.\n          export function getNewsList () {\n            return News.find({is_ok: 1}).sort({crt_dt: -1})\n          }\n        ")])])]),e("aside",{staticClass:"notes"},[t._v("\n        이 두 파일만 더 살펴보면 끝입니다. 매우 간단하죠?\n        "),e("br"),t._v("---"),e("br"),t._v("\n        우선 스트링 형태로 타입을 정의합니다. News라는 데이터를 위주로 보기 위해 정의해 놨습니다.\n        바로 아래 Query는 해당 타입의 리스트를 가져오겠다는 뜻입니다.\n        기술 해놓지는 않았지만 type Mutation 을 지정해서 데이터의 저장, 수정, 삭제를 할 수 있습니다.\n        graphql에서는 조회만 Query, 나머진 Mutation 이거든요 ㅎㅎ\n        "),e("br"),t._v("---"),e("br"),t._v("\n        resolvers에서는 정의된 내용을 구현합니다. News 타입에 대해 데이터 리스트를 가져올 내용은\n        getNewsList라는 함수인데요, 이 함수는 MongoDB 에서 데이터를 조회합니다. API에서 사용하던\n        모듈과 동일하고, 이 예제가 포함된 Repository에서 대부분이 API에서 사용하던 함수들을 재사용하며\n        포팅했습니다.\n        "),e("br"),t._v("---"),e("br"),t._v("\n        자 이렇게 서버에 대한 코드 설명이 끝났습니다. 처음 보시는데도 그다지 어렵지 않으셨을겁니다.\n      ")])])])},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("section",[e("h2",[t._v("3. Client")]),e("div",{staticClass:"fragment",staticStyle:{"font-size":"32px"},attrs:{"data-fragment-index":"1"}},[t._v("클라이언트도 서버처럼")]),e("div",{staticClass:"fragment",staticStyle:{"margin-top":"20px"},attrs:{"data-fragment-index":"2"}},[t._v("\n        지난 3월 발표에서 보여드린 "),e("a",{attrs:{href:"https://github.com/seouldrinker/seoulDrinkerPwa",target:"_blank"}},[t._v("PWA 코드")]),t._v("의 api 호출을\n        "),e("a",{attrs:{href:"https://github.com/seouldrinker/seoulDrinkerGraphql",target:"_blank"}},[t._v("GraphQL")]),t._v("로\n      ")]),e("div",{staticClass:"fragment",attrs:{"data-fragment-index":"2"}},[t._v("어떻게 바꾸는지 알아봅시다.")]),e("aside",{staticClass:"notes"},[t._v("\n        이번엔 클라이언트 코드를 바꿔보겠습니다.\n      ")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"50%"}},[a("pre",[a("code",{staticStyle:{"font-size":"15px"},attrs:{"data-trim":"","data-noescape":""}},[this._v("\n          // apollo-provider.js\n          import Vue from 'vue'\n          import VueApollo from 'vue-apollo'\n          import {HttpLink} from \"apollo-link-http/lib/index\"\n          import {ROOT_URL} from \"./config\"\n          import {InMemoryCache} from \"apollo-cache-inmemory/lib/index\"\n\n          Vue.use(VueApollo)\n\n          // This can hold multiple apollo clients\n          const apolloProvider = new VueApollo({\n            defaultClient: new ApolloClient({\n              link: new HttpLink({uri: `${ROOT_URL}/graphql`}),\n              cache: new InMemoryCache(),\n              connectToDevTools: true\n            }),\n            defaultOptions: {\n              $loadingKey: 'loading'\n            }\n          })\n\n          export default apolloProvider\n        ")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("div",{staticClass:"fragment",staticStyle:{"margin-top":"20px"}},[this._v("\n          provider는 공급자."),a("br"),this._v("\n          공급자가 하나일 필요는 없음"),a("br"),this._v("\n          여러개로 늘려도? 상관 없음\n        ")])},function(){var t=this.$createElement,a=this._self._c||t;return a("aside",{staticClass:"notes"},[this._v("\n        vuex로 치면 store에 대한 설정이 끝난거죠."),a("br"),this._v("\n        리액트를 사용하셨던 분들은 provider가 조금 더 친절할 것 같네요.\n      ")])},function(){var t=this.$createElement,a=this._self._c||t;return a("section",[a("h3",[this._v("호출부에 대한 설정 완료! 이제는 SPC!")]),a("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"50%"}},[a("pre",[a("code",{staticStyle:{"font-size":"15px"},attrs:{"data-trim":"","data-noescape":""}},[this._v('\n          // container/News.vue\n          ...\n          <template>\n          ...\n            <li v-for="(news, index) in newsList" :key="index">\n              ...\n            </li>\n          ...\n          </template>\n          <script>\n          import apollo from \'../graphql/news\'\n          ...\n          export default {\n            apollo,   // apollo news 모듈\n            data () {\n              return {\n                newsList: [],\n                ...\n              }\n            },\n            ...\n          }\n          <\/script>\n          ...\n        ')])])]),a("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"50%","vertical-align":"top"}},[a("pre",[a("code",{staticStyle:{"font-size":"15px"},attrs:{"data-trim":"","data-noescape":""}},[this._v("\n          // graphql/news.js\n          import gql from 'graphql-tag'\n\n          export default {\n            newsList: {\n              // 가져올 column만 명시.\n              query: gql`query NewsList {\n                newsList {\n                  _id\n                  context\n                  image\n                }\n              }`,\n              result ({ data, loader, networkStatus }) {\n                console.log('We got some result!')\n              },\n              // Error handling\n              error (error) {\n                console.error('We\\'ve got an error!', error)\n              },\n              loadingKey: 'loading'\n            }\n          }\n        ")])])]),a("aside",{staticClass:"notes"},[this._v("\n        this.$apollo.~~~ 하는 방식으로도 사용할 수 있지만, 위 코드와 같은 방식으로 해야\n        smart query가 동작하여 data에 있는 newsList로 조회된 데이터가 자동 매핑됩니다.\n      ")])])},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("section",[e("h3",[t._v("간단하게 설명했지만")]),e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"50%"}},[e("pre",[e("code",{staticStyle:{"font-size":"20px"},attrs:{"data-trim":"","data-noescape":""}},[t._v("\n          export default {\n            module: {\n              rules: [\n                // ...\n                {\n                  test: /\\.(graphql|gql)$/,\n                  exclude: /node_modules/,\n                  loader: 'graphql-tag/loader'\n                }\n              ]\n            }\n          }\n        ")])])]),e("div",{staticStyle:{display:"inline-block",width:"50%","vertical-align":"top"}},[e("div",{staticClass:"fragment"},[t._v("\n          1. 코드를 분리하려면 꼭 필요한 webpack loader 설정\n        ")]),e("div",{staticClass:"fragment",staticStyle:{"margin-top":"30px"}},[t._v("\n          2. pub/sub 모델을 넣고 소켓으로 DB 변화를 `구독` 하려면 추가해야하는 "),e("a",{attrs:{href:"https://github.com/apollographql/graphql-subscriptions",target:"_blank"}},[t._v("graphql-subscriptions")])]),e("div",{staticClass:"fragment",staticStyle:{"margin-top":"30px"}},[t._v("\n          3. vuex에서 데이터 변화를 조금 더 쉽게 관찰할 수 있게 해줄 "),e("a",{attrs:{href:"https://github.com/Akryum/vue-supply",target:"_blank"}},[t._v("vue-supply")])]),e("div",{staticClass:"fragment",staticStyle:{"margin-top":"30px"}},[t._v("\n          4. 기타 등등 ....\n        ")])]),e("aside",{staticClass:"notes"},[t._v("\n        설명은 간단했지만, 서비스에 넣을 정도의 스펙이 된다면 추가 및 수정해야할 것들이 약간 늘어납니다.\n        DB 변화를 감지할 pub/sub 모델, vuex에 데이터 변화를 쉽게 연동할 수 있게 해줄 vue-supply 등등\n        신경쓸게 늘어납니다.\n      ")])])},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("section",[e("section",[e("h2",[t._v("3. 단점에 대해")]),e("div",{staticClass:"fragment",attrs:{"data-fragment-index":"1"}},[t._v("\n        사실 여기서부터가 나눠보고 싶은 얘기.\n      ")]),e("div",{staticClass:"fragment",attrs:{"data-fragment-index":"2"}},[t._v("\n        페이스북에서 "),e("a",{attrs:{href:"https://code.facebook.com/posts/1691455094417024/graphql-a-data-query-language/",target:"_blank"}},[t._v('"write once, run anywhere"')])]),e("div",{staticClass:"fragment",attrs:{"data-fragment-index":"2"}},[t._v("\n        이라는 이상에 맞추기 위해 만든게 GraphQL.\n      ")]),e("div",{staticClass:"fragment",attrs:{"data-fragment-index":"3"}},[t._v("\n        안 쓸 이유가 있을까?\n      ")]),e("aside",{staticClass:"notes"},[t._v("\n        물론 안 쓸 이유가 없진 않습니다만, 생각보다 언어가 아닌 명세! graphql에 대한 관리가 열정적으로 이루어지진 않는 것이 대표적입니다.\n      ")])]),e("section",[e("h2",[t._v("주관적인(겪어봤던) 리뷰")]),e("div",{staticStyle:{"margin-top":"40px"}},[e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"18%",margin:"1%","font-size":"30px","vertical-align":"top"}},[t._v("실제로 구현하는건 훨씬 복잡한 케이스가 다수")]),e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"18%",margin:"1%","font-size":"30px","vertical-align":"top"}},[t._v("에러 관리 (에러가 200으로 떨어지는 케이스)")]),e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"18%",margin:"1%","font-size":"30px","vertical-align":"top"}},[t._v("실패한 요청에 대한 재시도 (pub/sub으로 해결 가능함)")]),e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"18%",margin:"1%","font-size":"30px","vertical-align":"top"}},[t._v("하지만! 어느정도 잡혀있는 규칙에 대해선 매우 긍정적")]),e("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"18%",margin:"1%","font-size":"30px","vertical-align":"top"}},[t._v("러닝커브는 모르겠지만, 한번 익숙해지면 rest보다 낫다고 생각할 수 밖에 없음")])]),e("aside",{staticClass:"notes"},[t._v("\n        실제 구현시 난이도 상승, 에러가 가끔 200으로 나오는 케이스, 실패에 대한 재시도를 따로 제어하기 힘들다는 점 들이 있습니다.\n      ")])]),e("section",[e("h2",[t._v("느낀 점 & 드리고자 하는 말")]),e("div",{staticClass:"fragment"},[t._v("\n        대형 서비스를 기존 REST에서 GraphQL로 모두 바꾸기엔"),e("br"),t._v("조금은 이른게 아닐까 + 시작해볼만 하다"),e("br"),e("b",{staticClass:"fragment",staticStyle:{display:"block","margin-top":"40px","font-size":"50px",color:"#efdcbc"}},[t._v("신규서비스라면 써보라 추천!!")])]),e("aside",{staticClass:"notes"},[t._v("\n        facebook에서 graphql + react에 사용하는 relay를 거의 케어하지 않아서\n        apollo로 유저들이 많이 넘어오고 있었는데, relay의 업그레이드 버전이 나온다는 소식도 있습니다.\n        좋은 소식에도 불구하고 당장 큰 규모의 서비스를 쪼개긴 힘들겠지만,\n        모놀리스 서비스를 msa로 바꾸면서 도입해보기 좋다고 생각합니다.\n      ")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("section",[a("h2",[this._v("Q&A")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("section",[a("h1",[this._v("끝")]),a("div",[this._v("감사합니다.")])])}]};a.a=n},mLiN:function(t,a,e){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var i=e("aLDJ"),n=e("dA6k"),s=e("VU/8")(i.a,n.a,!1,null,null,null);s.options.__file="pages/slides/vue-apollo-graphql.vue",a.default=s.exports}});