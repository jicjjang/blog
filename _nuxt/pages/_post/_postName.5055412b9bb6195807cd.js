webpackJsonp([0],{"+YQi":function(n,s){n.exports='<section><p>새해가 되었으니 <s>신년목표...</s> 다시 잔디를 깔아야겠습니다.</p>\n<p>항상 보안, 로그인, OAuth 와 같은 것들은 파고 파도 어렵다는생각을 하고있었는데,\n회사일을 계기로 알게된 <code>FIDO</code>와 <code>HMAC</code>에 대해 갓구글님께서 알려주신 부분을 정리해보려 합니다.</p>\n<hr>\n<h2>Part 1. 기존 인증방식</h2>\n<h3>1-1. 지식 기반</h3>\n<p>인증이라는 말이 시작될 때 부터 사용하던 방식인 <code>비밀번호 입력</code>이 지식 기반의 인증입니다.\n보안상 이슈가 될 수 있는 부분은 사용자들이 <code>쉬운 문자열을 주로 이용</code>하는 것과 여러 사\n이트에서 <code>동일한 패스워드를 사용</code>한다는 부분입니다.</p>\n<h3>1-2. 소유 기반</h3>\n<p>은행에서 많이 발급받을 수 있던 <code>OTP (One Time Password)</code>와 <code>공인인증서</code>가 있습니다.\n사용자가 토큰을 가지고 있어야만 인증이 가능하기 때문에 지식 기반의 인증보다는 보안성이 높지만\nOTP는 카드나 단말기를 발급받기 위해서 최소 한 번은 면대면으로 사람을 통한 인증이 필요하고,\n매번 소유하고 있어야 한다는 단점이 있습니다. 공인인증서는 하드웨어의 휴대성과 낮은 편리성의 단점을\n보완할 수 있지만 유출의 위험이 높다는 단점이 있습니다.</p>\n<h3>1-3. 생체 기반</h3>\n<p>다양한 디바이스 (홍채/지문/안면 인식 전문 디바이스 + 근래의 핸드폰) 많이 사용되고 있는\n<code>지문 인식</code>, <code>홍채 인식</code>, <code>안면 인식</code> 등등이 있습니다.\n고유한 값들이기 때문에 높은 보안성을 가지기 좋지만, 유출이 되면 (고유/무결성 침해)\n다시 바꿀 수 없다는 단점이 있습니다. 또한 안면 인식의 경우에는 꾸준히\n바뀔 수 있기 때문에 지속적인 학습이 필요합니다.</p>\n<h2>Part 2. FIDO</h2>\n<p>모바일에서 음성인식, 지문인식, USIM 등을 활용한 간편하지만 강력한 보안을 가지는 인증 기술들이 많아지고 있습니다.\nFIDO가 제안하는 개념은, 이러한 기술들을 온라인에서도 활용하자는 것입니다.</p>\n<h3>1-1. 개념</h3>\n<p><a href="https://ko.wikipedia.org/wiki/FIDO">FIDO (Fast IDentity Online)</a> 개념을 정의한 <a href="https://ko.wikipedia.org/wiki/FIDO_%EC%96%BC%EB%9D%BC%EC%9D%B4%EC%96%B8%EC%8A%A4">FIDO Alliance</a>는\n2가지 표준을 제시했습니다. 두 표준 모두 공개키 방식으로 어떤 표준을 사용하더라도 상관없습니다.</p>\n<p><code>[참고] **FIDO는 주로 지문인식으로 로그인**을 한다고 알고있으나, 지문은 인증의 수단일 뿐이며 **공개키 방식**이 인증 방식입니다.</code></p>\n<h4>- UAF(Universal Authentication Framework)표준</h4>\n<p>지문, 음성, 홍체, 얼굴 등 사용자의 고유한 생체정보를 인증하는 비 패스워드(Passwordless)한 표준입니다.\n디바이스에서 생체 인증을 성공하면 디바이스에 저장된 개인키에 접근 권한이 발생하여 전자서명을 하는 방식입니다.</p>\n<h4>- U2F(Universal 2nd Factor)표준</h4>\n<p>기존 인증 방식을 1차 인증요소로 사용하고 보안 키를 저장한 동글을 이용하여 추가로 2차 인증을 하는 입니다.\nUSB로 연결된 동글 내 버튼을 누르거나 NFC를 이용하여 탭핑하는 방식 등을 사용할 수 있습니다.</p>\n<h3>1-2. 사용법</h3>\n<h4>- 등록</h4>\n<p><img src="https://jicjjang.github.io/blog/static/image/etc/scale-up-for-security/fido_registration.png" alt="FIDO Registration"></p>\n<ul>\n<li><a href="https://fidoalliance.org/">https://fidoalliance.org/</a> 참고</li>\n</ul>\n<p>Application이 있는 <code>site.com</code>에서 FIDO인증을 사용하기 위해서는 **&quot;1. 등록하기 버튼을 선택&quot;**합니다.\n**&quot;2. 등록을 위해 지문을 입력&quot;**하면, **&quot;3. 새로운 Private Key/Public Key 쌍을 생성&quot;**합니다.\n**&quot;4. 생성된 BOB의 키 중, 공개키를 <code>site.com</code>의 FIDO 저장소에 저장&quot;**하게 됩니다.</p>\n<h4>- 로그인</h4>\n<p><img src="https://jicjjang.github.io/blog/static/image/etc/scale-up-for-security/fido_login.png" alt="FIDO Login"></p>\n<ul>\n<li><a href="https://fidoalliance.org/">https://fidoalliance.org/</a> 참고</li>\n</ul>\n<p><code>site.com</code>에서 **&quot;1. 로그인 선택&quot;**을 한 뒤, **&quot;2. 지문을 입력&quot;**합니다. 디바이스에서는 Application과 입력된 인증 정보, 계정 정보를 토대로\nPrivate Key/Public Key를 알 수 있으며, <code>site.com</code>에서는 지문을 통해 Public Key를 얻을 수 있습니다.\n그 뒤에는 <a href="https://brunch.co.kr/@artiveloper/24">공개키 방식의 Handshake</a>를 통해 인증이 이루어집니다.</p>\n<h3>1-3. 프로토콜</h3>\n<h4>- 등록</h4>\n<p><img src="https://jicjjang.github.io/blog/static/image/etc/scale-up-for-security/fido_protocol_registration.png" alt="FIDO protocol registration"></p>\n<ul>\n<li><a href="https://fidoalliance.org/">https://fidoalliance.org/</a> 참고</li>\n</ul>\n<ol>\n<li>client가 server에게 로그인/등록 요청을 함 (유저의 로그인 요청)</li>\n<li>server는 client에게 선택 가능한 FIDO 인증 수단들 제공 (등록을 위해)</li>\n<li>인증 수단을 선택하고 등록함</li>\n<li>client가 server에게 이를 전달하여 새로운 키 (public/private)쌍을 생성하고 Public Key를 저장함</li>\n</ol>\n<h4>- 인증 / 트랜젝션</h4>\n<p><img src="https://jicjjang.github.io/blog/static/image/etc/scale-up-for-security/fido_protocol_authentication.png" alt="FIDO protocol authentication"></p>\n<ul>\n<li><a href="https://fidoalliance.org/">https://fidoalliance.org/</a> 참고</li>\n</ul>\n<p>인증은 등록과 거의 유사합니다. 그래서 특정 Application에서는 등록과 인증이 비슷하게 보여지기도 합니다. (UX의 훌륭함...?)</p>\n<ol>\n<li>client가 server에게 로그인 요청을 함 (유저의 로그인 요청)</li>\n<li>server는 client에게 선택 가능한 FIDO 인증 수단들 제공 (인증을 위해)</li>\n<li>인증 수단을 선택하고 인증함 (이 때, 이미 등록한 인증 수단이 있으면 우선적으로 제공할 수 있겠군요)</li>\n<li>client가 server에게 Public Key를 제공하고, 이후 공개키 방식의 Handshake를 통해 통신을 하게 됩니다.</li>\n</ol>\n<p>이후 Transaction을 위한 Protocol이 따로 정의되어 있으나, 인증과 동일한 과정을 거치며 데이터만 전달해주기 때문에 스킵하겠습니다.</p>\n<h4>- 해지</h4>\n<p><img src="https://jicjjang.github.io/blog/static/image/etc/scale-up-for-security/fido_protocol_deregistration.png" alt="FIDO protocol deregistration"></p>\n<ul>\n<li><a href="https://fidoalliance.org/">https://fidoalliance.org/</a> 참고</li>\n</ul>\n<ol>\n<li>user의 해지 요청</li>\n<li>server에서 공개키 제거</li>\n</ol>\n<hr>\n<p>인증 방식이 늘어날수록, 인증을 위한 업체가 늘어납니다. 1인 1Public Key 이지만, 이 키가 방식에 따라 여러개가 될 수 있게 되는 것이죠.\n그렇기 때문에 Application에서의 개인키 관리가 특히나 관건이 될 수 있습니다.</p>\n<p>이어서 HMAC을 통한 보안 강화에 대해 알아보겠습니다.</p>\n<h2>Part 3. HMAC</h2>\n<p><img src="https://jicjjang.github.io/blog/static/image/etc/scale-up-for-security/hmac.jpg" alt="HMAC"></p>\n<p><a href="https://en.wikipedia.org/wiki/HMAC">HMAC (Keyed-hash Message Authentication Code)</a>은\n발신자와 수신자가 공유하는 Secret Key를 이용해 무결성이 보장되지 않는 채널을 통해 보내는 메세지가 훼손되었는지 여부를 확인할 수 있게 도와주는 알고리즘입니다.</p>\n<p>발신자가 메세지에 Secret Key를 이용해 HMAC 알고리즘을 통한 hash값을 만듭니다. 이 해쉬값과 메세지를 함께 수신자에게 보내고,\n수신자는 수신된 메시지의 해시 값을 HMAC 알고리즘을 통해 메세지가 바뀌었는지 확인하게 됩니다.</p>\n<p>메세지의 무결성 및 신뢰성을 보장하기 위해 사용되는 HMAC은 공개키가 아닌, 대칭키 방식을 사용하기 때문에 보안상 허점이 존재하지만,\nDateTime을 함께 파라미터로 넘겨 지연시간 (URL expired time) 을 이용하여 만료된 URL인지 확인할 수 있어, 보안을 강화할 수 있습니다.</p>\n<hr>\n<p>매우 간단하게 (FIDO 위주...! ㅋㅋ) 몇가지 보안 강화 요소들에 대해 알아봤습니다.\n분명 FIDO, HMAC, 여러 기반들의 인증방식 등이 필수 사항은 아닙니다. 하지만 자신의 데이터, 고객의 데이터에는 책임이 따르기 때문에\n미리미리 대비가 필요합니다. (특히 개발자라면!) 이 뿐 아닌 다른 보안 강화 기술들 및 알고리즘도 꾸준히 학습해야 할 것입니다.</p>\n<p>새해 첫 포스팅은 이렇게 마치겠습니다.<br>\n새해 복 많이받으세요.</p>\n</section>\n'},"+tm4":function(n,s){n.exports='<section><p>오늘 새벽까지 javascript optimize 4 게시글을 작성했었는데요, 이전 파트에서 말씀드린대로\n정규표현식에 대한 5장은 스킵하고 6장으로 시작해보겠습니다.</p>\n<h2>6. 응답성 좋은 인터페이스</h2>\n<p>1장에서 브라우저 UI 스레드에 대해 아주 간단히 알아보았습니다. 즉, UI 업데이트 후 자바스크립트를 실행해야하는데\n동시에 실행할 순 없으므로 적절한 배치가 필요합니다.</p>\n<h3>6-1. 브라우저 UI 스레드</h3>\n<p>브라우저에서 보통 <code>스레드</code>라는 단어를 사용하진 않지만, UI 업데이트 및 javascript가 공유하는 프로세스를\nUI 스레드라고 합니다. 보통 유휴상태가 될 때까지 할 일을 대기시키는 큐 역할을 합니다.</p>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">handleClick</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">var</span> div = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">\'div\'</span>);\n  div.innerHTML = <span class="hljs-string">\'Clicked!\'</span>;\n  <span class="hljs-built_in">document</span>.body.appendChild(div);\n}\n</code></pre>\n<p>코드의 마지막 줄에서 appendChild 메서드가 실행되면 UI를 수정하도록 UI 업데이트를 큐에 추가합니다.\n정확히 말하자면</p>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/javascript/optimize/6/ui1.jpg" alt="image" style="margin:0 auto;">\n</figure>\n<p>이미지와 같이</p>\n<ol>\n<li>눌리는 모양으로 ui가 업데이트</li>\n<li>handleClick 실행</li>\n<li>ui 업데이트</li>\n</ol>\n<p>순서대로 UI 스레드가 진행됩니다.</p>\n<hr>\n<p>브라우저는 javascript를 일정 시간 이상 허용하지 않습니다. 그렇기 때문에 너무 많거나, 많이 반복되거나, 무한 루프에 빠진다면\n에러를 보게 되는데요, 이 에러는 브라우저마다 상이하고, 시간 또한 다릅니다.</p>\n<p>javascript를 만든 Brendan Eich가 한 말로 <code>&quot;자바스크립트가 1초 이상 실행된다면 아마도 그 코드는 잘못된 것이다.&quot;</code> 라는 말이 있다고 합니다...</p>\n<h3>6-2. 타이머 다루기</h3>\n<p>보통 타이머는 setTimeout이나 setInterval을 이용합니다. 그러면 javascript 엔진은 일정 시간동안 대기했다가 UI 큐에 작업을 추가합니다.\n그 말은 즉</p>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">greeting</span>(<span class="hljs-params"></span>) </span>{\n  alert(<span class="hljs-string">\'hahahahaha\'</span>);\n}\n\nsetTimeout(greeting, <span class="hljs-number">250</span>);\n</code></pre>\n<p>이라는 코드가 있으면 greeting 메서드를 250ms 뒤에 실행하는 것이 아니라, 250ms 뒤에 UI 큐에 추가한다는 것입니다.\n정확히 언제 실행이 될 지는 알 수 없습니다.\n(setInterval은 UI큐에 있는 작업이 아직 실행되지 않았다면 다시 UI 큐에 동일한 작업을 추가하지 않습니다.)</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> button = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'id\'</span>);\nbutton.onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  oneMethod();\n\n  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-comment">// blahblah...</span>\n  }, <span class="hljs-number">500</span>);\n\n  twoMethod();\n}\n</code></pre>\n<p>이 코드에서 만약 twoMethod 실행이 500ms 이상 걸린다면, twoMethod가 끝나기 전에 타이머 코드가 UI 큐에 등록됩니다.</p>\n<hr>\n<p>타이머 정확도에 대한 얘기를 해보자면, 윈도우 OS는 타이머를 15ms 단위로 갱신합니다.\n그리고 브라우저 대부분이 타이머 지연시간이 10ms 입니다.</p>\n<p>그래서 둘을 합친 25ms를 타이머 지연 최소시간으로 해놓으면 브라우저 및 타 OS에서 타이머에 관한 문제를 예방할 수 있습니다.</p>\n<hr>\n<p>코드를 한 타이밍에 한번만 처리하는 것은 비효율적일 때가 있습니다. 만약 1000개의 배열 항목에 지연시간 25ms, 처리시간 1ms라면\n(25ms + 1ms) * 1000 = 26000ms = 25s 입니다. 항목을 50개씩 묶어서 처리(너무 많이 묶는것도 비효율적일 수 있습니다.)\n할 수도 있습니다.</p>\n<hr>\n<p>타이머의 성능 문제는 타이머를 동시에 여러 개를 사용하면서 발생합니다. 모든 타이머가 실행 시간을 얻기 위해 경쟁하기 때문에\n너무 짧은 타이머 지연시간을 여러개 선언해 놓는 것은 병목현상이 발생하기 쉽습니다. 차라리 위에 말씀드린 것처럼 느린 주기에\n한꺼번에 여러 일을 실행하는 것이 훨씬 효율적입니다.</p>\n<h3>6-3. 웹 워커</h3>\n<p>브라우저 UI 스레드 밖에서 동작할 인터페이스의 필요성으로 만들어 진 것이 웹 워커입니다. 그래서 워커가 생성될 때마다 javascript를\n실행할 고유 스레드(브라우저 UI 스레드에 영향을 끼치지 않음)를 생성하기 때문에 성능 향상에 도움일 될 수 있습니다.</p>\n<p>단점은 UI 스레드에 묶이지 않기 때문에 브라우저의 자원 대부분에 접근하지 못하고,\n스레드 바깥에서 DOM을 변경하기 때문에 문제가 발생하기 쉽다는 점입니다.</p>\n<p>웹 워커는</p>\n<ol>\n<li>navigator 객체</li>\n<li>location 객체</li>\n<li>self 객체</li>\n<li>모든 ECMA 객체 (Object, Array, Date...)</li>\n<li>XMLHttpRequest</li>\n<li>setTimeout, setInterval</li>\n<li>close() (워커를 즉시 중단시킴)</li>\n</ol>\n<p>와 같은 일부 기능만을 가집니다.</p>\n<p>웹 워크를 실행하기 위해서는</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> worker = <span class="hljs-keyword">new</span> Worker(<span class="hljs-string">\'code.js\'</span>);\n</code></pre>\n<p>와 같이 실행하며, 실행이 된다면 지정한 파일에 대한 새로운 워커 환경(브라우저 UI 스레드와는 상관없는)을 가진\n새 스레드를 생성합니다. 비동기적으로 파일을 내려받으며, 모두 내려받은 후 시작이 됩니다.</p>\n<hr>\n<p>이벤트로 동작을 하는데 아래와 같은 이벤트로 통신을 하게 됩니다.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">// browser</span>\n<span class="hljs-keyword">var</span> worker = <span class="hljs-keyword">new</span> Worker(<span class="hljs-string">\'code.js\'</span>);\nworker.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{ <span class="hljs-comment">// 웹 워커에서 오는 정보를 받음</span>\n  alert(event.data);\n};\nworker.postMessage(<span class="hljs-string">\'testest\'</span>);        <span class="hljs-comment">// 웹 워커로 정보를 보냄</span>\n</code></pre>\n<pre><code class="language-javascript"><span class="hljs-comment">// web worker</span>\nself.onmessage = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{ <span class="hljs-comment">// 브라우저에서 오는 정보를 받음</span>\n  self.postMessage(<span class="hljs-string">\'hello!\'</span>);       <span class="hljs-comment">// 브라우저로 정보를 보냄</span>\n};\n</code></pre>\n<hr>\n<p>현실적으로 웹 워커를 사용하는 것은 브라우저 UI 스레드에 묶여있지 않고 순수한 데이터를 다루며,\n실행에 아주 긴 시간이 걸리는 스크립트에 적합합니다.</p>\n<hr>\n<p>사용자 경험 (UX)에 악영향을 줄 만큼 실행하면서 중요한 javascript 코드는 없습니다.\n사용자 경험이 항상 최우선 되야 함을 주의해주세요!</p>\n</section>\n'},"/rhx":function(n,s){n.exports='<section><p>이 포스팅은 회고록이므로 존칭이 없습니다 :) (다른 포스팅에는 존칭을 제대로 썼던가...ㅜㅜ)</p>\n<hr>\n<p>17년 11월 <a href="https://jicjjang.github.io/blog/post/seoul-app-contest-with-node-and-react-native/">서울시 공모전</a>\n이 끝난 후, 고민이 많아졌다. 언제나 그렇듯 규모가 있는 개인 프로젝트가 끝난 후 오는 여운으로\n여겼다. 보통 일주일을 넘어가지 않았던 여운이 여느 때와는 다르게 가시지 않았다. 무엇 때문일까.</p>\n<figure style="margin: 0 auto; text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/life/new-jobs/commit_log.png" alt="commit_log" style="width:100%;">\n</figure>\n<hr>\n<p>16년 7월 NHN벅스에 입사한 이후로 프론트 엔드 개발자가 되고자 했던 졸업 프로젝트 시기의 고민을\n잊지 않고 지금까지 <a href="http://115.71.238.136/">Mclang saloon</a>,\n<a href="https://github.com/jicjjang/archiver">archiver</a>, Dooray bot들, <a href="https://www.getrevue.co/profile/vuenewsletter/issues/vue-js-newsletter-45-vueconf-guide-new-speaker-typescript-starter-articles-videos-and-resources-57309">vue 공식\n뉴스레터</a>\n에도 소개되었던 <a href="https://github.com/jicjjang/vue-card-layer">vue-card-layer</a>,\n상당히 불만이 많았던 서울시 앱 공모전 <a href="https://github.com/seouldrinker">서울 드링커</a>,\nNuxt로 블로그를 만들었던 (이제는 vuepress가 대체할 것만 같은) <a href="https://github.com/jicjjang/blog">blog</a>\n... 이외에도 팀 세미나 4번, 외부 세미나 3번 (기타 주변인들을 도와준 비공개 프로젝트 등등)\n의 내용들로 혼자 공부하고 있었다.</p>\n<p>하고 싶었던 것을 회사에서 배우거나, 함께 발전할 수 없다는 것은 항상 마음 한편을\n찜찜하게 만들었고 혼자 하는 코딩이 잘 되고있는 것인지, 발전하고 있는 것인지를 전혀\n가늠할 수 없게 만들었다. 지금 당장 React를 해봐라, Vue를 해봐라, babel, webpack\n등등을 해봐라... 이런 것들을 몇 번 프로젝트를 했다는것 만으로 지금 당장 딱! 해낼 순 없지만\n적절한 구글링만 있으면 기본적인 (조금 더 이상인지 아닌지 가늠할 방법도 없다)\n개발은 뚝딱 해낼 수 있게 된 것은 확실하다.</p>\n<p>현재의 회사가 발전하지 않는다는 것은 아니다. 다만, 지금 당장 무언가의 기술을 뚝딱 적용하기에는\n쌓아올려진 시간이 많은 회사이므로 방향을 바꾸기에는 얼마 쌓여올려지지 않은 프로젝트보다 신중함이\n필요한 것은 사실이니까. <a href="https://jicjjang.github.io/blog/post/seoul-app-contest-with-node-and-react-native/">서울시 공모전</a>\n을 끝으로 개인적인 학습으로의 한계에 도달한 것 같다. 오픈 소스들을 들여다 보고, 다른 개발자들의\n프로젝트를 보고, 여러 세미나들을 참여해도 어떤 방향으로 나아가야 정답인 것인지 알기 힘들었다.\n일년 간의 세미나로도 회사 프로젝트에 넣어보고 싶었던 기술을 적용할 수 있겠다는 기회가\n보이지 않는다는 고민과 개인 프로젝트로의 발전에 한계를 느끼는 상황이 겹치게 된 것이 17년 11월.</p>\n<p>이직을 준비하기 시작했고, 처음에는 조금 안일하게 생각했다. (재수없다는 의견 100%) 그 이유는\n벅스를 운이 좋게(?) 들어갔(다고 생각했)기 때문이다.</p>\n<p>졸업 프로젝트를 준비하다가 그 전까지 한번도 보지 못했던 벅스 공채에 대한 포스팅을 보고\n<code>음... 한번 지원 해봐야지. 되면 대박, 안되면 말고... 어짜피 한 학기 더 남았으니까</code>\n라는 생각으로 지원을 했다. 서류를 붙고, 필기 테스트까지 붙었다. 여기까지 내가 어떻게 붙었을까\n그저 궁금하기만 했다. 지원 요건에 있는 <code>막학기 or 기졸업자</code> 조건에 맞지 않는데... 이러다\n나중에 다 합격시켜놓고 떨어뜨리면 마상일것 같은데... 라는 불신이 솟구쳤지만, 일단은 신기하기도\n하고 뭔가 묘한 기분이었다. 1차 면접은 두 명이 들어가서 자기소개를 하였고 이후 질문이 쏟아졌는데\n우연 찮게 옆자리 않으신 분 께서는 첫 면접이었다.\n(나중에 면접관님께서 물어봄. 자신감을 가지셔야 할 것 같다며...) 기초 이론 질문\n(예를 들어 OOP의 3대 원칙은? 과 같은...) 에도 많이 긴장을 하셔서 대답을 쉽게 하지 못하셨고,\n처음에는 번갈아 주어지던 질문이 점점 나에게 몰리기 시작했다. 운이 좋게 현재 듣고 있던\n전공에 대한 질문도 나왔고, 조금 더 대답을 많이 한 내가 옆자리의 면접자 분 보다는\n튀어보였던 것 같다. 2차 면접까지 갈 수 있었고, 압박 면접까지 통과해\n(고민했던 남은 한 학기에 대한 질문도 했었다. 대표님께서 내가 학업과 회사 일을\n알아서 처리할 수 있다면 상관없다고 해주셨다. 물론 내가 아닌 모두에게\n그렇게 말해주셨을진 장담 못하겠다.) 합격했다. 과정이 쉬웠던 것은 아니지만,\n과정을 거쳐가는 와중에 운이 있었다고 할만한 사건들이 있었던 것이다.</p>\n<p>각설하고, 시간이 지나며 기억이 왜곡되서인지 이러한 경험이 다시 반복되어 운이 좋게(?)\n들어갈 수 있을 것이란 막연함을 가지고 이직 활동을 시작하게 되었다.</p>\n<h2>과정 1</h2>\n<h3>1. New cell</h3>\n<p>개발이라고 하면 누구나 한번 쯤은 목표로 하는 대기업의 신규 셸에서 구인을 하는 것을 보고 지원!\n따로 조사한 것도 없이 선배의 추천을 받아 바로 도전을 하였다. 신규 셸에서는 이것 저것 도전을\n많이하고 회사에서도 많은 지원을 해주며 기존 인력들이 많이 넘어와서 분위기 또한 괜찮다는 조언을\n들었기 때문에 매우 설레는 마음으로 이력서를 작성하였고, 과제를 받게 되었다.</p>\n<h3>2. SNS</h3>\n<p>주문 관련 시스템으로 지원을 했다. 주문에 대한 무언가를 만들고 싶었다기 보다는 프론트에 대한\n지원을 받는 팀이 당시엔 여기만 있었던 것으로 기억한다. 1번과 거의 비슷한 시기에\n바로 이력서를 작성했던 것으로 기억하며, 이 또한 가깝고도 먼 지인의 지인 추천으로\n이력서를 넣었고 코딩 테스트를 보게 되었다.</p>\n<h3>3. Food</h3>\n<p>개인적으로는 가장 억울한(?) 지원. 조직이 여러 곳으로 나눠져 있는 회사가 아니었으므로\n당연하게도 프론트 엔드 팀으로 지원을 하였다. 여기도 추천 (추천을 많이 받았으나, 추천받은 곳은\n잘 되지 않아...ㅆ...)을 받아 이력서를 냈고 코딩 테스트를 보게 되었다.</p>\n<h3 style="color: #1790d6;">3.5. ...</h3>\n<p>뭔가 이 사이에 텀이 있었다. 처음엔 막연한 자신감 가득하게 이력서들을 냈지만, 기간이 지날수록\n지치기도 하였고, 구멍난 Github 잔디에 마음이 아파 blog 개편을 하였다.\n(<a href="https://jicjjang.github.io/blog">https://jicjjang.github.io</a> 에서\n<a href="https://jicjjang.github.io/blog">https://jicjjang.github.io/blog</a> 로)\n1번 ~ 3번 까지 대략 2.5개월 정도가 걸린 것 같다.</p>\n<h3>4. OOO</h3>\n<p>(유쾌한 경험을 한 곳이 아니기 때문에 회사의 주제를 명시하지 않았습니다.)\n뭔가 어중간하게 있기는 싫어 다시 한 번 이직 도전을 하게 되었다. 평소 사용은 하지 않지만\n동종 서비스에 관심이 많아 지원을 하게된 회사로, 이 회사를 기점으로 추천은 받지 않고 혼자\n노력해보기로 하였다. 이력서 이후 바로 면접이 잡히게 되어 이직 도전 이후\n첫 면접을 바로 보게 되었다.</p>\n<h3>5. Messaging</h3>\n<p>...국내 기업이지만 보통 해외에서 많이 서비스 되는 회사. (떨어졌다면 답장이라도...ㅠㅠ)\n정말 초창기 때부터 관심이 많았던 서비스. 최근엔 국내 유사 서비스도 나왔는데\n그 또한 잘되는 것 같다.</p>\n<h3>6. Pin tech</h3>\n<p>은행 말고 처음 써본 간편 결제 서비스는 모회사에서 서비스 중인 그으것. 명절 상품권을 간편 결제\n서비스의 포인트로 주므로 뭔가 반 강제적으로 사용하게 되었다. 또한, 큰 부분은 아니지만 회사\n로그인에 간편 결제 서비스 로그인이 연동되므로 미세먼지보단 조금 큰 사이즈로 관여는 해본 셈\n(...어떻게든 연결고리를 만들고 싶어서 ㅠㅠ)이었다. 이를 어필하며\n열심히 서류를 작성하여 과제를 받았다.</p>\n<h2>과정 2</h2>\n<h3>1. New cell</h3>\n<p>과제를 주말 48시간 동안 해야됐는데, 마침 그 주 주말에 GDG 코리아 행사가 있었다. 둘 중 하나를\n포기헀어야 하는게 맞았지만 둘 다 잡으려다 행사도 제대로 못보고 과제에 100퍼센트 전력을 쏟지도\n못했다. 테스트 코드를 제외하곤 다 끝냈다 생각하여 보냈지만... 결과는 좋지 않았다.\n조금 찜찜한 마음이 있었지만 100퍼센트 노력도 해보지 못했기에 그러려니 결과를 받아들였다.\n하지만 나중에 들은 선배의 말로는 내부 조직원께서 내가 지원했던 자리를 채웠다고... (^^;)</p>\n<h3>2. SNS</h3>\n<p>알고리즘 관련된 문제가 잔뜩 나왔던 것으로 기억한다. 거의 멍 때리다 끝난 듯.\n이 테스트를 계기로 운이란 것을 버릴 수 있었다. ㅠㅠ</p>\n<h3>3. Food</h3>\n<p>코딩 테스트를 봤다. 마지막엔 점수까지 나왔는데 <code>헐 나 잘봤네</code> 라는 생각이 들만한 점수였다.\n90 중반대 점수. 하지만 결과는 탈ㄹ... 탈락? ?????? 왜지???? 라는 고민이\n머리가 아플 정도로 들었다. 추천해주신 분과 나중에 얘기를 나눠 본 것으로는 아마 채용이 종료된\n것 같다고... (후... 채용이 종료됐으면 채용 공고는 내려주세요 ㅠㅠ...)</p>\n<h3>4. OOO</h3>\n<p>(유쾌한 경험을 한 곳이 아니기 때문에 회사의 주제를 명시하지 않았습니다.)\n너무 강렬한 인상의 면접이었다. 우선 자기소개는 없었다.\n<code>Vue가 React보다 왜 좋은가, 뭐 때문에 좋은가.</code> 음... 참으로 애매한 질문인 것 같다.\n버전이 fix된 것도 아니고, 마이너 패치가 꾸준히 되고있는 대형 프로젝트 들이고,\n성능 차이가 왔다갔다 하지 않는가... 개인적으로 생각하는 장 단점들에 대한\n의견을 드렸으나, React가 더 낫다는 말씀을 주로 해주신 것 같다.</p>\n<p>그렇게 약 30분 즈음 후, 준비한 질문을 다 했다는 말을 하셨고 이전에 대답하지 못한\n질문들에 대해 다시 생각 해 보셨냐 얘기가 나왔다. ...지나간 질문을 면접 도중 다시 생각하는 건\n좋지 않은 습관이라고 생각했기 때문에 다시 시간을 받고, 15초 정도 후 다시 잘 모르겠다는\n의견을 드렸다. 그 이후, 면접관 분들께서 대화를 하시곤 나의 블로그에서(???)\n<code>포스팅 중 틀린 곳이 있다. 지금은 그 내용에 대해 어떻게 생각하는지</code> 를 여쭤보셨다.\n음. 준비하지 못한 한시간을 채우기 위해 찾은 질문이 블로그의 틀린 부분을\n물어보시는 거라는게 당황스러웠다. 그렇게 면접이 끝났고, 결과는 좋지 못했다.\n하지만 아쉬움은 없었다.</p>\n<h3>6. Pin tech</h3>\n<p>정말 과제부터 면접 프로세스, 내용들이 만족스러웠다. (자세한 과제 내역에 대해선 스킵)\n과제를 제출하고 1차 면접이 잡혔다. 아침 10시에 면접을 보게 되어 건물 앞에 9시 45분 즈음\n도착하였으나, 10시 출근이라는 것을 몰랐다 ㅠㅠ... 엘레베이터가... ㅠㅠ 프론트 앞에 도착하니\n정확히 10시였다. 조금 숨을 고르고 들어가자며 쉴 수 있게 해주셨다. (늦은 것 때문에\n잘 안될 것 같다는 생각이...) 하지만 면접을 보러 들어가서 생각이 완전히 바뀌게 되었다.\n친절한 면접관 소개 이후 나의 자기소개, 분위기가 편안해질 말들을 한 후 여유롭게 면접을\n시작해 주셨다. (엘레베이터 얘기를 꺼냈더니, 면접관 분들은 15~20분에 도착하셨다는!!! ㅋㅋ\n웃으면서 시작할 수 있었다.) 면접에서는 프론트와 백엔드에 대한 나의 생각, 고민들을\n나열하듯 물어봐 주셨고 면접이 아닌 토론같은 대화를 나눌 수 있었다. 늦게 시작된 면접이었기 때문에\n그만큼 시간이 촉박한 것이 사실이었다. 조금 급하게 문답을 마치고 과제 코드 리뷰에 들어갔다.\n(사실 이 회사를 지원한 것 중 큰 이유는 유명한 리뷰 문화 때문!!)\n코딩 스타일을 위주로 보시는 듯 하였고, 따로 소개하는 것 보다는 파악을 위주로 하시며\n궁금하신 부분들만 나에게 물어보셨다. 면접을 마치고 나오며 문득 든 감정은 <code>즐거웠다</code> 였으므로\n스스로도 낯설었다. 이것은 팀워크에 대한 내용 위주로 진행되는 2차 면접까지 이어졌고\n경영진과의 면접 또한 생각보다 즐겁게 이어졌다.</p>\n<hr>\n<p>이렇게 여섯 번의 도전을 하였는데 마지막 면접이 4월이었다. 총 5~6개월 동안의 도전은\n마무리 지어졌고 최종적으로 <code>카카오 페이</code>에 합류하게 되었다. (짝짝)</p>\n<p><s>이번 생</s> 이직은 처음이므로 모든 과정에서 겪는 감정은 늘 새로웠다. (절대 잘난척 아님)\n겪어보지 못한 취준생의 입장을 이제서 겪어보는 것 같기도 했고 이 기간동안 주변인들께 상당히\n민감한 반응을 보였기에 죄송한 마음이 컸다. (만나요 여러분!)</p>\n<p>NHN벅스에서의 1년 11개월 (16년 7월 ~ 18년 5월) 여정이 끝나가고 있다. 지금보다 더 여유로운\n일상이 되진 못할 것이다. 더 어려운 도전이 많이 기다릴테지만, 새 집으로 이사가는 것 마냥\n싱숭생숭하다.</p>\n<p>나와 벅스의, 그리고 이제 카카오 페이의 밝은 앞날을 기대해 본다.</p>\n<figure style="margin: 0 auto; text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/life/new-jobs/kakaopay.jpg" alt="kakaopay" style="width:100%;">\n</figure>\n</section>\n'},"0SnD":function(n,s){n.exports='<section><p>몇일 전, 페이스북에 아래와 같은 질문이 올라왔었습니다.</p>\n<pre><code class="language-text">javascript에서 상속구조를 만들 때\n\nfunction Person(name) {\n    this.name = name;\n}\nfunction Student(name, school) {\n    Person.call(this, name);\n    this.school = school;\n}\n\nStudent.prototype = Object.create(Person.prototype);\nStudent.prototype.constructor = Student;\n\nvar student1 = new Student(&quot;lee&quot;, &quot;a&quot;);\nconsole.log(student1.name) //lee\n\n이런 식으로 만들고 있는데, \nStudent.prototype = Object.create(Person.prototype);\n이 부분에서 이 것과\nStudent.prototype = new Person();\n을 하는 것의 큰 차이점을 잘 모르겠습니다 ㅠ_ㅠ\n...\n</code></pre>\n<p>위 질문에 맞는 대답은 해드렸지만 최근에 프로토타입에 대해 소홀한 부분이 있어서\n자바스크립트에서의 상속에 대해 한번 정리를 해보려합니다.</p>\n<hr>\n<p>자바스크립트가 사용하는 프로토타입 모델에서의 상속은 아래와 같습니다.</p>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Foo</span>(<span class="hljs-params"></span>) </span>{\n    <span class="hljs-keyword">this</span>.value = <span class="hljs-number">1</span>;\n}\n\nFoo.prototype.method: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{}\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Bar</span>(<span class="hljs-params"></span>) </span>{}\n\n<span class="hljs-comment">// Foo의 인스턴스를 만들어 Bar의 prototype에 할당</span>\nBar.prototype = <span class="hljs-keyword">new</span> Foo();\n<span class="hljs-comment">// Bar의 prototype의 생성자는 자기 자신.</span>\nBar.prototype.constructor = Bar;\n\n<span class="hljs-keyword">var</span> barz = <span class="hljs-keyword">new</span> Bar() <span class="hljs-comment">// bar 인스턴스를 만든다.</span>\n</code></pre>\n<h2>결과</h2>\n<p>barz의 생성자 Bar의 prototype은 Foo입니다. Foo의 constructor는 Bar를 가리키며,\nFoo의 prototype은 Object를 가리킵니다. 하지만 Object의 프로토타입은 다시 Foo를 가리키죠.</p>\n<ul>\n<li>\n<ol>\n<li>barz의 constructor -&gt; Bar</li>\n</ol>\n</li>\n<li>\n<ol start="2">\n<li>Bar의 prototype -&gt; Foo, Foo의 constructor -&gt; Bar</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>클래스의 상속 개념을 가지는 Bar, Foo와 같은 함수들은 prototype, constructor로\n순환구조를 가지게 됩니다.</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<ol start="3">\n<li>Foo의 prototype -&gt; Object</li>\n</ol>\n<ul>\n<li>\n<ol>\n<li>순환구조 최상위인 Object에 도달하면 끝이나게 됩니다.</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src="https://jicjjang.github.io/blog/static/image/javascript/prototypal-inheritance-model/result.png" alt="result"></p>\n<h2>예외 케이스</h2>\n<p>만약 Bar의 프로토타입 생성자 (Bar.prototype.constructor)를 정해주지 않으면,\n상속받은 함수(new Foo())를 가리키게 됩니다.</p>\n<p><img src="https://jicjjang.github.io/blog/static/image/javascript/prototypal-inheritance-model/exception.png" alt="exception"></p>\n<h2>하지만</h2>\n<p>비슷하지만 최근엔 다른 방식을 지향하게 되었습니다. 거의 똑같지만!\n<code>Bar.prototype = new Foo();</code> 대신 <code>Bar.prototype = Object.create(Foo.prototype);</code>\n를 하는것이죠. 물론 prototype.constructor도 이전과 마찬가지로 동일하게 정의해줘야 합니다.\nnew Foo()를 해도 상관은 없지만, new 연산을 사용하면 아래와 같은 이슈(??)가 생깁니다.</p>\n<p><img src="https://jicjjang.github.io/blog/static/image/javascript/prototypal-inheritance-model/issue.png" alt="issue"></p>\n<p><code>Bar.prototype = new Foo();</code>를 하면 필요없는 객체의 데이터까지 들어오게 됩니다.\n사실 무시할 수도 있지만, 본래의 역활과 다른 무언가까지 생기는게 찝찝하긴 합니다.</p>\n<p>또한, Object.create에도 약간의 이슈가 있는데요, IE9과 같은 마이너 브라우저에서 사용할 수\n없다는 점입니다. 이 부분은 아래 코드처럼 사전 정의를 통해 해결할 수 있습니다.</p>\n<pre><code class="language-javascript"><span class="hljs-built_in">Object</span>.create = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">o</span>) </span>{\n    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">F</span>(<span class="hljs-params"></span>) </span>{};\n    F.prototype = o;\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> F();\n}\n</code></pre>\n<p>참고 : <a href="http://unikys.tistory.com/320">[속깊은 자바스크립트 강좌] 상속, new와 object.create의 차이</a></p>\n<hr>\n<p>읽어주셔서 감사합니다.</p>\n</section>\n'},"0muq":function(n,s){n.exports='<section><p>지난 포스트에서 자주 찾아뵙겠다고 하자마자 반년만에 글을 쓰게 되었습니다. (짝짝짝)</p>\n<p>졸업전시 준비를 하면서 썼던 회사에 합격하게 되어 어느덧 직장인이 되었네요 :D\n회사를 다니면서 혼자 공부하며 준비한 React&amp;Redux 프로젝트에 대해 소개하겠습니다.</p>\n<p>홍익대학교 시각디자인학과 졸업 전시회 출품작 개발을 맡게 되었습니다.<br>\n(아래 링크는 소개하는 인스타 페이지 및 개발 웹사이트 입니다.)</p>\n<p><a href="https://www.instagram.com/mclang_saloon/">https://www.instagram.com/mclang_saloon/</a></p>\n<p><a href="http://115.71.238.136/">http://115.71.238.136/</a>\n(참고 - 1920x1080 사이즈 전용으로 제작했습니다. 도메인은 아직 따로 없습니다.)\n(참고 - 접속 시 이미즈 크기 문제로 속도가 느릴 수 있습니다. 디자이너의 졸업 전시 작품이기에 이미지는 용량이 조금 크더라도 접어두고 작업을 진행하였습니다.)</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/javascript/react/volume_size.png" alt="image" style="width:500px; margin: 0 auto;">\n</figure>\n<p>국내 크래프트 비어를 모아 소개해주는 사이트입니다. 어떻게 제작하게 되었고, 어떤 과정으로 제작하게 되었는지 풀어보겠습니다.</p>\n<h2>1. 제작 경위</h2>\n<p>오래 전부터 혼자 React, Redux, Redux-thunk, Redux-promise... 등과 같은 React와 주요 라이브러리들에 대해 공부하고 있었습니다. <strong>그런데 최대 단점!!!</strong> 그건 바로... <strong>디자인이 없으면 만들기 힘들다</strong>는 것 입니다. 마침 지인이 함께 프로젝트를 하자는 제의를 주셔서 공부만 해오던 React를 활용해 프로젝트를 하게 되었습니다.</p>\n<h2>2. 설계</h2>\n<h3>2-1. 프론트</h3>\n<p>처음엔 고민을 많이 했습니다. React 공부는 오래전부터 했지만, 개발은 시작해보질 않았으니 남아있는게 없었습니다. 결국 다시 공부를 하면서 진행해야 했고 추가로 ES6도 개발을 시작하면서 처음 공부하게 되었습니다.</p>\n<h3>2-2. 서버</h3>\n<p>프론트에 포커스를 맞추기로 했고, 디자이너의 Needs도 시각적인 것이 중요했기 때문에 서버는 알던 기술을 활용하기로 했습니다. Php, Java, Javascript, Python 중 고를 수 있었지만, 가장 최근에 썼었고, 빠르게 적용시킬 수 있겠다 생각이 든 Django와 djangorestframework를 사용해 API를 던져주기로 정했습니다.</p>\n<h3>2-3. 전체</h3>\n<p>우선 API를 만들고 프론트 작업을 시작하려 했지만, 디자이너의 추가적인 요구사항이 지속적으로 생겨남에 따라 API를 우선시 할 수 없었고, 처음에 나왔던 명세로 API를 작업하고, 프론트 작업을 하면서 API에 더 필요한 부분을 추가하는 순서로 진행하였습니다.\n추가로, 가상 서버나 배포 부분은 개발 진행이 끝난 후 생각하기로 하고 뒤로 미뤘습니다 (...)</p>\n<h2>3. 작업</h2>\n<p>Django의 Virtualenv 설정 및 pip3 라이브러리 인스톨, CBV 순서로 서버 구현을 진행하게 되었고 디자인이 한 페이지씩 나올 때마다\nReact를 한 페이지 씩 진행하였습니다. (글로 싸지르는건 쉽지...)</p>\n<h2>4. 가장 큰 이슈</h2>\n<p>비동기 데이터의 순서 보장 이슈가 처음 사용하는 React에서는 해결하기 힘든 큰 이슈였습니다. 게다가 한꺼번에 이미지나 데이터를 보여주지 않고 스크롤 할때마다 데이터를 불러오는 방식을 사용했던 이유는 바로바로....</p>\n<p>위에서 말씀드린 이미지의 용량 문제였습니다. 1개의 Brewery에 1MB이미지 1~3장 사이를 가지고 있는데 54개의 brewery들을 한꺼번에 불러오면.... (-_-b)</p>\n<p>감당을 할 수 없었기 때문에 생각했던 방식은 처음 페이지 진입 시 비동기 데이터 요청과 첫 post 10개(이미지 로딩)를 불러오고, 그 다음 데이터들은 10개씩 끊어서 스크롤을 하여 최하단의 50픽셀 전까지 내려갔을 때 요청하도록 하는 것이었습니다.</p>\n<h2>5. 느낀점</h2>\n<p>이게 키포인트라고 생각했기 때문에 3, 4번 부분을 간단하게만 작성하였습니다. 프로젝트가 커지면 커질수록 Redux가 점점 더 중요해지는 핵심인데, 반대로 말하면 프로젝트가 작을 때에는 그다지 필요가 없었다는 것입니다. (절대 그렇지 않습니다... 제 주관 100%인 얘기입니다.)</p>\n<p>데이터 관리인 store 때문에 나온 Flux 패턴 라이브러리 이므로 데이터가 적은 페이지에선 필요성이 높지 않다고 느꼈습니다. 그리고 Promise 패턴의 중요성이 매우 높았습니다. (이젠 async/await 위주로 변하겠네요.) 비동기로 데이터를 요청했을 때, 리스트의 순서가 보장이 되어야하는데 계속 맞지 않아 promise로 해결해야 했습니다. 그 과정에서 사용했던 비동기 라이브러리 axios에 issue도 남겼지만 무참히... ㅠㅠ</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/javascript/react/question.png" alt="image" style="width:650px; margin: 0 auto;">\n</figure>\n<h2>6. 못다한 이야기</h2>\n<p>다썼다고 좋아하는데 서버 세팅에 대해 올리지 않았네요...\n이 부분은 따로 알려드릴 내용이 많기 때문에 다음 포스팅에 이어서 쓰겠습니다.</p>\n<hr>\n<p>위 내용 까지가 제가 첫 React 프로젝트 경험기였습니다. 바로 서버 세팅에 대해 포스팅을 더 쓸 생각인데\n끝까지 잘 읽어주세요~\n아, 그리고 이 프로젝트는 디자이너의 요청으로 git에 공개되지 않았습니다 ㅠㅠ 양해바랍니다.</p>\n</section>\n'},"3bLg":function(n,s){n.exports='<section><h2>문제의 발단 : 새로 구입한 서버에 nginx와 php 설치를 마치고 테스트용 html 파일을 실행시켜보고 잘된다고 생각하고 몇일 후...</h2>\n<p><code>ERROR: An another FPM instance seems to already listen on /var/run/php5-fpm.sock</code></p>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/php/fastcgi/error-log1.png" alt="image">\n</figure>\n<p>물론, /var/log/php5-fpm.log 파일도 마찬가지였습니다.</p>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/php/fastcgi/error-log2.png" alt="image">\n</figure>\n<p>대충 FPM 인스턴스가 이미 있다.. 라는 에러와 함께 nginx에서 php가 돌아가지 않는다는걸 뒤늦게 깨닫고 nginx, fpm 설정들을 다 찾으며 3~4일을 헤매었습니다...</p>\n<h4>1. 재부팅.</h4>\n<p>대부분 구글에 있는 포스팅의 내용은</p>\n<ul>\n<li>\'php-fpm 재부팅 하세요!\'</li>\n<li>\'ps aux | grep php로 php를 찾아서 pkill 후 다시 service php5-fpm restart 하세요!\'</li>\n<li>\'/etc/init.d/php5-fpm reload 후, /etc/init.d/ph5-fpm restart 하세요!\'</li>\n</ul>\n<p>이 세가지 였습니다. 제가 생각해도 인스턴스가 이미 있다는 에러니까 프로세스 종료 후 다시 시작 하는게 맞겠다 싶었습니다. 구글님이 시키는대로 해야지...</p>\n<p>...</p>\n<p>몇번의 시도 후 포기... 하지만 대부분의 포스팅이 위의 3개 중 하나였습니다.</p>\n<h4>2. 재설치.</h4>\n<p>그럼 아예 다시 설치 해 보겠습니다..</p>\n<p><code>sudo apt-get remove php5-fpm &amp; sudo apt-get install php5-fpm</code></p>\n<p>다시 설치하니, index.php를 실행하면 빈 화면만 나오면 사이트 페이지가 <code>502 bad gateway error</code> 페이지로 바뀌었습니다. 하지만 처음 나왔던 에러는 그대로 나왔습니다. ㅠㅠ....</p>\n<h4>3. 다시 구글링.</h4>\n<p>한참 구글링을 하다</p>\n<p><a href="http://wildlyinaccurate.com/solving-502-bad-gateway-with-nginx-php-fpm/">http://wildlyinaccurate.com/solving-502-bad-gateway-with-nginx-php-fpm/</a></p>\n<p>이 블로그를 발견했습니다.</p>\n<p>제가 했던 삽질과 다른 점은 <code>php5</code>와 <code>php5-cgi</code>를 다시 설치했다는 점과, <code>sudo chmod go+rw /var/run/php5-fpm.sock</code> fpm 소켓 부분의 권한 변경이었습니다.\n권한부분에서의 에러는 없었으므로 php5-cgi의 문제였습니다.</p>\n<p>결론 : 정확히 어떤 부분인지는 모르겠으나, php-fpm과 php-cgi와의 관계에서 나온 에러로, php-cgi를 재설치 하니까 에러가 사라졌습니다.</p>\n<blockquote>\n<p>cgi란? CGI 는 하나의 요청(Request)에 하나의 프로세스를 생성한다. 이것은 프로세스를 생성하고 삭제하는 과정에서 많은 부하가 발생한다. 당연히 느리다. 이를 개선하기 위해서 등장한 것이 FastCGI이다. FastCGI는 요청이 있을 때마다 프로세스가 만들어지는 것이 아니라 만들어진 프로세스가 계속해서 새로운 요청들을 처리한다. 덕분에 프로세스를 생성하고 제거하는데 들어가는 부하가 줄어든다. - wikipedia</p>\n</blockquote>\n<blockquote>\n<p>php-fpm란? FastCGI Process Manager의 약자로, php를 FastCGI 모드로 동작할 수 있게 해줍니다. (5.4 이후 부터는 php 내장이라고 합니다 ^^;)</p>\n</blockquote>\n<hr>\n<p>개발은 언제나 사소한 오류로 시간을 잡아먹게 하지만 그 부분을 해결했을 때의 쾌감 덕분에 계속 코딩을 할 수 있는거 같습니다.<br>\n이 포스팅으로 제가 구글링 한 것 처럼 누군가 비슷한 에러를 고칠 수 있게 되었으면 좋겠습니다.</p>\n</section>\n'},"6wSq":function(n,s){n.exports='<section><h1>Markdown Demo</h1>\n<h2>External 1.1</h2>\n<p>Content 1.1</p>\n<p>Note: This will only appear in the speaker notes window.</p>\n<h2>External 1.2</h2>\n<p>Content 1.2</p>\n<h2>External 2</h2>\n<p>Content 2.1</p>\n<h2>External 3.1</h2>\n<p>Content 3.1</p>\n<h2>External 3.2</h2>\n<p>Content 3.2</p>\n<h2>External 3.3</h2>\n<p><img src="https://s3.amazonaws.com/static.slid.es/logo/v2/slides-symbol-512x512.png" alt="External Image"></p>\n</section>\n'},"7yFs":function(n,s){n.exports='<section><p>요 근래 <a href="https://jicjjang.github.io/blog/post/life/">서울드링커 프로젝트 사건(?)</a>\n이후로 개인프로젝트에 대해서 약간 손을 놓고있었습니다. ㅠㅠ</p>\n<p><img src="https://jicjjang.github.io/blog/static/image/frontend/blog-renewal/commit.png" alt="빵꾸난 잔디"></p>\n<p>출퇴근을 제외한 잉여한 날들을 보내다 들어가본 Github에 빵꾸난 잔디로 슬퍼하다\n무언가 프로젝트를 진행해야겠다는 생각이 들더군요.</p>\n<h2>1. 아이디어</h2>\n<p>그 동안 jekyll에 어느정도 만족을 하며 사용하고 있었지만 루비를 모르는 상태에서\nGithub Pages를 원하는데로 컨트롤하기에는 이슈가 있었기 때문에 Vue를 사용하여\n개편을 해버리기로 하였습니다. 기왕 바꾸는거 이쁜 디자인에 UX적으로 더 깔끔하면\n좋겠다고 생각했지만, 디자인 개편이 아닌 기능적으로 언어를 바꾸는게 목표였기 때문에\n기존 디자인을 유지한 채 진행하는 것으로 결정!</p>\n<p>시작하기 전에 몇가지 고민이 있었는데요,</p>\n<ol>\n<li>Vue로 개발해서 Github Pages에 호환되도록</li>\n<li>블로그가 대해서 검색 시 잘 나왔으면 좋겠고</li>\n</ol>\n<ul>\n<li>따로 SEO 개선 작업 없이도 기존 Github 페이지의 게시글들은 검색 시 잘 나왔음</li>\n</ul>\n<ol start="3">\n<li>기존처럼... 포스팅하기 쉽게?? 하자!</li>\n</ol>\n<p>이러한 사항들을 종합하여 사용하기로 한건 <a href="https://nuxtjs.org/">Nuxt.js</a>!!!\n(사실 이미 나와있던 답...)</p>\n<h2>2. 일단 시작...</h2>\n<p>사실 Nuxt.js 한글화 번역에 참여한 contributor이지만 막상 Nuxt로 개발을 해본적 없는...\n그래서 이번 기회에 원래 하고싶었던 storybook까지 써서 해보기로 했습니다.</p>\n<h3>2-1. <a href="https://ko.nuxtjs.org/guide/directory-structure">Directory</a></h3>\n<p>기본적으로 Nuxt는 디렉토리를 생성해주고, 디렉토리별로 기능을 사용할 수 있게 해줍니다.</p>\n<ul>\n<li>Components - Vue와 마찬가지로 Component들을 모아줌</li>\n<li>Assets - Webpack의 loader를 거친 static 파일들</li>\n<li>Static - 평범한 static 파일들</li>\n<li>Middleware</li>\n<li>Pages - Route를 따로 지정할 필요 없이, 경로에 맞게 파일들만 생성하면\n저절로 Route가 생성됨</li>\n<li>Layouts - Pages에 있는 페이지들을 불러오기 전에 지정한 Layout을 거치게 됨.</li>\n<li>Plugins</li>\n<li>Store - Vuex의 데이터가 들어갈 Store</li>\n</ul>\n<h3>2-2. <a href="https://github.com/jicjjang/blog">URL</a></h3>\n<p>기존에 사용하던 블로그(https://jicjjang.github.io)가 아닌\n<a href="https://jicjjang/github.io/blog">https://jicjjang/github.io/blog</a>로\nurl을 바꾸기로 했습니다. 일단 블로그를 개편해야 하니까 개편 후에 블로그가 아닌 다른 기능을\n메인 페이지에 넣고 기능은 넣어야 되겠다고 생각했습니다. 그런데 이게 막상 개발을 하면서 보니\n추가적으로 설정하거나 고려해야 할 사항들이 생겨나게 되었죠. (개발이 진행되는 도중에는\n기존 URL을 유지했습니다.) 또한 Nuxt.js에서 알려주는\n<a href="https://ko.nuxtjs.org/faq/github-pages">Github Pages deployment</a>도 매우\n자세하지는 못했습니다 ㅠㅠ</p>\n<h3>2-3. Posting</h3>\n<p>기존에 포스팅하던 markdown 형식을 그대로 유지하고 싶었습니다. 기존엔 포스팅을 추가하기만 하면\n메인 페이지에서 리스팅도 모두 보여주고, 아카이브, 카테고리 등등 페이지들에서 잘 나왔는데...\n하지만 루비와 같은 중간서버를 두지 않고 프론트에서 파일경로에 접근하기에는\n보안상 무리가 있었습니다. 그래서 루트경로에 <code>contentMap.js</code>라는 파일을 하나 만들고\n포스팅과 카테고리 정보를 넣어주었습니다. markdown 파일들은 static 경로 안에 추가해주었습니다.</p>\n<p>(<a href="https://github.com/jicjjang/blog/tree/master/static/static">static 경로를 보시면</a>\nstatic/static/... 라는 구조로 되어있는데, 이는\nhttps://jicjjang.github.io/blog/static/... 처럼 접근하고 싶었기 때문입니다.\nstatic 이라는 단어가 url에 명시되도록 하고 싶었는데, 기존 Nuxt 생성시 자동으로 만들어졌던\nstatic 경로 하나만 있으면 https://jicjjang.github.io/blog/... 아래 경로로\n바로 접근이 가능했기 때문입니다.)</p>\n<h3>2-4. Slides</h3>\n<p><a href="https://revealjs.com/">Reveal.js</a>를 이용한 포스팅들을 그대로 가져가야 했습니다.\n버리고 싶지 않았고, 계속 추가할 아이디어들이 있었기에 함께 이전을 했습니다.\n(하는김에 최신버전으로!!!) 문제는 Reveal.js를 초기화 코드였습니다.</p>\n<pre><code class="language-javascript">Reveal.initialize({\n  <span class="hljs-attr">dependencies</span>: [\n    { <span class="hljs-attr">src</span>: <span class="hljs-string">\'/blog/static/slides/plugin/markdown/marked.js\'</span> },\n    { <span class="hljs-attr">src</span>: <span class="hljs-string">\'/blog/static/slides/plugin/markdown/markdown.js\'</span> },\n    { <span class="hljs-attr">src</span>: <span class="hljs-string">\'/blog/static/slides/plugin/notes/notes.js\'</span>,\n      <span class="hljs-attr">async</span>: <span class="hljs-literal">true</span> \n    },\n    { <span class="hljs-attr">src</span>: <span class="hljs-string">\'/blog/static/slides/plugin/highlight/highlight.js\'</span>,\n      <span class="hljs-attr">async</span>: <span class="hljs-literal">true</span>,\n      <span class="hljs-attr">callback</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{\n        hljs.initHighlightingOnLoad();\n      }\n    }\n  ]\n});\n</code></pre>\n<p><code>mounted</code> 안에 해당 코드를 넣었지만, Reveal이 생성되는 정확한 시간을 캐치하기에는\n무리가 있기에 setTimeout 처리를....(흑흑 무식한 나... 해결 방법을 아시면 저에게 연락을..!)</p>\n<h3>2-5. Resume</h3>\n<p><a href="https://jicjjang.github.io/blog/resume">Resume 페이지</a>도 함께 옮겼습니다.\nLayout을 따로 만들었는데, 바뀐건 거의 메타데이터 밖에 없네요.</p>\n<h3>2.6 Deployment</h3>\n<p>제 Github 계정 아래에있는 jicjjang.github.io Repository에서는 master 브랜치로\n코드를 올리면 반영이 바로 되었지만, <a href="https://github.com/jicjjang/blog">blog</a>라는\nRepository에서 작업을 했기 때문에 <code>gh-pages</code> 브랜치에 <code>generate</code>된 코드를 올렸습니다.</p>\n<p><code>generate</code> 명령어는 <code>build</code> 명령어와 다르게 정적 호스팅을 위해 사용하는데,\n동적 url에 들어갈 경로를 미리 dist 디렉토리에 생성합니다. 그래서 <code>contentMap.js</code>에 넣어준\n정보들 중 경로 부분을 <code>nuxt.config.js</code>의 generate.route 부분에서 한번 읽을 수 있도록\n해주어야 합니다.</p>\n<p>명령어에 대해서는 Nuxt의 <a href="https://ko.nuxtjs.org/faq/github-pages">Github Pages deployment</a>\n페이지에도 있지만 <a href="https://github.com/L33T-KR3W/push-dir">push-dir</a> 패키지를\n설치하여 진행했습니다.</p>\n<hr>\n<p>이렇게 <code>https://jicjjang.github.io</code> 도메인의 블로그가\n<a href="https://jicjjang.github.io/blog">https://jicjjang.github.io/blog</a>로 옮겨졌습니다.</p>\n<p>뭔가 복잡한 것 같은데 끝내고 나니 간단했던 프로젝트였습니다. 오랜만에 개인프로젝트로 잔디가\n몇칸 심어진것을 보니 기분이 좋아졌네요 ㅎㅎ. 항상 프로젝트에 대한 아이디어를 생각하기가 힘든데\n더 재밌는 프로젝트가 있었으면... 하게 됩니다.</p>\n<p>Github Pages 블로그 리뉴얼 후기 대해 마무리 합니다.\n블로그 이전(기존 블로그도 유지는 하고있지만 ㅎㅎ) 후 첫 포스팅! :D 읽어주셔서 감사합니다~</p>\n</section>\n'},"8/1M":function(n,s){n.exports='<section><p>얼마 전, 작성했던 Liff 관련 포스팅에서 언급한 실생활에서 사용할 수 있는 간단한 앱을 만들었습니다.</p>\n<p>솔직히 말해서 배포도 하였고(heroku에 배포. 프로세스가 sleep 모드에 들어가면 wake up이 필요하므로 초기에 느림),\n지금도 돌아가고 있지만 배포 후 url을 앱에 등록하면 pathParam이나 quetyString등의 조작이 힘들기 때문에\n현재는 웹주소로만 사용하고 있습니다.</p>\n<p>그럼 Liff를 이용한 개발 내용을 순서대로 리뷰해보겠습니다.</p>\n<hr>\n<h4><em>- 기본적으로 Liff 앱은 mobile 환경에서만 사용 가능합니다. 라인 pc앱에서 사용할 수 없습니다.</em></h4>\n<h2>0. 아이디어</h2>\n<p>요즘 참여하고있는 <a href="https://www.alwaysdodo.com/">DODO</a>의 슬랙에서 슬랙봇을 만든다는 얘기를 듣고\n간단한 아이디어를 글만으로 표현하기 힘들 때, Liff를 통해 그려주는게 어떨까? 라는 아이디어를\n생각했습니다. (라곤 하지만, 이전에 포스팅에서 소개드린 <a href="https://engineering.linecorp.com/ko/blog/detail/299">line liff 소개</a>\n블로그 글의 앱을 슬랙에 연동한 것)</p>\n<h3>1. 슬랙 봇을 통한 커멘트 입력</h3>\n<p>커멘드를 입력하면 바로 링크로 이동이(ex - liff://apps/LIFF_APPS_ID 라는 url로) 되도록...!\n하는건 <s>보안상 이슈로</s> API가 없었기에 할 수 없었습니다.</p>\n<hr>\n<h3>2. 버튼 클릭</h3>\n<p>커멘드 입력 후 버튼이 뜨고, 버튼을 클릭하여 링크로(liff://apps/LIFF_APPS_ID)\n이동하는 방법을 이용하였습니다. 링크 이동 시, 위에서 말씀드린 queryString이나 pathParam을\n넘길 수 없는 부분이 보안상 이슈가 될 수 있다 생각했으나, 유동적인 앱 활용에는 방해가 되었습니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/liff-app-dev/liff-app-dev1.png" alt="image" style="display:inline-block; width:45%; margin:0 2%;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/liff-app-dev/liff-app-dev2.jpeg" alt="image" style="display:inline-block; width:45%; margin:0 2%;">\n</figure>\n<h4><em>- 이미지에서는 버튼이 아닌 링크로만 구현이 되어있습니다.</em></h4>\n<hr>\n<h3>3. Liff 페이지로 이동</h3>\n<p>등록한 앱으로 페이지를 이동하여 뭔가를 그린 후, <code>Save</code>를 누르게 되면\n미리 등록해놓은 슬랙의 client 키값과 channel id를 통해 슬랙으로 이미지를 게시하게 됩니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/liff-app-dev/liff-app-dev3.jpeg" alt="image" style="width:50%; margin:0 auto;">\n</figure>\n<hr>\n<h3>4. 슬랙으로 이미지 게시</h3>\n<p>물론 이렇게 게시하는 방법은 번거롭습니다. 다른 앱을 한 번 거쳐야 하고, 채널도 자유롭게 고를 수 없습니다.\nqueryString, pathParam 때문에 채널마다 다른 channel id가 등록된 웹을 Liff 앱에 등록해줘야 합니다.\n그래도 확장 기능을 사용할 수 있다는 것 자체가 좋다 생각했고, 간단히 조회만 하는 앱에서의 활용범위와\nLiff가 나온지 얼마되지 않았다는 것을 고려하면 발전 가능성은 충분하다 여겨집니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/liff-app-dev/liff-app-dev4.png" alt="image" style="width:50%; margin:0 auto;">\n</figure>\n<hr>\n<p>개발은 매우 간단하게, 여기까지 진행했습니다. 하지만 서두에 작성했듯이 유동적인 앱 사용\n(A채널을 통해 그린 이미지는 A채널에, B채널을 통해 그린 이미지는 B채널로 그려지도록)을 위해\n현재는 기본 브라우저를 통해 사용하고 있습니다. 이런 이슈만 없어진다면 다시 Liff로 돌아가도\n좋다고 생각합니다. 하지만 line에서도 보안 이슈가 생길 것이라 생각되네요 ^^;</p>\n<p>liff에 대한 포스팅은 여기까지 입니다. 좋은 아이디어가 또 나왔으면 좋겠습니다~</p>\n</section>\n'},"8TrP":function(n,s){n.exports='<section><h2>2017 서울 앱 공모전</h2>\n<h4><a href="https://github.com/seouldrinker/seoulDrinkerFront">Github repository</a></h4>\n<p>2년전 참여했던 서울 앱 공모전을 다시 참가하게 되었는데... 똑같이 10월 31일까지 제출이었네요.\n<a href="https://jicjjang.github.io/2015/11/08/seoul-app-contest-with-django">2015 서울 앱 공모전</a>\n그때의 실패를 밑바탕으로 다시 한 번 도전하게 되었습니다.</p>\n<p>결과부터 말하자면!!! 아직 결과는 안나왔습니다... (쪼오금 기대를 하고는 있습... 읍읍)</p>\n<hr>\n<h3>1. 서론</h3>\n<p>2년전 서울 앱 공모전에서 씁쓸함을 맛봤던 기억이 계속 생각이 났었습니다. 회사에 이력서를 쓰면서도\n<code>실패함에 있어서 많은 것을 배웠습니다.</code> 라고 썼지만, 정작 시간을 들이고 실패를 맛본건 스스로였기 때문에\n언젠가 다시 한 번 도전해보고 싶었습니다. 그래서 8월에 시작해서 시간이 부족했던 부분도 있었기에 7월 말부터\n팀원을 구하기 시작했습니다. 함께 인턴을 했던 디자이너 K님을 우선 섭외하여 15년도에 진행한 아이디어를 발전시켜\n강화된 가이드 매칭 시스템을 만들기로 하였습니다. 하지만 웹이 아닌 앱을 만들어야 했고, 네이티브를\n경험해본 적이 없었기에, 졸전을 함께한 안드로이드 개발자 L님을 추가적으로 섭외하였습니다. 사공이 늘어나자\n배가 산으로... 아이디어 회의부터 다시 시작하게 되었고 결국 8월까지 아이디어 회의로 시간을 보내게 되었습니다.\n서울시의 산책로를 소개해주는 &quot;설래발&quot; 프로젝트를 진행하기로 하였고 자연스레 서버 개발자가 되어 API를\n모두 만들었습니다. 하지만, 안드로이드 개발자를 위해 서울시의 API <a href="http://data.seoul.go.kr/openinf/openapiview.jsp?infId=OA-2501">서울시 걷고 싶은 서울길 정보</a> 를 살펴보니 좌표계가\n뭔가 이상했습니다... <code>GRS80TM</code> 라는 좌표계를 사용하였고, 이는 일제 강점기때 만들어진 동경 좌표계였습니다.\n지도 API를 제공해주는 네이버나 다음, 구글 등에서 지원하지 않는 좌표계였고, 이를 문의하기 위해\n서울시에 전화를 걸어보니 무려 13번이나 전화를 돌려주시는;;; 엄청난 일을 겪었습니다.\n14번째로 돌려주셨을때는 3번째? 정도에 전화를 돌려주셨던 분께 다시 돌아가서 포기하게 되었습니다.\n그러던 와중에 안드로이드 개발자가 취직을 했다는 소식을 전해주었고, 안타깝게 팀이 와해되게 되었습니다.</p>\n<p>9월 초, 완전 초반부터 함께 프로젝트를 진행한 디자이너 K님과 다시 시작해보기로 하고 기획자 C님을 영입합니다.\n안드로이드나 ios 개발자가 무조건적으로 필요했지만, 지인들만으로 구하는 것에는 한계가 있었습니다.\n회사 동기들 또한 안타깝게도 시간이 안된다고 했기에, 15년도처럼 웹앱을 해야하나... 고민이 되었습니다.\n그러던 찰나에 평소 관심이 있었던 react-native를 생각하게 되었고, 그러던 사이 아이디어 확정과\n기획이 뼈대를 갖추며 10월이 되어가고 있었습니다. 마땅한 대안이 없었기 때문에 무작정 간단한 공부 후\n개발을 시작하였습니다. API를 다 만들고 나서도 인력에 대한 대안이 없었기에 react-native로 개발을\n시작했습니다.</p>\n<h3>2. 시작</h3>\n<p>react native로 개발을 하면서 제일 힘들었던 best 5 정도에서 처음 세팅 및 도입부는 단연 최고 난이도입니다.\n다른 튜토리얼들과 다르게, 그새 업데이트가 되서 그런지 시작 파일도 <code>index.android.js</code> 형식에서\n<code>index.js</code> 형식으로 바뀌어 있었고, 네이티브 지식이 없는 상항에서 manifest 파일 수정이나 bundle.gradle\n에 대한 수정은 정말 이해하기가 힘들었습니다.</p>\n<p>사실 react native 개발을 하면서 크게 힘들었던 부분은 third party 부분에서 서로 꼬인 부분들은 정말\n애들 장난이라고 할 수 있게 만들어 준 부분이 native적인 부분들이었습니다. native 지식의 부족으로\nApplication -&gt; 다중 Activity 구조로 들어가야 하는데, react native에서 Activity를 따로\n생성(있는데 못찾은 걸수도...!)할 수 없었습니다. 응? react native는 기본적으로 단일 Activity\n구조잖아요? 라고 할 수 있으나, 다중 Activity 구조에 내부적인 기능을 react native로 한다면 월등한\n시너지 효과가 난다는 갓-react native 안드로이드 개발자님 (밑에서 설명)께서 알려주셨습니다.</p>\n<h3>3. 이슈</h3>\n<h4>1) react-navigation</h4>\n<p>react-navigation이 현존하는 navigation 라이브러리에서는 제일 많이 사용된다는 점을 알고\n이 라이브러리를 선택했으나, 사용하고자 하는 일에 맞진 않았던 것 같습니다. 사용하고자 한 부분은\ntab navigation &gt; tab navigation .... 같이 동일한 네비게이션이 중첩되는 구조로 사용되는\n것이었는데, 처음에는 최대한 react-navigation에 의존하여 개발하려고 끙끙거렸지만, 어느정도 익숙해진 후\nnavigation 위에 다시 올라가는 navigation은 직접 구현하거나 했습니다.</p>\n<h4>2) react-native-google-signin</h4>\n<p>구글 plus 서비스의 로그인을 유지하는 기능인데, 로그인 내역을 로그아웃 후, revoke 해도 <code>이전 로그인 기록으로 로그인하기</code>\n와 같은 부분에 내역이 그대로 남아있습니다. 이 부분은 구글 plus 설정에 직접 들어가서 지워줘야 했고,\n왜 제대로 지워지지 않는지는 라이브러리 자체 이슈인 것 같습니다.</p>\n<h4>3) 뒤로가기로 바탕화면에 갔다가 다시 앱으로 들어오면 재실행이 되는 현상</h4>\n<p>뒤로가기 버튼을 눌러 바탕화면으로 나갔다가, 다시 앱을 눌러 돌아오면 앱이 한번 더 실행되는 <a href="https://github.com/facebook/react-native/issues/13483">이슈</a>가 발견되었습니다.\n레퍼런스와 지인의 도움으로 해결은 했으나, 이 역시 native적인 부분이 있어 해결하는데 어려움이 있었고,\n지인의 설명으로는 안드로이드와 ios를 동시에 지원하려다 보니 생기는 충돌점이 아니었나... 생각한다고 하시네요.</p>\n<h4>4) 느린 tab 전환</h4>\n<p>이 부분은 아직 수정되지 않았느나, 해결 방법에 대한 생각을 끝마친 상태입니다. 탭을 전환할 때 마다 새로운\n화면을 reflow &amp; repaint 할 것이 아니라, 화면을 토글하는 방식으로 보여주는 것이었는데,\n시간에 쫓김과 개발 초기에 react-navigation에 많이 의존하다 보니 생긴 이슈였습니다.</p>\n<h3>4. 도움</h3>\n<p>이슈 탭의 3번 이슈를 해결하기 위해 <a href="http://www.scatterlab.co.kr/">스캐터랩</a>\n을 무려 제출 하루전에(...이슈가 3~5개 쯤 남아있었는데;;) 방문했습니다. 찾아간 레퍼런스와 도움을 받아\n이슈를 잘 해결할 수 있었습니다. (모두 화기애애한 분위기(?)의 독특한 회사였습니다.) 또한 서론에서 언급한\n다중 Activity 구조도 스캐터랩 개발자분들이 알려주셨는데, 이 영역부터는 native 지식이 없으면 아예\n할 수가 없을 것 같네요... (라이브러리를 찾아보니 third party로 Activity를 추가할 수도 있는 것 같습니다.\n하지만 별로 내키지 않네요.)</p>\n<h3>5. 단점</h3>\n<p>react native를 <code>처음</code> 하면서 느낀 단점은 native 지식이 없으면 힘들다는 점입니다. (많이많이 힘들다...)\n또한, android보다는 ios에 많이 힘을 주는 느낌을 받았고, 아직 이슈가 많아 불안정하다는 느낌을 받았습니다.\n개발 당시 이슈는 600개 중반 정도에, 제가 해결하지 못한 이슈들 또한 3~4개 정도 등록이 되어있었고,\nthird party 라이브러리들이 너무 무분별하게 존재한다는 점이었습니다. (대부분이 지속적인 개발이 없었음.)</p>\n<h3>6. 장점</h3>\n<p>이건 무조건 개발속도!!! 처음 써보지만, native 지식이 없지만 js만 안다면 프로토 타입은 후딱!\n만들 수 있게 해주는 속도적인 장점이 있습니다. 하지만 이 장점도 앱의 난이도에 따라 고민해야 할 영역이\n커진다고 생각합니다.</p>\n<h3>7. 발전 방향</h3>\n<p>개발이 끝나고 뿌듯함과 아쉬움이 정말 많이 남았습니다. 그만큼 많은 힘을 쏟았고 짧은 시간동안 많은 집중으로\n개발을 했었습니다. 2~3가지의 수정 사항과 함께 기획서에서 deprecated 된 내용들을 다시 추가해볼 예정입니다.</p>\n<div style="margin: 0 auto; text-align: center;">\n  <figure style="display:inline-block; width: 48%;">\n      <img src="https://jicjjang.github.io/blog/static/image/javascript/seoul-app-contest/app1.png" alt="image"\n      style="width:100%;">\n  </figure>\n  <figure style="display:inline-block; width: 48%;">\n      <img src="https://jicjjang.github.io/blog/static/image/javascript/seoul-app-contest/app2.png" alt="image"\n      style="width:100%;">\n  </figure>\n</div>\n<hr>\n<p>좋은 결과가 있기를 기다리고 있고, 짧은시간동안 재미있게 (힘들게...) 개발했습니다.\n처음 경험하는 내용들이 대다수였지만, 항상 새로운 프로젝트는 즐거운 것 같습니다. 다음에도\n새로운 공모전이나 새로운 스킬셋을 익힐 기회가 있었으면 좋겠네요!\n감사합니다~</p>\n</section>\n'},AFtW:function(n,s){n.exports='<section><p>블로그를 만들면서 예전부터 써보고 싶었던 라이브러리들을 사용해보기로 했습니다. 검색해보니 reveal.js, impress.js 두개가 1, 2위를 다투고 있었습니다.\n회사 동료분이 reveal.js를 사용하는  것을 본 기억이 있으니 impress.js를 해보기로 결정!!</p>\n<figure style="text-align: center;">\n  <figcaption><a href="https://github.com/bartaz/impress.js/find/master" title="desciprtion">&lt;impress.js github&gt;</a></figcaption>\n</figure>\n<p>github을 찾아봤으나 따로 syntax같은 부분은 설명이 없이, 예제로 있는 index 파일이 전부였습니다. 이 파일이 syntax 설명 그 자체인데, 이 파일을 위주로 알아보겠습니다.</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"impress"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"bored"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"step slide"</span> <span class="hljs-attr">data-x</span>=<span class="hljs-string">"-1000"</span> <span class="hljs-attr">data-y</span>=<span class="hljs-string">"-1500"</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"step slide"</span> <span class="hljs-attr">data-x</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">data-y</span>=<span class="hljs-string">"-1500"</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"title"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"step"</span> <span class="hljs-attr">data-x</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">data-y</span>=<span class="hljs-string">"0"</span> <span class="hljs-attr">data-scale</span>=<span class="hljs-string">"4"</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"its"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"step"</span> <span class="hljs-attr">data-x</span>=<span class="hljs-string">"850"</span> <span class="hljs-attr">data-y</span>=<span class="hljs-string">"3000"</span> <span class="hljs-attr">data-rotate</span>=<span class="hljs-string">"90"</span> <span class="hljs-attr">data-scale</span>=<span class="hljs-string">"5"</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"big"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"step"</span> <span class="hljs-attr">data-x</span>=<span class="hljs-string">"3500"</span> <span class="hljs-attr">data-y</span>=<span class="hljs-string">"2100"</span> <span class="hljs-attr">data-rotate</span>=<span class="hljs-string">"180"</span> <span class="hljs-attr">data-scale</span>=<span class="hljs-string">"6"</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"tiny"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"step"</span> <span class="hljs-attr">data-x</span>=<span class="hljs-string">"2825"</span> <span class="hljs-attr">data-y</span>=<span class="hljs-string">"2325"</span> <span class="hljs-attr">data-z</span>=<span class="hljs-string">"-3000"</span> <span class="hljs-attr">data-rotate</span>=<span class="hljs-string">"300"</span> <span class="hljs-attr">data-scale</span>=<span class="hljs-string">"1"</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"ing"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"step"</span> <span class="hljs-attr">data-x</span>=<span class="hljs-string">"3500"</span> <span class="hljs-attr">data-y</span>=<span class="hljs-string">"-850"</span> <span class="hljs-attr">data-rotate</span>=<span class="hljs-string">"270"</span> <span class="hljs-attr">data-scale</span>=<span class="hljs-string">"6"</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"imagination"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"step"</span> <span class="hljs-attr">data-x</span>=<span class="hljs-string">"6700"</span> <span class="hljs-attr">data-y</span>=<span class="hljs-string">"-300"</span> <span class="hljs-attr">data-scale</span>=<span class="hljs-string">"6"</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"source"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"step"</span> <span class="hljs-attr">data-x</span>=<span class="hljs-string">"6300"</span> <span class="hljs-attr">data-y</span>=<span class="hljs-string">"2000"</span> <span class="hljs-attr">data-rotate</span>=<span class="hljs-string">"20"</span> <span class="hljs-attr">data-scale</span>=<span class="hljs-string">"4"</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"one-more-thing"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"step"</span> <span class="hljs-attr">data-x</span>=<span class="hljs-string">"6000"</span> <span class="hljs-attr">data-y</span>=<span class="hljs-string">"4000"</span> <span class="hljs-attr">data-scale</span>=<span class="hljs-string">"2"</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"its-in-3d"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"step"</span> <span class="hljs-attr">data-x</span>=<span class="hljs-string">"6200"</span> <span class="hljs-attr">data-y</span>=<span class="hljs-string">"4300"</span> <span class="hljs-attr">data-z</span>=<span class="hljs-string">"-100"</span> <span class="hljs-attr">data-rotate-x</span>=<span class="hljs-string">"-40"</span> <span class="hljs-attr">data-rotate-y</span>=<span class="hljs-string">"10"</span> <span class="hljs-attr">data-scale</span>=<span class="hljs-string">"2"</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"overview"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"step"</span> <span class="hljs-attr">data-x</span>=<span class="hljs-string">"3000"</span> <span class="hljs-attr">data-y</span>=<span class="hljs-string">"1500"</span> <span class="hljs-attr">data-scale</span>=<span class="hljs-string">"10"</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n<p><code>&lt;div id=&quot;impress&quot;&gt;</code> 이 태그 내부에 있는 div 태그들이 프레젠테이션 효과를 받는 전부입니다. (나머지는 프레젠테이션과 관련이 없습니다.)\n딱 봐도 이해하기 쉽게 되어있습니다. 여기서 정리할 부분을 살펴보자면</p>\n<ol>\n<li>id가 있고, 없고의 차이</li>\n<li>class=&quot;step&quot;의 유무</li>\n<li>data-x, y, z / data-scale, rotate / data-rotate-x, y</li>\n</ol>\n<p>이렇게 5개로 나눠 알아보겠습니다.</p>\n<h2>1. id가 있고, 없고의 차이</h2>\n<p>우선, impress를 git clone해서 실행을 해보면 바로 알 수 있습니다.</p>\n  <figure style="text-align: center;">\n  \t<img src="https://jicjjang.github.io/blog/static/image/etc/web-presentation/address.png" alt="image">\n  </figure>\n<p>id가 있는 div는 주소에 id가 나오게 되고, 없는 div는 step이 나오게 되는데, step- 뒤에 몇번째 슬라이드인지 숫자가 나오게 됩니다.</p>\n<h2>2. class=&quot;step&quot;의 유무</h2>\n<p>바로 clone 한 코드에서 step을 제외하고 프레젠테이션을 진행해 보았는데, 슬라이드를 그냥 건너뛰게 되고, 기본 .step에 걸려있던 css들이 무시되었습니다.\n(너무 당연한 얘기를 ㅠㅠ...)</p>\n<h2>3. data-x, y, z / data-scale, rotate / data-rotate-x, y</h2>\n<h4>data-x, y, z</h4>\n<p>화면 전환시 x, y, z축으로 이동하는 (prezi와 같이) 효과를 보여줍니다.</p>\n<h4>data-scale, rotate</h4>\n<p>화면 전환시 scale(안에 들어가는 값은 배율)로 확대 / 축소를 할 수 있고, rotate(안에 들어가는 값은 각도)로 회전을 할 수 있습니다.</p>\n<h4>data-rotate-x, y</h4>\n<p>화면 전환시 x축을 중심으로 회전, y축을 중심으로 회전합니다. 3D효과를 줄 때 사용합니다.</p>\n<p>첫 포스팅을 간단하게 마무리 하겠습니다. 마지막으로 impress.js의 예제 동영상으로 효과가 어떻게 나오는지 보여드리면서 간단하게 포스팅을 이렇게 마치겠습니다.</p>\n  <iframe style="width:100%;height:420px;"  src="https://www.youtube.com/embed/S_0E1iOwoe8?autoplay=1&autohide=1&loop=1&playlist=S_0E1iOwoe8" frameborder="0" allowfullscreen></iframe>\n</section>\n'},DFDR:function(n,s){n.exports='<section><pre><code class="language-java">...\n\nJFrame frame = <span class="hljs-keyword">new</span> JFrame();\nContainer contentPane = frame.getContentPane();\nJButton btn = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">"버튼!"</span>);\n\ncontentPane.setBackground(Color.YELLOW);\n\nframe.add(btn);\n\n...\n</code></pre>\n<p>위 코드처럼 버튼 component를 생성한 후 버튼의 배경색을 정한 후,\nframe의 contentPane에 버튼을 추가를 하면 container에 노란 배경의 버튼인 생성됩니다.</p>\n<p>하지만, osx 환경에서 component들에서는 배경색이 변경된다고 생각했으나, 색이 적용이 되지 않았습니다.</p>\n<pre><code class="language-java">...\n\nJButton btn = <span class="hljs-keyword">new</span> JButton(<span class="hljs-string">"버튼!"</span>);\n\nbtn.setBackground(Color.YELLOW);\n\nbtn.setOpaque(<span class="hljs-keyword">true</span>);\n\nbtn.setBorderPainted(<span class="hljs-keyword">false</span>);\n\n...\n</code></pre>\n<p>위 코드처럼 setOpaque(true)와 setBorderPainted(false)를 넣어주면 잘 나오게 됩니다.</p>\n<p>setOpaque(bool)는 true일 경우 경계 내의 모든 픽셀을 채우지만, false일 경우 일부 또는 전부를 채우지 않는다고 합니다. (osx에서는 안채워주는것 같네요.)</p>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/java/foundation/setOpaque.png" alt="image" />\n</figure>\n<p>setBorderPainted(bool)는 true일 경우 테투리가 칠해집니다. (이 값을 true로, setOpaque도 true로 준 경우, border만 칠해집니다. 이 역시 osx문제인 것 같습니다.)</p>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/java/foundation/setBorderPainted.png" alt="image" />\n</figure>\n<hr>\n<p>잘 모르는 오류들이 나올때 마다 포스팅을 하는데 재미지네요 :) 자바로 빨리 프로젝트를 진행해보고픈 욕심히 생깁니다!</p>\n</section>\n'},EFqf:function(n,s,a){(function(s){!function(s){"use strict";var a={newline:/^\n+/,code:/^( {4}[^\n]+\n*)+/,fences:j,hr:/^ {0,3}((?:- *){3,}|(?:_ *){3,}|(?:\* *){3,})(?:\n+|$)/,heading:/^ *(#{1,6}) *([^\n]+?) *#* *(?:\n+|$)/,nptable:j,blockquote:/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/,list:/^( *)(bull) [\s\S]+?(?:hr|def|\n{2,}(?! )(?!\1bull )\n*|\s*$)/,html:/^ *(?:comment *(?:\n|\s*$)|closed *(?:\n{2,}|\s*$)|closing *(?:\n{2,}|\s*$))/,def:/^ {0,3}\[(label)\]: *\n? *<?([^\s>]+)>?(?:(?: +\n? *| *\n *)(title))? *(?:\n+|$)/,table:j,lheading:/^([^\n]+)\n *(=|-){2,} *(?:\n+|$)/,paragraph:/^([^\n]+(?:\n?(?!hr|heading|lheading| {0,3}>|tag)[^\n]+)+)/,text:/^[^\n]+/};function e(n){this.tokens=[],this.tokens.links={},this.options=n||b.defaults,this.rules=a.normal,this.options.gfm&&(this.options.tables?this.rules=a.tables:this.rules=a.gfm)}a._label=/(?:\\[\[\]]|[^\[\]])+/,a._title=/(?:"(?:\\"|[^"]|"[^"\n]*")*"|'\n?(?:[^'\n]+\n?)*'|\([^()]*\))/,a.def=h(a.def).replace("label",a._label).replace("title",a._title).getRegex(),a.bullet=/(?:[*+-]|\d+\.)/,a.item=/^( *)(bull) [^\n]*(?:\n(?!\1bull )[^\n]*)*/,a.item=h(a.item,"gm").replace(/bull/g,a.bullet).getRegex(),a.list=h(a.list).replace(/bull/g,a.bullet).replace("hr","\\n+(?=\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$))").replace("def","\\n+(?="+a.def.source+")").getRegex(),a._tag="(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b",a.html=h(a.html).replace("comment",/<!--[\s\S]*?-->/).replace("closed",/<(tag)[\s\S]+?<\/\1>/).replace("closing",/<tag(?:"[^"]*"|'[^']*'|\s[^'"\/>\s]*)*?\/?>/).replace(/tag/g,a._tag).getRegex(),a.paragraph=h(a.paragraph).replace("hr",a.hr).replace("heading",a.heading).replace("lheading",a.lheading).replace("tag","<"+a._tag).getRegex(),a.blockquote=h(a.blockquote).replace("paragraph",a.paragraph).getRegex(),a.normal=m({},a),a.gfm=m({},a.normal,{fences:/^ *(`{3,}|~{3,})[ \.]*(\S+)? *\n([\s\S]*?)\n? *\1 *(?:\n+|$)/,paragraph:/^/,heading:/^ *(#{1,6}) +([^\n]+?) *#* *(?:\n+|$)/}),a.gfm.paragraph=h(a.paragraph).replace("(?!","(?!"+a.gfm.fences.source.replace("\\1","\\2")+"|"+a.list.source.replace("\\1","\\3")+"|").getRegex(),a.tables=m({},a.gfm,{nptable:/^ *(\S.*\|.*)\n *([-:]+ *\|[-| :]*)\n((?:.*\|.*(?:\n|$))*)\n*/,table:/^ *\|(.+)\n *\|( *[-:]+[-| :]*)\n((?: *\|.*(?:\n|$))*)\n*/}),e.rules=a,e.lex=function(n,s){return new e(s).lex(n)},e.prototype.lex=function(n){return n=n.replace(/\r\n|\r/g,"\n").replace(/\t/g,"    ").replace(/\u00a0/g," ").replace(/\u2424/g,"\n"),this.token(n,!0)},e.prototype.token=function(n,s){var e,t,p,l,i,r,c,o,h,g,d;for(n=n.replace(/^ +$/gm,"");n;)if((p=this.rules.newline.exec(n))&&(n=n.substring(p[0].length),p[0].length>1&&this.tokens.push({type:"space"})),p=this.rules.code.exec(n))n=n.substring(p[0].length),p=p[0].replace(/^ {4}/gm,""),this.tokens.push({type:"code",text:this.options.pedantic?p:p.replace(/\n+$/,"")});else if(p=this.rules.fences.exec(n))n=n.substring(p[0].length),this.tokens.push({type:"code",lang:p[2],text:p[3]||""});else if(p=this.rules.heading.exec(n))n=n.substring(p[0].length),this.tokens.push({type:"heading",depth:p[1].length,text:p[2]});else if(s&&(p=this.rules.nptable.exec(n))){for(n=n.substring(p[0].length),r={type:"table",header:p[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:p[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:p[3].replace(/\n$/,"").split("\n")},o=0;o<r.align.length;o++)/^ *-+: *$/.test(r.align[o])?r.align[o]="right":/^ *:-+: *$/.test(r.align[o])?r.align[o]="center":/^ *:-+ *$/.test(r.align[o])?r.align[o]="left":r.align[o]=null;for(o=0;o<r.cells.length;o++)r.cells[o]=r.cells[o].split(/ *\| */);this.tokens.push(r)}else if(p=this.rules.hr.exec(n))n=n.substring(p[0].length),this.tokens.push({type:"hr"});else if(p=this.rules.blockquote.exec(n))n=n.substring(p[0].length),this.tokens.push({type:"blockquote_start"}),p=p[0].replace(/^ *> ?/gm,""),this.token(p,s),this.tokens.push({type:"blockquote_end"});else if(p=this.rules.list.exec(n)){for(n=n.substring(p[0].length),d=(l=p[2]).length>1,this.tokens.push({type:"list_start",ordered:d,start:d?+l:""}),e=!1,g=(p=p[0].match(this.rules.item)).length,o=0;o<g;o++)c=(r=p[o]).length,~(r=r.replace(/^ *([*+-]|\d+\.) +/,"")).indexOf("\n ")&&(c-=r.length,r=this.options.pedantic?r.replace(/^ {1,4}/gm,""):r.replace(new RegExp("^ {1,"+c+"}","gm"),"")),this.options.smartLists&&o!==g-1&&(l===(i=a.bullet.exec(p[o+1])[0])||l.length>1&&i.length>1||(n=p.slice(o+1).join("\n")+n,o=g-1)),t=e||/\n\n(?!\s*$)/.test(r),o!==g-1&&(e="\n"===r.charAt(r.length-1),t||(t=e)),this.tokens.push({type:t?"loose_item_start":"list_item_start"}),this.token(r,!1),this.tokens.push({type:"list_item_end"});this.tokens.push({type:"list_end"})}else if(p=this.rules.html.exec(n))n=n.substring(p[0].length),this.tokens.push({type:this.options.sanitize?"paragraph":"html",pre:!this.options.sanitizer&&("pre"===p[1]||"script"===p[1]||"style"===p[1]),text:p[0]});else if(s&&(p=this.rules.def.exec(n)))n=n.substring(p[0].length),p[3]&&(p[3]=p[3].substring(1,p[3].length-1)),h=p[1].toLowerCase(),this.tokens.links[h]||(this.tokens.links[h]={href:p[2],title:p[3]});else if(s&&(p=this.rules.table.exec(n))){for(n=n.substring(p[0].length),r={type:"table",header:p[1].replace(/^ *| *\| *$/g,"").split(/ *\| */),align:p[2].replace(/^ *|\| *$/g,"").split(/ *\| */),cells:p[3].replace(/(?: *\| *)?\n$/,"").split("\n")},o=0;o<r.align.length;o++)/^ *-+: *$/.test(r.align[o])?r.align[o]="right":/^ *:-+: *$/.test(r.align[o])?r.align[o]="center":/^ *:-+ *$/.test(r.align[o])?r.align[o]="left":r.align[o]=null;for(o=0;o<r.cells.length;o++)r.cells[o]=r.cells[o].replace(/^ *\| *| *\| *$/g,"").split(/ *\| */);this.tokens.push(r)}else if(p=this.rules.lheading.exec(n))n=n.substring(p[0].length),this.tokens.push({type:"heading",depth:"="===p[2]?1:2,text:p[1]});else if(s&&(p=this.rules.paragraph.exec(n)))n=n.substring(p[0].length),this.tokens.push({type:"paragraph",text:"\n"===p[1].charAt(p[1].length-1)?p[1].slice(0,-1):p[1]});else if(p=this.rules.text.exec(n))n=n.substring(p[0].length),this.tokens.push({type:"text",text:p[0]});else if(n)throw new Error("Infinite loop on byte: "+n.charCodeAt(0));return this.tokens};var t={escape:/^\\([\\`*{}\[\]()#+\-.!_>])/,autolink:/^<(scheme:[^\s\x00-\x1f<>]*|email)>/,url:j,tag:/^<!--[\s\S]*?-->|^<\/?[a-zA-Z0-9\-]+(?:"[^"]*"|'[^']*'|\s[^<'">\/\s]*)*?\/?>/,link:/^!?\[(inside)\]\(href\)/,reflink:/^!?\[(inside)\]\s*\[([^\]]*)\]/,nolink:/^!?\[((?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]])*)\]/,strong:/^__([\s\S]+?)__(?!_)|^\*\*([\s\S]+?)\*\*(?!\*)/,em:/^_([^\s_](?:[^_]|__)+?[^\s_])_\b|^\*((?:\*\*|[^*])+?)\*(?!\*)/,code:/^(`+)\s*([\s\S]*?[^`]?)\s*\1(?!`)/,br:/^ {2,}\n(?!\s*$)/,del:j,text:/^[\s\S]+?(?=[\\<!\[`*]|\b_| {2,}\n|$)/};function p(n,s){if(this.options=s||b.defaults,this.links=n,this.rules=t.normal,this.renderer=this.options.renderer||new l,this.renderer.options=this.options,!this.links)throw new Error("Tokens array requires a `links` property.");this.options.gfm?this.options.breaks?this.rules=t.breaks:this.rules=t.gfm:this.options.pedantic&&(this.rules=t.pedantic)}function l(n){this.options=n||{}}function i(){}function r(n){this.tokens=[],this.token=null,this.options=n||b.defaults,this.options.renderer=this.options.renderer||new l,this.renderer=this.options.renderer,this.renderer.options=this.options}function c(n,s){return n.replace(s?/&/g:/&(?!#?\w+;)/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;")}function o(n){return n.replace(/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi,function(n,s){return"colon"===(s=s.toLowerCase())?":":"#"===s.charAt(0)?"x"===s.charAt(1)?String.fromCharCode(parseInt(s.substring(2),16)):String.fromCharCode(+s.substring(1)):""})}function h(n,s){return n=n.source,s=s||"",{replace:function(s,a){return a=(a=a.source||a).replace(/(^|[^\[])\^/g,"$1"),n=n.replace(s,a),this},getRegex:function(){return new RegExp(n,s)}}}function g(n,s){return d[" "+n]||(/^[^:]+:\/*[^/]*$/.test(n)?d[" "+n]=n+"/":d[" "+n]=n.replace(/[^/]*$/,"")),n=d[" "+n],"//"===s.slice(0,2)?n.replace(/:[\s\S]*/,":")+s:"/"===s.charAt(0)?n.replace(/(:\/*[^/]*)[\s\S]*/,"$1")+s:n+s}t._scheme=/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/,t._email=/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/,t.autolink=h(t.autolink).replace("scheme",t._scheme).replace("email",t._email).getRegex(),t._inside=/(?:\[[^\[\]]*\]|\\[\[\]]|[^\[\]]|\](?=[^\[]*\]))*/,t._href=/\s*<?([\s\S]*?)>?(?:\s+['"]([\s\S]*?)['"])?\s*/,t.link=h(t.link).replace("inside",t._inside).replace("href",t._href).getRegex(),t.reflink=h(t.reflink).replace("inside",t._inside).getRegex(),t.normal=m({},t),t.pedantic=m({},t.normal,{strong:/^__(?=\S)([\s\S]*?\S)__(?!_)|^\*\*(?=\S)([\s\S]*?\S)\*\*(?!\*)/,em:/^_(?=\S)([\s\S]*?\S)_(?!_)|^\*(?=\S)([\s\S]*?\S)\*(?!\*)/}),t.gfm=m({},t.normal,{escape:h(t.escape).replace("])","~|])").getRegex(),url:h(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/).replace("email",t._email).getRegex(),_backpedal:/(?:[^?!.,:;*_~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_~)]+(?!$))+/,del:/^~~(?=\S)([\s\S]*?\S)~~/,text:h(t.text).replace("]|","~]|").replace("|","|https?://|ftp://|www\\.|[a-zA-Z0-9.!#$%&'*+/=?^_`{\\|}~-]+@|").getRegex()}),t.breaks=m({},t.gfm,{br:h(t.br).replace("{2,}","*").getRegex(),text:h(t.gfm.text).replace("{2,}","*").getRegex()}),p.rules=t,p.output=function(n,s,a){return new p(s,a).output(n)},p.prototype.output=function(n){for(var s,a,e,t,p="";n;)if(t=this.rules.escape.exec(n))n=n.substring(t[0].length),p+=t[1];else if(t=this.rules.autolink.exec(n))n=n.substring(t[0].length),e="@"===t[2]?"mailto:"+(a=c(this.mangle(t[1]))):a=c(t[1]),p+=this.renderer.link(e,null,a);else if(this.inLink||!(t=this.rules.url.exec(n))){if(t=this.rules.tag.exec(n))!this.inLink&&/^<a /i.test(t[0])?this.inLink=!0:this.inLink&&/^<\/a>/i.test(t[0])&&(this.inLink=!1),n=n.substring(t[0].length),p+=this.options.sanitize?this.options.sanitizer?this.options.sanitizer(t[0]):c(t[0]):t[0];else if(t=this.rules.link.exec(n))n=n.substring(t[0].length),this.inLink=!0,p+=this.outputLink(t,{href:t[2],title:t[3]}),this.inLink=!1;else if((t=this.rules.reflink.exec(n))||(t=this.rules.nolink.exec(n))){if(n=n.substring(t[0].length),s=(t[2]||t[1]).replace(/\s+/g," "),!(s=this.links[s.toLowerCase()])||!s.href){p+=t[0].charAt(0),n=t[0].substring(1)+n;continue}this.inLink=!0,p+=this.outputLink(t,s),this.inLink=!1}else if(t=this.rules.strong.exec(n))n=n.substring(t[0].length),p+=this.renderer.strong(this.output(t[2]||t[1]));else if(t=this.rules.em.exec(n))n=n.substring(t[0].length),p+=this.renderer.em(this.output(t[2]||t[1]));else if(t=this.rules.code.exec(n))n=n.substring(t[0].length),p+=this.renderer.codespan(c(t[2].trim(),!0));else if(t=this.rules.br.exec(n))n=n.substring(t[0].length),p+=this.renderer.br();else if(t=this.rules.del.exec(n))n=n.substring(t[0].length),p+=this.renderer.del(this.output(t[1]));else if(t=this.rules.text.exec(n))n=n.substring(t[0].length),p+=this.renderer.text(c(this.smartypants(t[0])));else if(n)throw new Error("Infinite loop on byte: "+n.charCodeAt(0))}else t[0]=this.rules._backpedal.exec(t[0])[0],n=n.substring(t[0].length),"@"===t[2]?e="mailto:"+(a=c(t[0])):(a=c(t[0]),e="www."===t[1]?"http://"+a:a),p+=this.renderer.link(e,null,a);return p},p.prototype.outputLink=function(n,s){var a=c(s.href),e=s.title?c(s.title):null;return"!"!==n[0].charAt(0)?this.renderer.link(a,e,this.output(n[1])):this.renderer.image(a,e,c(n[1]))},p.prototype.smartypants=function(n){return this.options.smartypants?n.replace(/---/g,"—").replace(/--/g,"–").replace(/(^|[-\u2014/(\[{"\s])'/g,"$1‘").replace(/'/g,"’").replace(/(^|[-\u2014/(\[{\u2018\s])"/g,"$1“").replace(/"/g,"”").replace(/\.{3}/g,"…"):n},p.prototype.mangle=function(n){if(!this.options.mangle)return n;for(var s,a="",e=n.length,t=0;t<e;t++)s=n.charCodeAt(t),Math.random()>.5&&(s="x"+s.toString(16)),a+="&#"+s+";";return a},l.prototype.code=function(n,s,a){if(this.options.highlight){var e=this.options.highlight(n,s);null!=e&&e!==n&&(a=!0,n=e)}return s?'<pre><code class="'+this.options.langPrefix+c(s,!0)+'">'+(a?n:c(n,!0))+"\n</code></pre>\n":"<pre><code>"+(a?n:c(n,!0))+"\n</code></pre>"},l.prototype.blockquote=function(n){return"<blockquote>\n"+n+"</blockquote>\n"},l.prototype.html=function(n){return n},l.prototype.heading=function(n,s,a){return"<h"+s+' id="'+this.options.headerPrefix+a.toLowerCase().replace(/[^\w]+/g,"-")+'">'+n+"</h"+s+">\n"},l.prototype.hr=function(){return this.options.xhtml?"<hr/>\n":"<hr>\n"},l.prototype.list=function(n,s,a){var e=s?"ol":"ul";return"<"+e+(s&&1!==a?' start="'+a+'"':"")+">\n"+n+"</"+e+">\n"},l.prototype.listitem=function(n){return"<li>"+n+"</li>\n"},l.prototype.paragraph=function(n){return"<p>"+n+"</p>\n"},l.prototype.table=function(n,s){return"<table>\n<thead>\n"+n+"</thead>\n<tbody>\n"+s+"</tbody>\n</table>\n"},l.prototype.tablerow=function(n){return"<tr>\n"+n+"</tr>\n"},l.prototype.tablecell=function(n,s){var a=s.header?"th":"td";return(s.align?"<"+a+' style="text-align:'+s.align+'">':"<"+a+">")+n+"</"+a+">\n"},l.prototype.strong=function(n){return"<strong>"+n+"</strong>"},l.prototype.em=function(n){return"<em>"+n+"</em>"},l.prototype.codespan=function(n){return"<code>"+n+"</code>"},l.prototype.br=function(){return this.options.xhtml?"<br/>":"<br>"},l.prototype.del=function(n){return"<del>"+n+"</del>"},l.prototype.link=function(n,s,a){if(this.options.sanitize){try{var e=decodeURIComponent(o(n)).replace(/[^\w:]/g,"").toLowerCase()}catch(n){return a}if(0===e.indexOf("javascript:")||0===e.indexOf("vbscript:")||0===e.indexOf("data:"))return a}this.options.baseUrl&&!u.test(n)&&(n=g(this.options.baseUrl,n));var t='<a href="'+n+'"';return s&&(t+=' title="'+s+'"'),t+=">"+a+"</a>"},l.prototype.image=function(n,s,a){this.options.baseUrl&&!u.test(n)&&(n=g(this.options.baseUrl,n));var e='<img src="'+n+'" alt="'+a+'"';return s&&(e+=' title="'+s+'"'),e+=this.options.xhtml?"/>":">"},l.prototype.text=function(n){return n},i.prototype.strong=i.prototype.em=i.prototype.codespan=i.prototype.del=i.prototype.text=function(n){return n},i.prototype.link=i.prototype.image=function(n,s,a){return""+a},i.prototype.br=function(){return""},r.parse=function(n,s){return new r(s).parse(n)},r.prototype.parse=function(n){this.inline=new p(n.links,this.options),this.inlineText=new p(n.links,m({},this.options,{renderer:new i})),this.tokens=n.reverse();for(var s="";this.next();)s+=this.tok();return s},r.prototype.next=function(){return this.token=this.tokens.pop()},r.prototype.peek=function(){return this.tokens[this.tokens.length-1]||0},r.prototype.parseText=function(){for(var n=this.token.text;"text"===this.peek().type;)n+="\n"+this.next().text;return this.inline.output(n)},r.prototype.tok=function(){switch(this.token.type){case"space":return"";case"hr":return this.renderer.hr();case"heading":return this.renderer.heading(this.inline.output(this.token.text),this.token.depth,o(this.inlineText.output(this.token.text)));case"code":return this.renderer.code(this.token.text,this.token.lang,this.token.escaped);case"table":var n,s,a,e,t="",p="";for(a="",n=0;n<this.token.header.length;n++)a+=this.renderer.tablecell(this.inline.output(this.token.header[n]),{header:!0,align:this.token.align[n]});for(t+=this.renderer.tablerow(a),n=0;n<this.token.cells.length;n++){for(s=this.token.cells[n],a="",e=0;e<s.length;e++)a+=this.renderer.tablecell(this.inline.output(s[e]),{header:!1,align:this.token.align[e]});p+=this.renderer.tablerow(a)}return this.renderer.table(t,p);case"blockquote_start":for(p="";"blockquote_end"!==this.next().type;)p+=this.tok();return this.renderer.blockquote(p);case"list_start":p="";for(var l=this.token.ordered,i=this.token.start;"list_end"!==this.next().type;)p+=this.tok();return this.renderer.list(p,l,i);case"list_item_start":for(p="";"list_item_end"!==this.next().type;)p+="text"===this.token.type?this.parseText():this.tok();return this.renderer.listitem(p);case"loose_item_start":for(p="";"list_item_end"!==this.next().type;)p+=this.tok();return this.renderer.listitem(p);case"html":var r=this.token.pre||this.options.pedantic?this.token.text:this.inline.output(this.token.text);return this.renderer.html(r);case"paragraph":return this.renderer.paragraph(this.inline.output(this.token.text));case"text":return this.renderer.paragraph(this.parseText())}};var d={},u=/^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;function j(){}function m(n){for(var s,a,e=1;e<arguments.length;e++)for(a in s=arguments[e])Object.prototype.hasOwnProperty.call(s,a)&&(n[a]=s[a]);return n}function b(n,s,a){if(void 0===n||null===n)throw new Error("marked(): input parameter is undefined or null");if("string"!=typeof n)throw new Error("marked(): input parameter is of type "+Object.prototype.toString.call(n)+", string expected");if(a||"function"==typeof s){a||(a=s,s=null);var t,p,l=(s=m({},b.defaults,s||{})).highlight,i=0;try{t=e.lex(n,s)}catch(n){return a(n)}p=t.length;var o=function(n){if(n)return s.highlight=l,a(n);var e;try{e=r.parse(t,s)}catch(s){n=s}return s.highlight=l,n?a(n):a(null,e)};if(!l||l.length<3)return o();if(delete s.highlight,!p)return o();for(;i<t.length;i++)!function(n){"code"!==n.type?--p||o():l(n.text,n.lang,function(s,a){return s?o(s):null==a||a===n.text?--p||o():(n.text=a,n.escaped=!0,void(--p||o()))})}(t[i])}else try{return s&&(s=m({},b.defaults,s)),r.parse(e.lex(n,s),s)}catch(n){if(n.message+="\nPlease report this to https://github.com/markedjs/marked.",(s||b.defaults).silent)return"<p>An error occurred:</p><pre>"+c(n.message+"",!0)+"</pre>";throw n}}j.exec=j,b.options=b.setOptions=function(n){return m(b.defaults,n),b},b.defaults={gfm:!0,tables:!0,breaks:!1,pedantic:!1,sanitize:!1,sanitizer:null,mangle:!0,smartLists:!1,silent:!1,highlight:null,langPrefix:"lang-",smartypants:!1,headerPrefix:"",renderer:new l,xhtml:!1,baseUrl:null},b.Parser=r,b.parser=r.parse,b.Renderer=l,b.TextRenderer=i,b.Lexer=e,b.lexer=e.lex,b.InlineLexer=p,b.inlineLexer=p.output,b.parse=b,n.exports=b}(this||"undefined"!=typeof window&&window)}).call(s,a("DuR2"))},IMT9:function(n,s){n.exports='<section><p>어느덧 마지막 파트입니다. 더 뒤에 있는 파트는 다루지 않습니다.</p>\n<h2>8. 프로그래밍 사례</h2>\n<h3>8-1. 이중 평가를 피하십시오</h3>\n<p>문자열을 바로 실행하는 함수는</p>\n<ol>\n<li>eval()</li>\n<li>Function 생성자</li>\n<li>setTimeout()</li>\n<li>setInterval()</li>\n</ol>\n<p>네가지 입니다. 이 메서드들은 javascript 코드를 나타내는 문자열을 받아서 실행할 수 있습니다.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">5</span>, b = <span class="hljs-number">6</span>, sum;\n<span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">eval</span>(<span class="hljs-string">\'a + b\'</span>));\n\nsum = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">\'a\'</span>, <span class="hljs-string">\'b\'</span>, <span class="hljs-string">\'return a + b\'</span>);\n\nsetTimeout(<span class="hljs-string">\'sum = a + b\'</span>, <span class="hljs-number">100</span>);\n</code></pre>\n<p>속도는 string으로 접근하는 방법이 더 빠릅니다 (!!) 보안을 유의하며 사용하도록 합시다.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">// fast</span>\n<span class="hljs-keyword">var</span> item = array[<span class="hljs-number">0</span>];\n\n<span class="hljs-comment">// slow</span>\n<span class="hljs-keyword">var</span> item = <span class="hljs-built_in">eval</span>(<span class="hljs-string">\'array[0]\'</span>);\n</code></pre>\n<p>또한, setTimeout이나 setInterval로는 함수를 넘기길 권장합니다.</p>\n<h3>8-2. 객체/배열 리터럴을 사용하십시오</h3>\n<pre><code class="language-javascript"><span class="hljs-comment">// slow</span>\n<span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();\nobj.name = <span class="hljs-string">\'junseok\'</span>;\nobj.email = <span class="hljs-string">\'jicjjang12@gmail.com\'</span>;\n...\n\n<span class="hljs-comment">// fast</span>\n<span class="hljs-keyword">var</span> obj = {\n  <span class="hljs-attr">name</span>: <span class="hljs-string">\'junseok\'</span>,\n  <span class="hljs-attr">email</span>: <span class="hljs-string">\'jicjjang12@gmail.com\'</span>,\n  ...\n}\n</code></pre>\n<h3>8-3. 작업을 반복하지 마십시오</h3>\n<p>함수의 반복을 피하는 첫 번째 방법은 lazy loading입니다. 어떤 정보가 필요할 때 까지 일을 하지 않는 방식인데요,</p>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">addHandler</span>(<span class="hljs-params">target, eventType, handler</span>) </span>{\n  <span class="hljs-keyword">if</span> (target.addEventListener) {\n    addHandler = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">target, eventType, handler</span>) </span>{  <span class="hljs-comment">// etc...</span>\n      target.addEventListener(eventTyep, handler, <span class="hljs-literal">false</span>);\n    }\n  } <span class="hljs-keyword">else</span> {\n    addHandler = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">target, eventType, handler</span>) </span>{  <span class="hljs-comment">// ie일 경우</span>\n      target.attachEvent(<span class="hljs-string">\'on\'</span> + eventType, handler);\n    }\n  }\n  addHandler()\n}\n</code></pre>\n<p>이와 같은 방식으로 addHandler를 한번 실행하면 내부에서 재정의를 합니다. 그러면\n그 이후부터 target.addEventListener가 있는 지 검사하는 부분이 사라지게 됩니다.\n그 만큼 빨라지겠죠</p>\n<hr>\n<p>조건에 따른 미리 읽기 방식이 있습니다. 그 방식대로 위 코드를 수정해보면</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> addHandler = <span class="hljs-built_in">document</span>.body.addEventListener?\n  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">target, eventType, handler</span>) </span>{\n    target.addEventListener(eventTyep, handler, <span class="hljs-literal">false</span>);\n  }:\n  <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">target, eventType, handler</span>) </span>{  <span class="hljs-comment">// ie일 경우</span>\n    target.attachEvent(<span class="hljs-string">\'on\'</span> + eventType, handler);\n  };\n</code></pre>\n<p>이렇게 3항 연산자를 이용하면 되고, 가장 빠른 방법이 됩니다.</p>\n<h3>8-4. 빠른 부분을 이용하십시오</h3>\n<p>이 파트에선 비트 연산자와 내장 메서드 사용에 대해 나오는데, 비트 연산자는 보편적으로 사용되지 않으므로\n개인 프로젝트가 아니라면 (물론 이 또한...)권장하지 않습니다.</p>\n<p>내장 메서드는 Math와 같은 내장 메서드를 최대한 사용하고, 새로운 메서드를 사용하지 말라는 것입니다.\n내장 메서드는 애초에 javascript로 만들어진 것이 아니라 javascript로 컴파일 되기 전인 c, c++과 같은\n속도가 더 빠른 언어로 만들어 졌기 때문에 속도 면에서 빠른 코딩을 하기 힘듭니다.</p>\n<hr>\n<p>마지막 장을 이렇게 마무리하게 되었습니다.\n7개의 포스팅을 봐주셔서 감사합니다.</p>\n<p>새로운 책이나 프로젝트로 추후에 포스팅을 올리겠습니다.\n수고하셨습니다.</p>\n</section>\n'},MWcy:function(n,s){n.exports='<section><p>매우 간단해서 길게 설명할 필요도 없는 내용이지만, 이 내용을 찾는데 오래걸린 분노로 블로그에 글을 씁니다...</p>\n<p>javascript에서 버전 관리는 requireJS와 commonJS 방식 있다는 것만 알고 있었는데, react를 공부하면서 버전 관리를</p>\n<pre><code>var _ = require(\'underscore\');\n</code></pre>\n<p>형식으로 쓰는 것을 보고, \'그냥 쓰면 당연히 안될텐데.... 어떻게 하는거지...;;\'</p>\n<p><a href="https://github.com/reactjs/react-php-v8js">react-php-v8js</a> 에서 v8js를 설치하는 부분과 javascript 버전관리 부분에서 상당히 애를 먹고 있었는데,\n버전관리를 해결하는데 만 하루가 걸렸네요...</p>\n<p>react를 처음 공부할 때 집중을 하지 않았는지, browersify를 찾고, 이해하고 난 후 자료들이 눈에 막 띄었습니다...(털썩)</p>\n<figure>\n    <img src="https://jicjjang.github.io/blog/static/image/etc/browserify/commonjs.png" alt="image">\n    <figcaption><a href="http://reactkr.github.io/react/docs/getting-started-ko-KR.html#commonjs-" title="desciprtion">&lt;출처 - reactJS&gt;</a></figcaption>\n</figure>\n<p>여러 옵션도 있고, 이벤트가 있어서 build를 여러파일로 하거나, browersify만 build하여 inline 형식으로 script를 작성할 수도 있고,</p>\n<pre><code>var browserify = require(\'browserify\');\n</code></pre>\n<p>처럼 browserify를 직접 require하여 api를 사용할 수 있습니다.</p>\n<p>(자세한 사항은 <a href="https://github.com/substack/node-browserify#usage">browserify usage</a> 페이지를 참고해주세요.)</p>\n<hr>\n<p>(이대로 블로깅을 끝내기는 아쉽...) browserify의 큰 단점은 속도가 느리다는 점! require로 버전관리를 한 파일들을 bundle.js 파일로 만들어 주는데 파일들의 개수가 많아지는 만큼 속도가 현저하게 늘어남을 (당연하게)느꼈습니다. 그래서 대안이 없나 찾아보다 <a href="https://github.com/substack/watchify">watchify</a> 라는 모듈을 찾았습니다.</p>\n<p>이 모듈은 browerify가 build하는 과정을 파일 업데이트 마다 자동으로 반복해서 해줍니다.</p>\n<hr>\n<p>매우 간단하게 browserify와 watchify에 대해.... 삽질한 내용에 대해서만 간단하게 블로깅을 해봤습니다. 이제 다시 v8js 삽질과... 앱개발을 시작해야되겠네요!</p>\n</section>\n'},Qbp0:function(n,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var e=a("htLw"),t=a("SOUh"),p=a("VU/8")(e.a,t.a,!1,null,null,null);p.options.__file="pages/_post/_postName.vue",s.default=p.exports},SOUh:function(n,s,a){"use strict";var e=function(){var n=this.$createElement;return(this._self._c||n)("section",{staticClass:"section-padding post markdown-body",attrs:{itemprop:"articleBody"},domProps:{innerHTML:this._s(this.postContent)}})};e._withStripped=!0;var t={render:e,staticRenderFns:[]};s.a=t},Sl33:function(n,s){n.exports='<section><p>어제까지 약 11일 정도 미국 여행을 다녀왔습니다. 시카고와 뉴욕을 다녀왔는데\n시카고 숙소에서 에어비앤비 숙소에 머물며 생긴 이슈와 해결, 에어비앤비의 대응에 대해 말하고자 합니다.\n개발 블로그지만 운영이나 서비스도 다루면 좋을 것 같아서요 ㅎㅎ</p>\n<h2>1. 이슈 발생, 이슈 트래킹</h2>\n<p>여행 3일차... 뉴욕 - 시카고 - 뉴욕 일정에서 시카고에서 보낼 2박 3일 중, 1박 째에 발생했습니다.\n숙소에 체크인을 하고 저녁 식사 후 숙소에서 영화를 보며 쉬는 도중 거실 바닥을 기어가는 벌레를 발견한 것이었습니다.\n벌레를 잡고 왠 벌레... 하며 확인을 하였는데 그건... <code>바퀴벌레</code>였습니다.</p>\n<p>하아... 다시 또 한숨이 나오네요.</p>\n<p>뒷목에 서늘함을 느끼며 고개를 쳐올려 천장을 요리조리 훑어봤습니다.\n아니나 다를까... 거실 천장에는 바퀴벌레들이 포진해있었습니다.</p>\n<p>거실에 짐을 풀어놨던 상황이었기에 짐을 하나하나 털어서 다시 가방에 싸서 방에 가져다 놓았습니다.\n(방에는 그나마 없었습니다...)</p>\n<p>잠에 들지 못하고 다시 거실로 나와 바퀴벌레 학살을 시작했습니다. 끔찍하다는 생각을 하며 계속 잡고 또 잡았습니다.\n최소 10마리 이상은 죽였는데, 천장이 높았기에 키가 닿지 않는 5~7마리 정도는 끝내 잡지 못했습니다.</p>\n<p>쇼파에서 계속 벌레들의 움직임을 확인하며 속으로 이슈트래킹.. 이슈트래킹.. 하며 생각하고있었는데\n화장실이나 방에 들어갔다 나오기만하면 위치가 바뀌어있거나, 사라지거나, 다시 생겨있었습니다.</p>\n<h2>2. 문제 해결 중</h2>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/life/airbnb/refund1.png" alt="image" style="display:inline-block; width:100%; margin:0 auto;">\n</figure>\n<p>2시간 여 가랑을 바퀴벌레와 씨름하다가 지쳐서 인터넷을 검색하기 시작했습니다. 나와 같은 일이 있던 사람이\n없진 않겠지? 라는 마음이 컸습니다. 결국 <a href="http://m.blog.naver.com/fongfong18/220817726045">http://m.blog.naver.com/fongfong18/220817726045</a>\n이와 같은 사이트를 발견했고 환불을 받을 수 있겠다는 생각을 했습니다. 하지만 이미 밤 12시에 가까워진 시간이었기에\n지금 당장 다른 곳으로 갈 순 없고, 오늘은 묵고 내일 옮겨야겠다는 생각을 했습니다.</p>\n<p>위 블로그를 읽다 12시가 넘으면 안된다는 부분을 보고 한국 에어비앤비 (영어를 잘 못함 + 시차때문에 한국이 워킹타임일 시간)\n로 전화를 했습니다. 친절하신 상담사분께서 상담을 해주셨고, 어쨌든 오늘 묵을 것이기 때문에 오늘의 반액 환불 및\n다음 날 예약을 취소해주겠다는 말을 전달받았습니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/life/airbnb/refund2.png" alt="image" style="display:inline-block; width:100%; margin:0 auto;">\n</figure>\n<p>그 전에 바퀴벌레 이미지를 보내달라고 요청했기에 미리 찍어둔 (이런 일이 있을까봐 미리 찍어뒀습니다 ㅎㅎ) 이미지를 보냈더니\n자세하게 찍은 사진을 달라는 재요청 메일을 받았습니다. 메일을 받은 순간 다시 전화가 왔는데 전화를 받으며 얘기하다\n눈앞에서 지나가는 바퀴벌레를 또 발견하고;;; 기다려달라는 말과 함께 바퀴벌레를 죽이고 사진을 다시 보냈습니다.</p>\n<p>확인이 되었으나, 저와 한국 시간대는 13시간 정도의 시차가 있었으므로 담당자를 시카고의 에어비앤비 담당자로 바꿔주셨고 다음 날\n머물 숙소를 찾았습니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/life/airbnb/joes.jpg" alt="image" style="display:inline-block; width:50%; margin:0 auto;">\n  <figcaption>&lt;친구에게 추천받은 영화 ^^;&gt;</figcaption>\n</figure>\n<h2>3. 메일</h2>\n<p>벌레가 확실하게, 많이 있었기에 에어비앤비 측에서 어떻게 피할 수 있는 상황이 아니었습니다. 솔직히 기업에서 이렇게 쉽게\n환불을 해준다는 경우는 살면서 거의 없었기에... 조금은 불안한 마음이 있었지만, 전화 뿐만 아니라 메일로도 환불을\n해준다고 명시해 주었기 때문에 안심하고 숙소를 옮겼습니다. 하지만 결제 취소 승인이 났다는 메일은 시카고를 떠나 뉴욕 여행을 하면서도\n받지 못했습니다. 그러다 한국으로 귀국하기 하루 이틀 정도 전에 메일이 왔습니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/life/airbnb/mail1.png" alt="image" style="display:inline-block; width:100%; margin:0 auto;">\n</figure>\n<p>...? 180,815원 중에 68,706원...? 아 일부만 들어왔나 보구나... 하는 마음에 다시 메일을 보내보았습니다.</p>\n<h2>4. 결과</h2>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/life/airbnb/mail2.png" alt="image" style="display:inline-block; width:100%; margin:0 auto;">\n</figure>\n<p>영어를 잘 못하지만 받은 금액에 누락이 있다는 뜻이 아니라는건 알 수 있었습니다. 영어로 메일을 보내다보니 뭔가 놓친 느낌이 들어서\n한국 에어비앤비 측에 전화를 걸어서 상세한 내역이 어떻게 되는건 지 물어봤습니다.</p>\n<p><code>&quot;해당 예약 번호를 확인해 본 결과 숙박은 하루에 약 4만원, 청소비가 (대략) 6만원 정도에 에어비앤비, 카드 수수료 등이 포함되어 있기 때문에 하루 숙박비의 50%, 하루 숙박비의 100% 를 하면 6만 8천원이 맞는 금액입니다. 더 자세한 내용을 확인하시려면... (여기부턴 듣지않음)&quot;</code></p>\n<p>음... 벌레가 나와서 숙소를 옮겼는데 청소비에선 받을 수 있는 금액이 없고, 에어비앤비 자체에선 책임이 없다는 말이 되는게 아닌가?\n라는 생각을 하게 만드는 결과였습니다. 그리고 청소비... 이 항목을 잘 이용하기만 한다면 문제가 생겨도 도피할 구멍이 될 수 있겠다는\n생각이 들었습니다.</p>\n<p>어쨌든 이미 승낙을 했고, 좋은 기억도 아닌데 따지고 할 생각은 없었기 때문에 이대로 마무리를 지었습니다</p>\n<hr>\n<p>쓰다보니 그저 저에게 일어난 일에 대한 불평이 되었네요...\n하지만 이러한 일을 겪으면서 사용자 입장에서 서비스를 생각할 수 있는 계기가 되었습니다.\n또한 직접 겪어보니 악용될 구멍이 보이기도 했고, 저와 같이 생각하는 사용자의 입장도 헤아리며\n수익도 챙겨야되는 기업의 입장도 생각해볼 수 있었습니다.</p>\n</section>\n'},SsDy:function(n,s){n.exports="<section><h2>아래 질문은 <a href=\"https://github.com/h5bp/Front-end-Developer-Interview-Questions\">https://github.com/h5bp/Front-end-Developer-Interview-Questions</a>에 공유된 널리 쓰이는 질문들 입니다. (추가된 질문이 있을 수 있습니다.)</h2>\n<h2>답이 아닌 저의 견해일 뿐입니다.</h2>\n<hr>\n<p><br/><br/></p>\n<h1>공통 질문들</h1>\n<p><br/><br/></p>\n<h3>Q. 선호하는 개발 환경은 무엇입니까? (운영체제, 에디터, 브라우저, 도구 등등)</h3>\n<p>=&gt; A. atom, mac, chromium, brew, node, bower, grunt, npm, 등등\n<br/><br/></p>\n<h3>Q. 당신이 웹 페이지를 만들 때의 과정을 설명 해주실 수 있을까요?</h3>\n<p>=&gt; A. 우선 구조를 생각하고 하나씩 구현을 해나간다. 요즘엔 Vuejs를 주로 사용하기 때문에 겹치는 부분을 위주로 많이 살펴본다. 혼자 Full stack으로 만든다면 서버부터 구현하는 편이다.\n<br/><br/></p>\n<h3>Q. 점진적 향상법(progressive enhancement)과 우아한 성능저하법(graceful degradation)의 차이를 설명하실 수 있습니까?</h3>\n<p>=? A. 점진적 향상법이란 말 그대로 하나하나 순서대로 발전시켜 나가는 방법이다. 웹 페이지라면 html, css, js 순서대로. 우아한 성능저하법이란 가장 최신의 기술 스펙을 맞춰놓고 아래 버전을 하나하나 대응해 나가는 것이다.\n<br/><br/></p>\n<h3>Q. &quot;시멘틱 HTML(Semantic HTML)&quot;이 무엇을 뜻하는지 설명해주세요.</h3>\n<p>=&gt; A. 간결한 html, 직관적인 javascript, 단순화된 debugging.\n<br/><br/></p>\n<h3>Q. &quot;최소화(minification)&quot;가 무엇을 하는 것입니까?</h3>\n<p>=&gt; A. 간단하게는 공백과 주석을 제거하는 등의 코드를 최적화 시키는 방법 중하나라고 생각하면 된다. 암호화를 시킬수도 있다.\n<br/><br/></p>\n<h3>Q. 여러 도메인을 이용하여 서버 사이트 데이터를 제공하는 것이 더 나은 이유는 무엇인가요?</h3>\n<p>=&gt; A. DNS Lookup을 하는데 오래걸리지, 타 도메인에서 데이터를 받는 시간은 정작 오래걸리지 않는다. 적절한 양의 도메인에서 분산적으로 데이터를 호출하는 것이 더 효과적! 병렬로 나누워서 할것인지 직렬로 할것인지의 차이와 비슷하다.\n<br/><br/></p>\n<h3>Q. 브라우저가 한 번에 1개의 도메인에서 다운로드 받는 리소스는 몇 개 인가요?</h3>\n<p>=&gt; A. 브라우저 별로 다르지만 보통 6~8가지.\n<br/><br/></p>\n<h3>Q. 만약에 디자인을 표현하기 위해 8개의 다른 Stylesheet를 가지고 있다면, 사이트에서는 어떻게 통합하실 건가요?</h3>\n<p>=&gt; A. 첫번째로 중복되는 부분을 찾아 제거한다. 그리고 번들로 css 파일들을 합친다.\n<br/><br/></p>\n<h3>Q. 당신이 프로젝트에 합류했습니다. 근데 그들은 Tab을 이용하고, 당신은 Space를 사용했습니다. 어떻게 하실건가요?</h3>\n<p>=&gt; A. :retab!\n<br/><br/></p>\n<h3>Q. 간단한 Slideshow 페이지를 만들어보세요.</h3>\n<p>=&gt; A. 1. page 전체를 로드, 2. 첫 페이지 제외 나머지는 모두 position: absolute; left: 화면의 width만큼으로 보냄 3. 한페이지씩 넘김\n<br/><br/></p>\n<h3>Q. 당신의 코드의 성능을 테스트하기 위해서 사용하는 도구가 무엇입니까?</h3>\n<p>=&gt; A. eslint로 컨벤션을 맞추고 jasmine이나 mocha를 사용.\n<br/><br/></p>\n<h3>Q. 올해 당신이 익히고 싶은 기술이 있다면, 그것은 무엇입니까?</h3>\n<p>=&gt; A. TDD에 대한 기술 발전 및 MVVM 모델을 가진 라이브러리(react or vue) 중 하나에 대한 완벽한 습득?\n<br/><br/></p>\n<h3>Q. 페이지 로딩 시간을 줄이는 3가지 방법은?</h3>\n<p>=&gt; A. css sprite image, js 파일 하나로 합치기, ssr, 파일 및 데이터 gzip으로 사용하기, expire로 캐쉬 기간 늘리기\n<br/><br/></p>\n<h3>Q. 표준의 중요함을 설명하세요.</h3>\n<p>=&gt; A. 만약 새로운 팀원이 도중에 참여했다고 가정하자. 표준이 아닌 다른 명세를 사용하고 있었다면, 팀원이 우리 팀에 바로 적응하지 못하고 적응기를 거쳐야한다는 단점이 있다. 이러한 낭비가 발생할 수 있다.\n<br/><br/></p>\n<h1>HTML에 관련된 질문들:</h1>\n<p><br/><br/></p>\n<h3>Q. doctype이 무엇을 하는 것이고, 몇 번 지정할 수 있나요?</h3>\n<p>=&gt; A. 문서의 타입 정의. 1번.\n<br/><br/></p>\n<h3>Q. 표준모드(standards mode)와 쿽스모드(quirks mode)의 다른 점은 무엇인가요?</h3>\n<p>=&gt; A. 문서가 최신이면 standards, 오래된 예전 버전(ie8 미만) 이라면 quirks 이다. 오래된 버전을 최신 브라우저에서 보여주는 것에 목적이 있다.\n<br/><br/></p>\n<h3>Q. 다국어가 포함된 페이지는 어떤 방식으로 제공하나요?</h3>\n<p>=&gt; A. :lang이나 data-set 을 가지고 표현한다. 언에 따라 다른 lang을 표현할 수 있도록 지원해야 한다.\n<br/><br/></p>\n<h3>Q. data-속성은 무엇을 하는 것인가요?</h3>\n<p>=&gt; A. custom attribute.\n<br/><br/></p>\n<h3>Q. HTML4에서 콘텐츠 모델(content models)은 무엇이며, HTML5의 그것과 다른 점은 무엇인가요?</h3>\n<p>=&gt; A. 컨텐트 모델이라는 것은 전체적인 페이지 구성에 대한 내용이다. html4에서는 block element가 주를 이루었지만, html5오면서 같은 block, inline도 다양해졌다는게 특징이다.\n<br/><br/></p>\n<h3>Q. 쿠키(Cookies)와 세션저장소(sessionStorage)와 로컬저장소(localStorage)의 차이점을 설명해주세요.</h3>\n<p>=&gt; A. 1. 쿠키, 2. web storage, 2-1. session storage, 2-2. local storage</p>\n<ul>\n<li>쿠키 스토리지 - html header에서 서버와 통신하면서 저장</li>\n<li>웹 스토리지 - 서버와의 통신 없이 저장</li>\n<li>세션 스토리지 - 윈도우를 끄면 데이터가 사라진다</li>\n<li>local 스토리지 - 데이터 유효기간이 없다.\n<br/><br/></li>\n</ul>\n<h1>Javascript에 관련된 질문들:</h1>\n<p><br/><br/></p>\n<h3>Q. 사용해 본 Javascript 라이브러리들을 말씀해주세요.</h3>\n<p>=&gt; A. React, Vue, Response, jQuery, html5shiv, requirejs, commonjs...\n<br/><br/></p>\n<h3>Q. Java와 Javascript의 다른 점은 무엇인가요?</h3>\n<p>=&gt; A. 클래스가 아닐까… 물론 클래스의 이점을 가지기 위해 prototype을 쓰거나 es6에선 class자체를 사용하긴 했지만...\n<br/><br/></p>\n<h3>Q. undefined와 undeclared 변수는 무엇인가요?</h3>\n<p>=&gt; A. undefined는 정의 자체가 안된 변수이고, undeclared는 전역으로 정의가 된 변수. var, const, let 같은 형식이 없다.\n<br/><br/></p>\n<h3>Q. 클로져(Closure)는 무엇이며, 어떻게/왜 사용하는지 설명해주세요.</h3>\n<p>=&gt; A. 클로져를 만들 때 선호하는 패턴은 무엇인가요? argyle (IIFEs에만 적용할 수 있다)\n<br/><br/></p>\n<h3>Q. 익명함수(anonymous functions)는 주로 어떤 상황에서 사용하나요?</h3>\n<p>=&gt; A. 보통 콜백으로 많이 사용한다. promise, setTimeout같은 경우?\n<br/><br/></p>\n<h3>Q. &quot;Javascript 모듈 패턴(Javascript module pattern)&quot;이 무엇인지 설명을 해주시고, 언제 사용하는지도 말씀해주시기 바랍니다.</h3>\n<p>=&gt; A. 네임 스페이스! 보통 여러번 반복되어 사용되는 코드를 모듈화 할 때 사용한다.\n<br/><br/></p>\n<h3>Q. 당신의 코드를 어떻게 구성하는지?(모듈 패턴, Class기반 상속?)</h3>\n<p>=&gt; A. 둘 다. 개인 프로젝트는 주로 es6를 사용하기 때문에 class 기반으로 많이 사용하고, 회사 프로젝트는 모듈 패턴을 주로 사용한다.\n<br/><br/></p>\n<h3>Q. 호스트 객체(Host Objects)와 네이티브 객체(Native Objects)의 차이점은 무엇인가요?</h3>\n<p>=&gt; A. 네이티브 - 기본적으로 있는 객체 - Math같은…? 호스트 - host마다 다른것. window나 global같은.\n<br/><br/></p>\n<h3>Q. attribute와 property의 차이점은?</h3>\n<p>=&gt; A. attr은 속성으로, html에 표기되는 값 자체를 나타내고 property는 js의 속성이라고 말하면 될 것 같다.\n&lt;a href=&quot;#test&quot;&gt; 라고 했을때 a의 href attr 는 #test이고 property는 http://~~~.com#test 가 될 것 이다.\n<br/><br/></p>\n<h1>jQuery에 연관된 질문들:.</h1>\n<p><br/><br/></p>\n<h3>Q. &quot;체이닝(Chaining)&quot;에 대해서 설명 하세요.</h3>\n<p>=&gt; A. return을 this로 받아서 함수가 계속 연결되어 다음 function을 연결지어 사용하는 것.\n<br/><br/></p>\n<h3>Q. .end()는 무엇을 하는 것입니까?</h3>\n<p>=&gt; A. 체이닝을 사용할 때, 이전 태그로 돌아가는 기능\n<br/><br/></p>\n<h3>Q. 이벤트 핸들러 선언 시, 언제 그리고 왜 namespace를 부여하는지를 설명해주세요.</h3>\n<p>=&gt; A. 최초에 객체에 값이 있는지 없는지 모르니 var a = a || {}; 와 같은 방식으로 선언한다.\n<br/><br/></p>\n<h3>Q. .get(),[] 그리고 .eq()의 차이점이 무엇인가요?</h3>\n<p>=&gt; A. jQuery의 get과 Map의 get은 다르다. - es2015 / get은 ajax를 get방식으로 보내는 것, []는 기본 array, eq는 child의 몇번째 요소를 고를지에 대한 숫서 picker라고 생각하면 된다.\n<br/><br/></p>\n<h3>Q. .bind(), .live()그리고 .delegate()의 차이점이 무엇인가요?</h3>\n<p>=&gt; A. .bind () 메소드는 이벤트 유형과 이벤트 핸들러를 해당 DOM 요소에 직접 등록합니다.\n.live 메서드는 이벤트 처리기를 연결된 선택기 및 이벤트 정보와 함께 루트 수준 문서에 연결합니다. 이 정보를 문서에 등록함으로써, 하나의 이벤트 핸들러가 버블 링 (a.k.a. 위임, 전파) 된 모든 이벤트에 사용될 수 있습니다.\n.delegate () 선택기 / 이벤트 정보와 함께 정렬되지 않은 목록 ( &quot;#members&quot;)에 이벤트 처리기를 연결합니다. 이는 정보를 항상 문서에 첨부하는 .live () 메서드보다 훨씬 효율적입니다.\n<br/><br/></p>\n<h3>Q. $과 $.fn 차이점이 무엇인지 설명 해주시오. 혹은, $.fn가 무엇인지 설명해주세요.</h3>\n<p>=&gt; A. $는 jquery 자체를 말하는 것이고, $.fn은 jquery의 prototype을 말하는 것이다. jquery에 기능을 추가하고 다른 jquery 객체에서 custom 기능을 사용하기 위해서는 $.fn에 선언을 해야 한다.\n<br/><br/></p>\n<h3>Q. 다음 Selector를 최적화 해주세요. : $(&quot;.foo div#bar:eq(0)”)</h3>\n<p>=&gt; A. $(‘#bar’).eq(0)\n<br/><br/></p>\n<h1>CSS 관련 질문들:</h1>\n<p><br/><br/></p>\n<h3>Q. &quot;reset&quot; CSS가 무엇인지, 어떻게 유용한지 설명 해주세요.</h3>\n<p>=&gt; A. 코딩 시작 전, 가장 첫 css로 모든 요소를 초기화하는 것을 나타냄 ex) margin: 0; padding: 0; 등등…\n<br/><br/></p>\n<h3>Q. Floats가 어떻게 동작하는지 설명해주세요.</h3>\n<p>=&gt; A. 정렬을 위해 사용. 없애려면 clear가 필요하다. 난 보통 clear를 a:after {content: ''; display: block; clear: both;} 로 사용한다.\n<br/><br/></p>\n<h3>Q. CSS 스프라이트(CSS Sprites)를 설명하고, 페이지나 사이트를 어떻게 향상시키는지 설명하시오.</h3>\n<p>=&gt; A. css sprite image, js 파일 하나로 합치기, ssr, 파일 및 데이터 gzip으로 사용하기, expire로 캐쉬 기간 늘리기\ncss sprite란, 반복적으로 많이 쓰이는 아이콘 같은 파일을 한 파일로 합쳐서 위치에 따라 사용하는 것.\n<br/><br/></p>\n<h3>Q. IE box model과 W3C box model의 차이점을 설명하시오.</h3>\n<p>=&gt; A. width, height를 정하는 기준으로 기본값은 content-box이다. content, padding, border, margin에서 content만.  border-box는 border까지로 범위를 넓히는 것이 W3C 기본 정의. 그러나 IE에서는 border-box가 기본이 된다.\n<br/><br/></p>\n<h3>Q. Image Replacement를 사용해야 할 때, 선호하는 기술과 언제 사용하는지를 설명 해주세요.</h3>\n<p>=&gt; A. 딱히 기술은 없음. alt attr을 주로 사용한다. 시각장애인이나 로딩이 제대로 되지 않았을때 대비! 시각 장애인들을 위한 screen reader나 이미지 로드에 실패했을때를 위해 사용하는 것으로 주로 img 태그의 alt 속성을 사용하거나\nbackground-image의 경우 대체할 수 있는 태그로 이미지에 대한 설명을 쓰고 background image에 대한하는 태그를 숨긴다.\n<br/><br/></p>\n<h3>Q. CSS 요소핵(CSS property hacks)을 조건부적으로 .css파일안에 넣으시나요 혹은 다른 방식이 있나요?</h3>\n<p>=&gt; A. &lt;!—[if IE 7]&gt;&lt;![endif]—&gt; 조건을 넣을 수 있음. 그러나 모던한 웹 브라우저를 활용한 사이트를 만들기 때문에 잘 사용하지 않는다.\n넣는다면 따로 css로 빼서 사용한다.\n<br/><br/></p>\n<h3>Q. 컨텐츠를 안보이게 하는 기술들의 차이점을 설명하시오.(그리고 스크린 리더(Screen readers)에서 접근이 가능한 방법은?)</h3>\n<p>=&gt; A. display는 아예 위치를 없애버림. visibility는 보이는 것만 숨김. 위치에는 있음. (width, height 0주고 overflow hidden 줘도 됨.)\n<br/><br/></p>\n<h3>Q. 그리드 시스템(Grid system)을 사용한 적이 있나요? 있다면 어떠한 것을 선호하나요?</h3>\n<p>=&gt; A. 960, 1080 width에 맞추고, 12분할함. (12의 배수) 제일 처음은 역시 bootstrap.\n<br/><br/></p>\n<h3>Q. 미디어 쿼리(media queries)를 사용한 적이 있나요? 혹은 모바일에 맞는 layout과 CSS를 사용한 적이 있나요?</h3>\n<p>=&gt; A. 반응형 웹사이트를 만들때 사용해본 적이 있다.\n<br/><br/></p>\n<h3>Q. SVG를 스타일링 하기 위한 편한 방법이 있나요?</h3>\n<p>=&gt; A. 그래픽 결과물과 css를 따로 분리하거나, svg에 style을 추가한다. -&gt; xml parser를 위해  &lt;style type=“text/css&quot;&gt;&lt;![CDATA{ a {...} }}&gt;</style>를 꼭 넣어주자.\n<br/><br/></p>\n<h3>Q. 인쇄를 하기 위해 웹페이지를 어떻게 최적화 하나요?</h3>\n<p>=&gt; A. media query를 사용한다 -&gt; print\n<br/><br/></p>\n<h3>Q. 효율적인 CSS를 작성하기 위한 &quot;비법(gotchas)&quot;은 어떤 게 있나요?</h3>\n<p>=&gt; A. jquery에만 있는 선택자는 피하기, 최대한 ID Selector, Class Selector 구분해서 사용하기, 상속 사용하기 (전처리 라이브러리 사용 굿!)\n<br/><br/></p>\n<h3>Q. CSS 전처리(CSS preprocessors)를 사용해보셨나요? 그렇다면, 사용 경험에 기반해 좋았던 점과 나빴던 점을 설명해주세요.</h3>\n<p>=&gt; A. less를 많이 사용하였고, 많이 쓴다. (sass, scss는 블로그에서만) 함수형태와 mixin 형태로 사용할 수 있다는게 매우 좋았다. 단점은 구조적으로 만들 수 있는 만큼, 구조에 대한 책임(구조를 만드는 책임)이 나에게 있다는 점이다.\n<br/><br/></p>\n<h3>Q. 페이지에서 표준 폰트가 아닌 폰트 디자인을 사용할 때 어떤 방식으로 처리하시나요?(웹폰트를 제외하고)</h3>\n<p>=&gt; A. eot, woff, woff2 확장자의 이미지 사용\n<br/><br/></p>\n<h3>Q. CSS Selector가 어떠한 원리로 동작하는지 설명하시오.</h3>\n<p>=&gt; A. 트리구조인 CSSOM을 순서대로 도는것으로 알고있다. 순서는 오른쪽에서 왼쪽으로, ul &gt; li &gt; #… 라면 #… 부터해서 왼쪽으로 올라간다. 그래서 오른쪽을 최대한 detail하게 써줘야 한다.\n<br/><br/></p>\n<hr>\n<br/>\n<p>오늘은 Q&amp;A만 무지하게 적어놓는 포스팅이었네요.<br/>\n위 질문들에 대한 저의 견해가 더욱 발전하였으면 좋겠습니다.<br/>\n프론트 엔지니어 면접 준비하시거나 공부하시는 분들께 도움이 되시길 바래요!!</p>\n</section>\n"},TH2L:function(n,s){n.exports='<section><p>이직을 하고 한달도 되지 않아 회사가 이사를 하고, 집이 이사를 하고... 바쁘다는 핑계로\n방탕한(커밋을 하지 않으면 방탕한 인생이지...만 삶의 질이 올라갔다!) 삶을 보내고 있습니다.\n이런 삶을 좀 청산하고자... 블로그로 가벼운 스타트를 하려 합니다 ㅋㅋ</p>\n<hr>\n<p>책좀 읽고 뒹굴뒹굴 거리다 라인에서 <a href="https://engineering.linecorp.com/ko/blog/detail/299">LIFF</a>\n라는 프로젝트를 진행하고 있는 것을 보았습니다. 라인앱의 App Scheme을 만들어서 사용할 수 있게 해주는 프레임워크로,\n간단히 만드는 과정 및 후기를 남기려 합니다.</p>\n<p>만드는 과정을 설명한다곤 했으나, 이미 라인에서 훌륭한\n<a href="https://developers.line.me/en/docs/liff/overview/">가이드라인</a>을 작성해 놨습니다.\n훌륭한 독해 실력과! 리뷰따위는 필요가 없으신 고수님들은! (따흐흑) 가이드 라인을 따라가셔도 <s>안</s>됩니다.</p>\n<p><img src="https://jicjjang.github.io/blog/static/image/etc/liff/liff1.png" alt="liff1"></p>\n<p>오늘 만져볼 liff의 구현체는 위와 같은 모양으로 나올 겁니다. 여러 사이즈에 대한 App Scheme이\n미리 정의되어 있습니다.</p>\n<p><img src="https://jicjjang.github.io/blog/static/image/etc/liff/liff2.png" alt="liff2"></p>\n<p>계정을 만들고, 앱을 만들어서 배포하고, LIFF에 App을 등록하는 순서대로 진행하겠습니다.</p>\n<hr>\n<h2>1. 계정계</h2>\n<p>가장 기본적으로 라인 App Scheme에 등록할 앱을 등록할\n<a href="https://developers.line.me/en/docs/liff/getting-started/#spy-creating-a-channel">계정</a>\n을 만듭니다. 계정을 만들고 나서는 <code>Provider</code>와 <code>Channel</code>을 만들어 주셔야 합니다.\n<code>Provider</code>는 제공할 기능들에 대한 그룹, <code>Channel</code>은 그룹에 대한 제공할 기능 단위라고 생각해주시면 됩니다.</p>\n<h3>꿀팁</h3>\n<p>문서에는 안나와있고, 해보면 알 수 있는 부분이지만 <code>Channel</code>을 만들 때, 2가지 경우가 있습니다.\n바로 <code>Login API</code>, <code>Message API</code>가 있는데요, 문서에는 <code>Message API</code>만 만들어서 보여주기 때문에\n뭘 선택하라는 거지... 했습니다. 두 가지 케이스는 동일하고 이름에서 보이듯 <code>Login API</code>에서는\n<code>Message API</code>전에 앱에 대한 로그인이 추가되는 API 입니다.\n(아마 앱에다가 로그인 세션을 넣어주기 위해 재로그인 하는 듯 하다!)</p>\n<p>우리가 할 테스트엔 Login이 따로 필요 없으니, <code>Message API</code>로 충분합니다.</p>\n<h2>2. 앱 개발 &amp; 배포</h2>\n<h3>2-1. 앱 개발</h3>\n<p>앱을 개발해줍니다. 문서에서는 heroku로 배포하는 것으로 되어있는데요, SSL 인증이 들어간 https 프로토콜로\n만들어진 도메인이라면 굳이 heroku로 배포할 필요 없이, 본인이 배포할 서버로 넣어주시면 됩니다.</p>\n<h3>2-2. 배포</h3>\n<p><a href="https://github.com/line/line-liff-starter">line-liff-starter</a>로 만들어진 프로젝트를\nheroku에 배포하여 테스트 해볼 수 있는데요! 오늘 배포는 이 프로젝트로 진행할 예정입니다.\n(앱 개발에 대해서는 추후에)</p>\n<p><img src="https://jicjjang.github.io/blog/static/image/etc/liff/liff3.png" alt="liff3"></p>\n<p>위 링크를 타고 들어가 보라색 버튼의 heroku를 클릭하여 heroku에 배포할 수 있습니다.\n(계정은 직접 만들어주세요)</p>\n<p>그럼 간단한 [테스트용 웹페이지]((https://liff-starter-test-app.herokuapp.com/)가 나옵니다.\n비어있는 정보들에 대해선 liff의 데이터가 들어가니, liff에 추가된 후 확인해 봅시다.</p>\n<h2>3. 스크립팅</h2>\n<p>몇번의 스크립트를 넣는 작업이 필요합니다. 계정의 access_token을 얻고, 해당하는 access_token에\nApp을 등록하는 작업입니다. 물론 넣은 이후에 url이나 화면의 타입 (Compact, Tall, Full)을\n바꾸는 스크립트, 등록된 App list를 확인하는 스크립트, 등록된 App을 지우는 스크립트 등이 있습니다.</p>\n<h3>3-1. access_token 얻기</h3>\n<pre><code class="language-bash">curl -v -X POST https://api.line.me/v2/oauth/accessToken \\\n-H <span class="hljs-string">"Content-Type:application/x-www-form-urlencoded"</span> \\\n--data-urlencode <span class="hljs-string">\'grant_type=client_credentials\'</span> \\\n--data-urlencode <span class="hljs-string">\'client_id={ channel ID }\'</span> \\\n--data-urlencode <span class="hljs-string">\'client_secret={ channel secret }\'</span>\n\n<span class="hljs-comment"># 보기좋게 정렬한 Response</span>\n<span class="hljs-comment"># {</span>\n<span class="hljs-comment">#   "access_token": "blahblah",</span>\n<span class="hljs-comment">#   "expires_in": 2592000,</span>\n<span class="hljs-comment">#   "token_type": "Bearer"</span>\n<span class="hljs-comment"># }</span>\n</code></pre>\n<h3>3-2. liff에 App 등록</h3>\n<pre><code class="language-bash">curl -X POST https://api.line.me/liff/v1/apps \\\n-H <span class="hljs-string">"Authorization: Bearer { channel access_token }"</span> \\\n-H <span class="hljs-string">"Content-Type: application/json"</span> \\\n-d <span class="hljs-string">\'{\n  "view": {\n    "type": "full",\n    "url": "https://liff-starter-test-app.herokuapp.com/"\n  }\n}\'</span>\n\n<span class="hljs-comment"># 보기좋게 정렬한 Response</span>\n<span class="hljs-comment"># {</span>\n<span class="hljs-comment">#   "liffId": "1142586872-1234567"</span>\n<span class="hljs-comment"># }</span>\n</code></pre>\n<h2>3. 테스트하기!</h2>\n<p><code>line://app/{ liffId }</code> 링크로 이동하면 됩니다. (Line App을 설치한 모바일에서만 가능)</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/liff/liff4.jpeg" alt="image" style="width:50%; margin:0 auto;">\n</figure>\n<p>결과는 위 이미지처럼 나오게 됩니다. (기존 url로 들어갔을 때와는 다르게 정보들이 채워집니다.\nliff에서 데이터를 가진 object를 내려줬기 때문이죠)</p>\n<h2>4. 마무리</h2>\n<p>위 예제들이 기본이고, 이를 활용한 앱을 만들면 됩니다.\n(물론 저도 이달안에 만들 앱에 대한 고민을 해놓음!)</p>\n<h3>참고 1. Login API</h3>\n<p>제일 처음에 <code>Channel</code>을 만들 때, <code>Login API</code>를 선택한다면</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/liff/liff5.jpeg" alt="image" style="width:50%; margin:0 auto;">\n</figure>\n<p>라는 화면 이 먼저 뜨게 됩니다.</p>\n<h3>참고 2. sendMessage</h3>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/liff/liff6.jpeg" alt="image" style="width:50%; margin:0 auto;">\n</figure>\n<p><a href="https://github.com/line/line-liff-starter/issues/1">line-liff-starter issue</a>\n에서 보실 수 있듯이 특정 디바이스에서의 <code>sendMessage 버튼</code>을 누르면 위와 같은 이슈가 나타납니다.\n이점 유의해서 테스트 해주세요.</p>\n<hr>\n<p>오랜만에 블로그 글을 쓰려니 간단한 리뷰임에도 시간이 조금 걸렸습니다.\n이런 식으로 App Scheme을 사용자가 생성하도록 공유하는 방식은 개인적으로 처음 보았는데\n활용함에 따라 개발 유저들을 끌어들일 수 있는 요소가 될 수 있다고 느꼈습니다.\n위에 작성한대로 이달 안에 뭔가 재밌는걸 해보려고 하는데 저도 기대되네요 ㅎㅎ</p>\n</section>\n'},TYW8:function(n,s){n.exports='<section><p>4장 시작하겠습니다.</p>\n<h2>4. 알고리즘과 흐름 제어</h2>\n<h3>4-1. 루프</h3>\n<p>언어 대부분에서의 코드 실행 시간을 대부분 루프에서 소비합니다.\n그만큼 성능을 많이 좌우한다고 할 수 있습니다.</p>\n<ol>\n<li>for</li>\n<li>for-in</li>\n<li>while</li>\n<li>do-while</li>\n</ol>\n<p>4가지의 반복문의 성능은 거진 비슷하지만, for-in은 특히나 성능이 좋지 않습니다.\n반복할 때마다 인스턴스 또는 프로토타입 체인을 검색해야 하므로 느릴 수 밖에 없습니다.\n그렇기 때문에 개수를 지정하여 반복문을 돌리는 것이 훨씬 효율적입니다.</p>\n<p>루프의 종류를 제외하고 루프의 성능을 올리기 위한 방법은 무엇이 있을까요?</p>\n<hr>\n<p>루프 안에서의 일 줄이기</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; items.length; i++) {\n  process(items[i]);\n}\n<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>;\n<span class="hljs-keyword">while</span>(j &lt; items.length) {\n  process(itmes[j++]);\n}\n<span class="hljs-keyword">var</span> k = <span class="hljs-number">0</span>;\n<span class="hljs-keyword">do</span> {\n  process(itmes[k++]);\n} <span class="hljs-keyword">while</span> (k &lt; items.length);\n</code></pre>\n<p>이 코드에서 일어나는 일은</p>\n<ol>\n<li>itmes 검색 (items)</li>\n<li>조건 비교 (i &lt; itmes.length)</li>\n<li>조건이 true인지 false인지 비교 (i &lt; itmes.length == true)</li>\n<li>증가 연산 (i++)</li>\n<li>배열 검색 (items[i])</li>\n<li>함수 호출 (process(itmes[i]))</li>\n</ol>\n<p>총 6가지 입니다. 우선 length를 조회하는 부분을 최적화 해보겠습니다.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, len = items.length; i &lt; len; i++) {\n  process(items[i]);\n}\n<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>,\n    count = items.length;\n<span class="hljs-keyword">while</span>(j &lt; count) {\n  process(itmes[j++]);\n}\n<span class="hljs-keyword">var</span> k = <span class="hljs-number">0</span>;\n    num = items.length;\n<span class="hljs-keyword">do</span> {\n  process(items[k++]);\n} <span class="hljs-keyword">while</span> (k &lt; num);\n</code></pre>\n<p>이번에는 비교하는 부분을 최적화 해봅시다.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = items.length; i--; ) {\n  process(items[i]);\n}\n<span class="hljs-keyword">var</span> j = items.length;\n<span class="hljs-keyword">while</span>(j--) {\n  process(itmes[j]);\n}\n<span class="hljs-keyword">var</span> k = items.length<span class="hljs-number">-1</span>;\n<span class="hljs-keyword">do</span> {\n  process(items[k]);\n} <span class="hljs-keyword">while</span> (k--);\n</code></pre>\n<p>조건 부분이 0이 되면 자동으로 false가 되는 자바스크립트의 특징을 이용한 것입니다.</p>\n<hr>\n<p>반복을 줄이기</p>\n<p>process를 호출하는 부분을 반복마다 여러개를 두는 것입니다.</p>\n<p>100번의 반복을 돌릴 일을 10번의 반복문을 돌리며, 1번 반복이 실행될 때마다\n프로세스를 10번 실행시키는 것이다. 이 일은 반복 횟수를 알 경우 사용하는게 적당합니다.</p>\n<h2>4-2. 조건문</h2>\n<p>if-else 문과 switch 문이 있습니다. 우선 if-else 문 부터 확인 해보겠습니다.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">5</span>) {\n  ...\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value &gt; <span class="hljs-number">5</span> &amp;&amp; value &lt; <span class="hljs-number">10</span>) {\n  ...\n} <span class="hljs-keyword">else</span> {\n  ...\n}\n</code></pre>\n<p>이 코드가 효과적인 경우는 value가 5보다 작은 값이 가장 많을 때 입니다.\n첫 조건에서 가장 많은 값을 걸러내면 그 다음 조건까지 들어갈 일이 줄어들기 때문입니다.\n조건문의 최적화는 조건문을 중첩시키는 것입니다.</p>\n<p>그리고 조건이 많아질수록 성능이 저하됨은 당연지사 하겠죠. 조건이 3가지 이상 겹쳐질 경우\nswitch가 더 효율적입니다.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">if</span> (value == <span class="hljs-number">0</span>) {\n  <span class="hljs-keyword">return</span> result <span class="hljs-number">0</span>;\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value == <span class="hljs-number">1</span>) {\n  <span class="hljs-keyword">return</span> result <span class="hljs-number">1</span>;\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value == <span class="hljs-number">2</span>) {\n  <span class="hljs-keyword">return</span> result <span class="hljs-number">2</span>;\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value == <span class="hljs-number">3</span>) {\n  <span class="hljs-keyword">return</span> result <span class="hljs-number">3</span>;\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value == <span class="hljs-number">4</span>) {\n  <span class="hljs-keyword">return</span> result <span class="hljs-number">4</span>;\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value == <span class="hljs-number">5</span>) {\n  <span class="hljs-keyword">return</span> result <span class="hljs-number">5</span>;\n}\n</code></pre>\n<p>위 코드의 성능을 향상시켜 보겠습니다.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">6</span>) {\n  <span class="hljs-keyword">if</span> (value &lt; <span class="hljs-number">3</span>) {\n    <span class="hljs-keyword">if</span> (value == <span class="hljs-number">0</span>) {\n      <span class="hljs-keyword">return</span> result <span class="hljs-number">0</span>;\n    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value == <span class="hljs-number">1</span>) {\n      <span class="hljs-keyword">return</span> result <span class="hljs-number">1</span>;\n    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value == <span class="hljs-number">2</span>) {\n      <span class="hljs-keyword">return</span> result <span class="hljs-number">2</span>;\n    }\n  } <span class="hljs-keyword">else</span> {\n    <span class="hljs-keyword">if</span> (value == <span class="hljs-number">3</span>) {\n      <span class="hljs-keyword">return</span> result <span class="hljs-number">3</span>;\n    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value == <span class="hljs-number">4</span>) {\n      <span class="hljs-keyword">return</span> result <span class="hljs-number">4</span>;\n    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (value == <span class="hljs-number">5</span>) {\n      <span class="hljs-keyword">return</span> result <span class="hljs-number">5</span>;\n    }\n  }\n} <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (...) {\n  ...\n}\n</code></pre>\n<p>비교하는 횟수를 최소화할 수 있습니다. 이진 트리 검색과 비슷합니다.</p>\n<h3>4-3. 재귀</h3>\n<p>브라우저에서의 재귀는 콜 스택 제한 때문에 위험할 수 있습니다.\n또한 브라우저마다 에러 메세지가 다르기 때문에 조심해야 합니다.\n(try-catch로 잡을 수는 있습니다.)</p>\n<hr>\n<p>재귀로 구현할 수 있는 알고리즘은 모두 반복문으로 만들 수 있습니다.\n루프상의 성능 문제가 발생할 수 있으나, 함수상의 성능 문제보다 부하가 낮아서\n재귀보다는 반복문이 더 나을 수 있습니다.</p>\n<hr>\n<p>factorial 함수와 같은 재귀함수는 동일한 일을 지속적으로 반복합니다.\n그래서 이미 했던 일을 저장해 성능을 향상시킬 수 있습니다.</p>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">memfactorial</span>(<span class="hljs-params">n</span>) </span>{\n  <span class="hljs-keyword">if</span> (!memfactorial.cache) {\n    memfactorial.cache = {\n      <span class="hljs-string">\'0\'</span>: <span class="hljs-number">1</span>,\n      <span class="hljs-string">\'1\'</span>: <span class="hljs-number">1</span>\n    };\n  }\n  <span class="hljs-keyword">if</span> (!memfactorial.cache.hasOwnProperty(n)) {\n    memfactorial.cache[n] = n * memfactorial(n<span class="hljs-number">-1</span>);\n  }\n  <span class="hljs-keyword">return</span> memfactorial.cache[n];\n}\n</code></pre>\n<p>코드를 보면 알 수 있겠지만, 이전에 계산한 값을 memfactorial.cache에 누적시키는 기능을 추가했습니다.\n성능이 아주 중요한 함수는 이러한 <code>메모이제이션</code> 기능을 <code>직접</code> 추가하는 것이 좋습니다.</p>\n<hr>\n<p>4장도 모두 포스팅했습니다. 정규표현식(5장)은 일단 건너뛰고 진행하려합니다.\n남은 장도 열심히 포스팅하겠습니다!</p>\n</section>\n'},Vyx5:function(n,s){n.exports='<section><p>읽을수록 모르던 부분이 계속 등장하는데요, 3장도 바로 진행해보겠습니다.</p>\n<h2>3. DOM 스크립팅</h2>\n<p>DOM 병목이 쉽게 일어나고, 스크립팅 시간이 오래걸리는데</p>\n<ol>\n<li>DOM에 대한 접근과 수정</li>\n<li>DOM 요소의 스타일 변경, 화면 재구성을 초래하는 것</li>\n<li>DOM 이벤트를 통한 사용자 상호작용 처리</li>\n</ol>\n<p>3가지를 주제로 진행하겠습니다.</p>\n<h3>3-1. 브라우저 세계의 DOM</h3>\n<p>브라우저마다 DOM과 DOM 스크립팅에 각각 다른 엔진을 사용합니다.\n서로 다른 엔진간의 통신을 하기 때문에 느릴수 밖에 없는데요,\n그렇다면 어떻게 성능을 끌어올릴지 알아봅시다.</p>\n<h3>3-2. DOM 접근과 수정</h3>\n<p>DOM에 접근하기만 해도 리소스를 소모합니다. 그런 상황에서 DOM을 수정한다면?\n더욱 많은 리소스를 잡아먹게 되겠죠? 최대한 DOM에 대한 접근을 최소화해야 하기 때문에\n수정 및 접근 작업에서 반복문은 최악입니다.</p>\n<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">innerHTMLLoop</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>; count &lt; <span class="hljs-number">15000</span>; count++) {\n    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'here\'</span>).innerHTML += <span class="hljs-string">\'a\'</span>;\n  }\n}\n</code></pre>\n<p>앞에서 봤던 이슈와 동일합니다. DOM에 대한 접근이 많아진다면 DOM을 변수에 할당하고 사용해야 합니다.\n위 코드는 DOM에 접근할 때 한번, DOM의 값을 바꿀 때 한번, 반복문을 돌 때마다 2번씩 요소에 접근하게 됩니다.</p>\n<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">innerHTMLLoop</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">var</span> content = <span class="hljs-string">\'\'</span>;\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>; count &lt; <span class="hljs-number">15000</span>; count++) {\n    content += <span class="hljs-string">\'a\'</span>;\n  }\n  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'here\'</span>).innerHTML += content;\n}\n</code></pre>\n<p>모든 브라우저에서 이처럼 변수에 DOM을 저장하고 사용하는 것이 효과적으로 나타납니다.</p>\n<hr>\n<p>HTML 컬렉션을 반환하는 메서드에 대해서 알아보겠습니다.</p>\n<ol>\n<li>document.getElementsByName()</li>\n<li>document.getElementsByClassName()</li>\n<li>document.getElementsByTagName()</li>\n<li>document.images</li>\n<li>document.links</li>\n<li>document.forms</li>\n<li>document.forms[0].elements</li>\n</ol>\n<p>이러한 HTML Collection은 동적이기 때문에</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> alldivs = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">\'div\'</span>);\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; alldivs.length; i++) {\n  <span class="hljs-built_in">document</span>.body.appendChild(<span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">\'div\'</span>));\n}\n</code></pre>\n<p>위 코드가 무한루프로 동작하게 됩니다. body에 div 태그가 추가될 때마다\nalldivs는 동적으로 증가하기 때문에 i가 1씩 증가할 때 alldivs도 1씩 증가하기 때문입니다.\n(그렇기 때문에 <code>느.립.니.다.</code>)</p>\n<p>또한 HTML Collection은 일반 array가 아니기 때문에 반복문보다 느립니다. 그래서 사용할 때에는\n반복문에 복사한 뒤 사용해야 합니다.</p>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">toArray</span>(<span class="hljs-params">coll</span>) </span>{\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, a = [], len = coll.length; i &lt; len; i++) {\n    a[i] = coll[i];\n  }\n  <span class="hljs-keyword">return</span> a;\n}\n</code></pre>\n<p>반복하거나 length에 접근하는 것만으로도 Collection을 갱신해야 하기 때문입니다.</p>\n<hr>\n<p>DOM의 특정 부분에 접근하는 방법에 대해 알아보겠습니다. childNodes나 nextSibling으로 형제 요소를\n선택하여 작업할 수 있는데</p>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testNextSibling</span>(<span class="hljs-params"></span>) </span>{\n  val el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'ddd\'</span>),\n      ch = el.firstChild,\n      name = <span class="hljs-string">\'\'</span>;\n\n  <span class="hljs-keyword">do</span> {\n    name = ch.nodeName;\n  } <span class="hljs-keyword">while</span>(ch = ch.nextSibling);\n  <span class="hljs-keyword">return</span> name;\n}\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testChildNodes</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'ddd\'</span>),\n      ch = el.childNodes,\n      len = ch.length,\n      name = <span class="hljs-string">\'\'</span>;\n\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>; count &lt; len; count++) {\n    name = ch[count].nodeName;\n  }\n  <span class="hljs-keyword">return</span> name;\n}\n</code></pre>\n<p>둘 중 어떠한 방법을 사용해도 상관이 없습니다. 다만, childNodes 같은 경우엔\nlength를 캐시한 뒤 사용해야 합니다.</p>\n<p>자식요소를 조금 더 세밀하게 정해야 할 때가 있습니다.</p>\n<ol>\n<li>document.getElementById</li>\n<li>document.getElementsByName</li>\n<li>document.getElementsByClassName</li>\n<li>document.getElementsByTagName</li>\n</ol>\n<p>위 4가지 방식 뿐만 아니라</p>\n<ol>\n<li>document.querySelectorAll(\'#menu a\')</li>\n<li>document.querySelector(\'#menu a\')</li>\n</ol>\n<p>이런 방식 또한 가능합니다. 여러번 질의하는 것 보다는 querySelector가 훨씬 효율적입니다.</p>\n<h3>3-3. 리페인트와 리플로우</h3>\n<p>브라우저가 데이터를 내려받으면 페이지 구조를 나타내는 DOM 트리와\nDOM 트리를 어떻게 표시할 지에 대한 정보를 가진 랜더 트리, 두가지를 만듭니다.</p>\n<p>두 트리를 다 만들면 브라우저는 페이지 요소를 표시합니다. (페인트)</p>\n<p>resize 이벤트가 발생하거나 비슷한 이벤트가 발생한다면 요소들의 정보를 다시 계산 (리플로우)해야하고\n계산 한 뒤 다시 그려줘야 합니다.(리페인트) 리소스를 많이 잡아먹는것이 리플로우인데 배경색만 바꾼다고\n가정한다면 리플로우 없이 리페인트만 일어납니다.</p>\n<p>이러한 경우 리소스가 많이 소모되지 않기 때문에 성능 저하가 일어나지 않습니다.\n그렇기 때문에 리플로우를 최소화 하는 작업이 필수입니다.</p>\n<p>리플로우가 일어나는 조건은</p>\n<ul>\n<li>\n<ol>\n<li>보이는 (display, visibility)DOM 요소를 추가 혹은 제거</li>\n</ol>\n</li>\n<li>\n<ol start="2">\n<li>요소의 위치가 바뀜</li>\n</ol>\n</li>\n<li>\n<ol start="3">\n<li>요소의 크기가 바뀜</li>\n</ol>\n</li>\n<li>\n<ol start="4">\n<li>텍스트의 내용 변경, 이미지가 다른 크기 이미지로 대체되는 등의 내용 변경</li>\n</ol>\n</li>\n<li>\n<ol start="5">\n<li>페이지를 처음 표시</li>\n</ol>\n</li>\n<li>\n<ol start="6">\n<li>브라우저 창의 크기 변경</li>\n</ol>\n</li>\n</ul>\n<p>어떤 것을 바꾸느냐에 따라 전체를, 일부를 다시 계산합니다.\n리플로우를 계속 발생하는 것도 낭비기 때문에 랜더 트리를 큐에 모았다 실행할 수 있습니다.</p>\n<ol>\n<li>offsetTop, offsetLeft, offsetWidht, offsetHeight</li>\n<li>scrollTop, scrollLeft, scrollWidht, scrollHeight</li>\n<li>clientTop, clientLeft, clientWidht, clientHeight</li>\n</ol>\n<p>이런 속성은 레이아웃을 바로바로 반영해야 하므로 브라우저가 랜더링 큐에 대기중인 랜더 트리와 함께\n강제로 리플로우를 진행합니다. 그렇기 때문에 스타일을 바꿀 때 <code>위 속성을 쓰지 않는게 중요합니다.</code></p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> computed = <span class="hljs-built_in">document</span>.body.style;\n<span class="hljs-keyword">var</span> tmp = <span class="hljs-string">\'\'</span>;\n\nbodyStyle.color = <span class="hljs-string">\'red\'</span>;\ntmp = bodyStyle.backgroundColor;\nbodyStyle.color = <span class="hljs-string">\'white\'</span>;\ntmp = bodyStyle.backgroundImage;\nbodyStyle.color = <span class="hljs-string">\'green\'</span>;\ntmp = bodyStyle.backgroundAttachment;\n</code></pre>\n<p>위 코드처럼 레이아웃을 속성을 변경하고, 값을 가져오는 일을 번갈아가며 하는 것을 매우 비효율적 이므로</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> computed = <span class="hljs-built_in">document</span>.body.style;\n<span class="hljs-keyword">var</span> tmp = <span class="hljs-string">\'\'</span>;\n\nbodyStyle.color = <span class="hljs-string">\'red\'</span>;\nbodyStyle.color = <span class="hljs-string">\'white\'</span>;\nbodyStyle.color = <span class="hljs-string">\'green\'</span>;\ntmp = bodyStyle.backgroundColor;\ntmp = bodyStyle.backgroundImage;\ntmp = bodyStyle.backgroundAttachment;\n</code></pre>\n<p>이렇게 같은 일을 한꺼번에 몰아주는 것이 효율적이고 더 빠릅니다.</p>\n<p>그리고</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'divv\'</span>);\nel.style.borderLeft = <span class="hljs-string">\'1px\'</span>;\nel.style.borderRight = <span class="hljs-string">\'2px\'</span>;\nel.style.padding = <span class="hljs-string">\'5px\'</span>;\n</code></pre>\n<p>최악의 경우 리플로우가 3번 일어나는 코드입니다. 이런 코드는</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'divv\'</span>);\nel.style.cssText = <span class="hljs-string">\'border-left: 1px; border-right: 2px; padding: 5px;\'</span>\n</code></pre>\n<p>이렇게 바꿔줄 수 있습니다. 다른 방법으론 class를 토글하는 방법도 있습니다.</p>\n<hr>\n<p>하지만 어쩔 수 없이 여러번 계산을 해야 할 때에는 DOM의 변경을 문서의 흐름에서 분리하고\n다 변경된 후 적용시키는 방법이 있습니다.</p>\n<p>데이터를 넣은 &lt;li&gt; 태그를 삽입한다고 가정할 때,\ncreateElement를 통해 li 여러개를 생성한 후, &lt;ul&gt; 태그 안에 넣고\n가장 마지막에 DOM에 추가하는 것입니다. 이렇게 하면 리플로우를 최소화할 수 있습니다.</p>\n<hr>\n<p>애니메이션을 할 때에는 절대 위치를 지정한 후 동작해야합니다.\n절대 위치에서는 리플로우가 동작하지 않기 때문에 포지션 변경, 애니메이션, 포지션 복귀\n순서로 진행을 해야합니다.</p>\n<h3>3-4. 이벤트 위임</h3>\n<p>자바스크립트에서 이벤트는 발생 후 부모 요소로 버블링되어 올라가므로 부모 요소에서 자식 요소의\n이벤트를 처리할 수 있습니다.</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"one"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"two"</span>&gt;</span>\n    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">"..."</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>\n  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>\n</code></pre>\n<p>위와 같은 코드에서 &lt;a&gt; 태그를 클릭하면 #two 요소, 그 다음으로 #one 요소, 마지막으로 window까지\n이벤트가 전파됩니다. 이렇게 이벤트가 퍼져 이벤트 대상이 아닌 다른 요소에서 이벤트를 동작시키는 것을\n위임이라고 합니다.</p>\n<p>물론 stopPropagation 메서드와 preventDefault 메서드로 위임을 제어할 수 있습니다.</p>\n<hr>\n<p>3장의 내용은 여기까지 입니다. 프론트엔드에서 가장 중요하다고 생각한 Reflow와 Repaint에 대한 내용이\n실려있는 장이었습니다. 앞으로도 많은 내용이 기대되네요!</p>\n</section>\n'},WH3K:function(n,s){n.exports='<section><p>1장에 이어서 2장도 바로 진행하겠습니다~</p>\n<h2>2. 데이터 접근</h2>\n<p>데이터는 총 4개의 형식으로 이루어집니다.</p>\n<ol>\n<li>리터럴 값 (Number, boolean, Object, Array, Function, Regex, null, undefined)</li>\n<li>변수</li>\n<li>배열 항목</li>\n<li>객체 맴버</li>\n</ol>\n<p>각 데이터 저장 위치와 브라우저마다 I/O 시간이 모두 다릅니다.</p>\n<h3>2-1. 스코프 관리</h3>\n<p>자바스크립트의 함수는 객체 (Function의 인스턴스) 입니다.</p>\n<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">add</span>(<span class="hljs-params">num1, num2</span>) </span>{\n  <span class="hljs-keyword">var</span> sum = num1 + num2;\n  <span class="hljs-keyword">return</span> sum;\n}\n</code></pre>\n<p>간단한 add 함수가 있을 때, add 함수의 scope chain 입니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/javascript/optimize/2/scope1.jpg" alt="image" style="display:inline-block; width:100%; margin:0 auto;">\n</figure>\n<p>이 add 함수를 실행할 때의 scope chain의 변화 입니다.</p>\n<pre><code class="language-js"><span class="hljs-keyword">var</span> total = add(<span class="hljs-number">5</span>, <span class="hljs-number">10</span>);\n</code></pre>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/javascript/optimize/2/scope2.jpg" alt="image" style="display:inline-block; width:100%; margin:0 auto;">\n</figure>\n<p>Activeation object는 생성이 될때마다 만들어졌다 파괴되었다를 반복합니다. 변수를 할당하거나 계산할 때, 등등에서 자신의 값에 맞는 변수를 찾기 위해 scope chain을 검색합니다.\nActivation object에 값이 있다면 할당을, 없으면 Global object에서 다시 검색을 진행합니다. 이 검색의 과정이 복잡할수록 성능이 떨어집니다.\n성능 개선을 위해선 최대한 지역 변수, Global object에 있는 값들을 사용해야 합니다.</p>\n<p>반복되는 전역객체는 할당 후 사용을 해야합니다.</p>\n<pre><code class="language-js"><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">document</span>.body,\nlink = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">\'a\'</span>);\n\n<span class="hljs-built_in">document</span>.getElementById...\n</code></pre>\n<p>가 아닌</p>\n<pre><code class="language-js"><span class="hljs-keyword">var</span> doc = <span class="hljs-built_in">document</span>,\nbd = doc.body,\nlink = doc.getElementsByTagName(<span class="hljs-string">\'a\'</span>)\n\ndoc.getElementById...\n</code></pre>\n<p>와 같은 작업이 필요합니다. 이 예제는 매우 간단하지만 수십, 수백번 전역 객체에 접근을 매번 새로한다고 생각하면 끔찍하네요.</p>\n<pre><code class="language-js"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">assignEvents</span>(<span class="hljs-params"></span>) </span>{\n  <span class="hljs-keyword">var</span> id = <span class="hljs-string">\'xdi9592\'</span>;\n\n  <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">\'save-btn\'</span>).onclick = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e</span>) </span>{\n    saveDocument(id);\n  }\n}\n</code></pre>\n<p>클로저를 생각해봅시다. 함수안에 함수가 존재하네요. 이런 경우에는 scope chain을 공유하게 됩니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/javascript/optimize/2/closure1.jpg" alt="image" style="display:inline-block; width:100%; margin:0 auto;">\n</figure>\n<p>실행 당시에 생성되는 Activation object를 closure도 공유를 하는데, 함수인 closure가 생성될 때에는 Activation object가\n생성이 안될까요? 물론 생성됩니다. 그렇기 때문에 scope chain이 또 한번 변경이 됩니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/javascript/optimize/2/closure2.jpg" alt="image" style="display:inline-block; width:100%; margin:0 auto;">\n</figure>\n<p>여기서 발생하는 성능문제가 있죠. 우선순위가 0, 1인 scope chain에서 값을 찾지 못했을 경우인데요, 만약 closure가 여러겹으로 있다고 한다면\n상당한 성능 저하로 이어지게 됩니다.</p>\n<h3>2-2. 객체 멤버</h3>\n<p>객체 멤버 접근은 리터럴, 변수, 배열 접근보다 느립니다. 그 이유를 알아봅시다.</p>\n<p>자바스크립트의 객체는 프로토타입에 기반합니다. 프로토타입은 다른 객체의 기반이 되는 객체로, 새 객체가 가져야 할 멤버를 정의 및 구현합니다.\n프로토타입 객체는 해당 객체의 모든 인스턴스 사이에서 공유됩니다.</p>\n<p>객체는 내부 속성을 통해 자신의 프로토타입에 묶이며, 브라우저들은 이 속성을 <code>__proto__</code>라는 이름으로 노출합니다.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> book = {\n  <span class="hljs-attr">title</span>: <span class="hljs-string">\'High Performance Javascript\'</span>,\n  <span class="hljs-attr">publisher</span>: <span class="hljs-string">\'Junseok\'</span>\n};\n\nalert(book.toString()); <span class="hljs-comment">// [object Object]</span>\n</code></pre>\n<p>prototype 또한 객체이기 때문에 prototype에 대한 키가 존재합니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/javascript/optimize/2/prototype1.jpg" alt="image" style="display:inline-block; width:100%; margin:0 auto;">\n</figure>\n<p>prototype 구조는 다음과 같으며 title, publisher를 제외하는 prototype에 기능이 포함되어 있기 때문에, 위 코드의 toString과 같은 함수는 prototype에 있는 기능을\n사용하게 됩니다. (scope chain을 보면 알 수 있듯이 Activation object에 toString이 있다면 그 기능으로 사용합니다. like overriding)</p>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Book</span>(<span class="hljs-params">title, publisher</span>) </span>{\n  <span class="hljs-keyword">this</span>.title = title;\n  <span class="hljs-keyword">this</span>.publisher = publisher;\n}\n\nBook.prototype.sayTitle = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  alert(<span class="hljs-keyword">this</span>.title);\n}\n\n<span class="hljs-keyword">var</span> book1 = <span class="hljs-keyword">new</span> Book(<span class="hljs-string">\'High performance js 1\'</span>, <span class="hljs-string">\'junseok\'</span>);\n<span class="hljs-keyword">var</span> book2 = <span class="hljs-keyword">new</span> Book(<span class="hljs-string">\'High performance js 2\'</span>, <span class="hljs-string">\'junseok\'</span>);\n\nalert(boo1 <span class="hljs-keyword">instanceof</span> Book);    <span class="hljs-comment">// true</span>\nalert(boo1 <span class="hljs-keyword">instanceof</span> <span class="hljs-built_in">Object</span>);  <span class="hljs-comment">// true</span>\n\nbook1.sayTitle();             <span class="hljs-comment">// \'High performance js 1\'</span>\nalert(book1.toString());      <span class="hljs-comment">// [object Object]</span>\n</code></pre>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/javascript/optimize/2/prototype2.jpg" alt="image" style="display:inline-block; width:100%; margin:0 auto;">\n</figure>\n<p>코드와 코드에 해당하는 prototype chain 구조입니다. Book 함수의 프로토타입(prototype)은 Book.prototype 이고, Book 인스턴스의 프로토타입(<code>__proto__</code>) 또한 Book.prototype 입니다.\n그리고 Book.prototype의 프로토타입 (Book.prototype.prototype)은 Object가 됩니다.</p>\n<p><code>물론 관계가 깊어질수록 성능은 저하됩니다.</code></p>\n<p>객체 멤버를 해석하는 작업도 있습니다. <code>.</code> 마다 객체 멤버를 해석하는 작업을하기 때문에 window.location.href가 window.location.href.toString()보다 빠릅니다.</p>\n<hr>\n<p>2장도 짧은 정리로 끝났는데, HTML4를 사용하던 때의, 오래된 책이지만 몰랐던 부분이 간간히 나옵니다.\n중요한 부분을 잘 집어서 더 정리해보겠습니다 ^^</p>\n</section>\n'},WJZd:function(n,s){n.exports="<section><h1>STATIC</h1>\n<p>This directory contains your static files.\nEach file inside this directory is mapped to /.</p>\n<p>Example: /static/robots.txt is mapped as /robots.txt.</p>\n<p>More information about the usage of this directory in the documentation:\nhttps://nuxtjs.org/guide/assets#static</p>\n<p><strong>This directory is not required, you can delete it if you don't want to use it.</strong></p>\n</section>\n"},WWNi:function(n,s){n.exports='<section><p>워후! 사실 길게 쓸 포스팅은 아니지만 혼자 신이나서 작성해봅니다 ㅋㅋ\n몇달 전 Vue를 공부하고나서 심심풀이로 만들었던 라이브러리가\n저도 모르게 <a href="https://www.getrevue.co/profile/vuenewsletter/issues/vue-js-newsletter-45-vueconf-guide-new-speaker-typescript-starter-articles-videos-and-resources-57309">Vue.js News</a>\n에 소개되었었네요 ㅋㅋ</p>\n<p><img src="https://jicjjang.github.io/blog/static/image/frontend/welcome-vue-card-layer/my_lib.png" alt="my_lib"></p>\n<p>예헤이!\n뭔가 열심히 코딩을 할 계기가 하나 더 생긴 것 같아 기쁩니다 :D 헤헤</p>\n</section>\n'},XOMP:function(n,s){n.exports='<section><p>회사에서 서버 개발을 하면서 Session과 Cache이 복잡하게 얽혀있고, 분리된 여러 서버를 넘나들며\n사용하기 힘들다는 생각을 하게되었습니다. 특히, 인증 부분에 있어서 맡아서 하는 부분이 없다보니\n개발을 해볼 수 있는 환경이 아니었습니다. 그래서 우연히 알게 된 jwt에 대해 공부를 해보았습니다.</p>\n<hr>\n<h1>1. basic</h1>\n<p>JSON Web Token (JWT)는 디지털 서명을 통해 확인하고 신뢰할 수있는 정보를 보내는 데 사용됩니다.\n가장 기본적인 형태의 JWT를 사용하면 서명으로 데이터 (Claim)에 서명 할 수 있으며 나중에\n비밀 서명 키로 확인할 수 있습니다.</p>\n<p>JWT는 base64url로 인코딩 된 값 3개를 마침표로 구분하여 표시합니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/jwt/structure.jpg" alt="image"\n    style="display:inline-block; width:100%; max-width: 800px; margin:0 auto;">\n</figure>\n<p><code>(이 그림에서 나타나는 정보로 알 수 있는 것은 encrypt 된 값이 plain 값일 때의 정보들을 계속 가지고 있다는 점입니다. 그렇다면 DB에 질의를 하지 않고, 지속적으로 데이터를 가지고 있을 수 있다는 점을 알 수 있습니다.)</code></p>\n<p>이제 그림의 3가지 값에 대해 알아봅시다.</p>\n<span style="color:red; word-break: break-all;">\neyJ3eXBiOiJKV1QiDCJCgGciOiDIUcD1NiJ7\n</span>.<span style="color:purple; word-break: break-all;">\ncyJ3c2KySWEiOiIiMVdmONZwZj0zNWRhLTE4ZjItODZhYk1jZWYzOTD0NjBvYmWidJ\n</span>.<span style="color:blue; word-break: break-all;">\n-xN_h82PHVTCMA9vdoErcZxH-x5mb13y1f37t3rGzcM</span>\n<p><code>.</code> 으로 합하여 놓은 <code>Header</code> / <code>Claim (Payload)</code> / <code>Signature</code> 입니다. 이제 하나씩 알아봅시다.</p>\n<h2>Header</h2>\n<p>Header에는 JWT에 사용 된 해시 알고리즘과 토큰을 설명하는 간단한 JavaScript 객체의 인코딩 된\n문자열 표현입니다.</p>\n<h2>Claim (Payload)</h2>\n<p>토큰의 핵심으로 데이터를 저장합니다. Payload 길이는 JWT에 저장하는 데이터의 양에 비례하기 때문에\n최소한의 데이터만 저장하길 권장합니다. (해시 값 자체는 길어지지만 Decrypt 하는 시간 또한 리소스입니다.)</p>\n<p>또한, Claim은 다시 <code>reserved</code> / <code>public</code> / <code>private</code> 으로 나뉩니다.</p>\n<h3>1) reserved Claim</h3>\n<p>의무 사항은 아니지만 권장되는 (미리 정의 된) Claim 입니다.</p>\n<ul>\n<li>iss : 토큰 발급자</li>\n<li>exp : 만료 타임 스탬프 (초단위) (만료 된 토큰 거부)</li>\n<li>iat : JWT가 발행 된 시간. JWT의 나이를 결정하는 데 사용</li>\n<li>nbf : &quot;not before&quot;는 토큰이 활성화 될 미래의 시간</li>\n<li>jti : JWT의 고유 식별자. JWT가 재사용되거나 재생되는 것을 방지</li>\n<li>sub : 토큰의 대상 (드물게 사용됨)</li>\n<li>aud : 토큰의 대상 (거의 사용되지 않음)</li>\n</ul>\n<h3>2) public Claim</h3>\n<p>자유롭게 정의할 수 있습니다. 그러나 (충돌 방지 네임 스페이스가 포함된) URI로 정의되어야 합니다.</p>\n<h3>3) private Claim</h3>\n<p>사용자가 정의하는 Claim 입니다.</p>\n<hr>\n<p>Claim은 아래와 같이 사용합니다.</p>\n<pre><code class="language-json">{\n  <span class="hljs-attr">"sub"</span>: <span class="hljs-string">"1234567890"</span>,\n  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"JunSeok Choi"</span>,\n  <span class="hljs-attr">"admin"</span>: <span class="hljs-literal">true</span>\n}\n</code></pre>\n<h2>Signature</h2>\n<p>Signature 에는 Header 와 Payload를 기반으로 생성한 서명값이 들어갑니다.</p>\n<pre><code class="language-javascript">HMACSHA256(base64UrlEncode(header) + <span class="hljs-string">"."</span> + base64UrlEncode(payload), secret)\n</code></pre>\n<h1>2. Action</h1>\n<p>jwt가 실제로 브라우저와 서버 사이에서는 아래와 같이 동작합니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/jwt/diagram.jpg" alt="image"\n    style="display:inline-block; width:100%; max-width: 800px; margin:0 auto;">\n</figure>\n<h3>1) 사용자가 id, pw를 서버로 보내 로그인을 한다.</h3>\n<h3>2) 서버에서 secret 키로 jwt 값을 만든다.</h3>\n<h3>3) 브라우저로 jwt 값을 전송한다.</h3>\n<h3>4) 브라우저에서 인증 헤더와 함께 jwt 값을 보낸다. (보낼 때 다른 값도 같이 보낼겁니다.)</h3>\n<h3>5) 서버에서 jwt Signature 값을 체크하여 데이터를 조회한다.</h3>\n<h3>6) 결과를 브라우저로 보낸다.</h3>\n<hr>\n<p>가장 고민했던 부분은 사실 토큰 탈취 시, 사용자 계정을 빼앗길지 아닐지에 대한 여부였습니다.\n사용자마자 secret 키 값이 다르면 토큰을 탈취당해도 개개인마다의 secret 키가 다르니\njwt 해시가 되지 않을 줄 알았으나, 개개인이 아닌 App 마다의 secert 키가 있는 구조여서\n기존 Session, Cookie를 사용할 때와 동일하게 토큰이 중요 이슈로 남아있게 되었습니다.</p>\n<p>하지만 서버에 있는 secert값을 유추하기 힘들기 때문에 (거의 불가능) 보안적인 측면에서\n안전할 것이라 여겨지며 기존 Session, Cookie 구조보다는 훨씬 가볍게 사용할 수 있을 것 같아\nSPA 프로젝트에서 유용할 것으로 보여집니다.</p>\n</section>\n'},XOfj:function(n,s){n.exports='<section><p>이번 포스트는 <code>첫 React 프로젝트(1)</code>에 이은 두번째 포스팅이지만 카테고리가 etc에 들어가게 되었습니다. 주제가 React 자체는 아니고... 바로 <code>Django &amp; React 서버 세팅</code> 이기 때문이죠.</p>\n<p>우선 Front의 배포는 처음이었고, Django의 배포는 두번째였지만, 익숙하지 않았습니다.</p>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/etc/server-setting/http-flow.png" alt="image" style="margin:0 auto;">\n</figure>\n<h2>1. 서버 구매</h2>\n<p>애초에 카드 등록을 하는 아마존이나 heroku와 같은 부분은 고려하지 않았기 때문에 디자이너와 협의 후 바로 서버 호스팅을 구매하기로 했습니다.</p>\n<p>예전에도 사용했었던 phpschool을 이용하기로 했고, 도메인은 일단 건너뛰기로 결정했습니다. 가상 서버 호스팅을 구매하고 기본적인 서버 세팅을 시작했습니다.</p>\n<h2>2. 서버 세팅</h2>\n<p>지난 번 구매했던 서버에서 문제는 <code>방화벽 설정</code> 이슈가 컸었습니다. 가장 먼저 방화벽을 설정했습니다. 그런데... ssh 접속 포트인 22번 포트를 allow 하지 않고(...) 방화벽 실행 &amp; 서버 닫아버림. ...ㅋ 네 접속이 안되네요 ㅋㅋㅋ</p>\n<p>새벽 1~2시에 phpschool에 글을 남겨서 <code>&quot;죄송한데... 방화벽좀 꺼주세요...&quot;</code> 글을 남기고 겨우 접속할 수 있었습니다.</p>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/etc/server-setting/ufw1.png" alt="image" style="display:inline-block; width:350px; margin:0 auto;">\n    <img src="https://jicjjang.github.io/blog/static/image/etc/server-setting/ufw2.png" alt="image" style="display:inline-block; width:350px; margin:0 auto;">\n</figure>\n<p>방화벽 뿐만 아니라 서버 실행을 위한 nginx, uwsgi 서버 라이브러리들과 React, Django 같은 프레임워크 &amp; 라이브러리들 설치하였습니다.</p>\n<h2>3. 백엔드 배포</h2>\n<p>기본적인 django, nginx, uwsgi설치를 하는데 nginx는 분명히 맞는데...! uwsgi가 계속 실행이 되지 않았습니다. 이 부분에서 제일 많이 헤맨것 같습니다.</p>\n<h3>3-1. uwsgi</h3>\n<p>결론부터 말하자면 pip로 설치하지 않고 apt-get으로 (서버는 ubuntu 환경입니다.) 설치했습니다. pip로 설치한 후 환경설정은 인터넷에 나오는 블로그 글들과 차이점들이 있었고, 자세하지 않았습니다. 그래서 pip 설치를 과감히 제거했습니다.</p>\n<p>이 부분에서 무엇이 문제인지 찾는데 2~3일은 버린 것 같습니다. apt-get으로 설치하면 /etc/uwsgi 경로가 생기며 바로 설정파일을 넣으면 적용되는 폴더와 간단히 예제까지 생기는데 pip로 설치하면 폴더도 생기지 않고, (apt-get과 마찬가지 경로의) 디렉토리 및 파일을 직접 만들어서 넣어도 적용이 되지 않았습니다. (제 경험이므로 사람마다 차이가 있을 순 있겠네요.)</p>\n<p>이 부분을 해결하다 uwsgi-emperor 기능도 찾았지만, 나중에 근본 원인을 찾은 후, 제거했고, (설정파일 하나로 여러 uwsgi 프로젝트를 컨트롤할 수 있도록 도와주는 기능입니다. 그래서 황제...!)</p>\n<p>이 부분을 해결하기위해 헤매면서 <code>/etc/rc.local</code> 파일에 설정을 직접 넣기도 했었습니다. (이 파일은 적혀있는 스크립트는 시스템 재부팅마다 실행됩니다.)</p>\n<p>그래도 결국 해결을 했고, emperor 모드를 버렸기 때문에, uwsgi 프로젝트를 추가한다고 하면 추가적인 설정이 필요하겠죠?</p>\n<h3>3-2. nginx</h3>\n<p>nginx는 간단합니다. 아래와 같은 설정 파일로 서버에 request가 들어오면 upstream에 있는 프록시로 요청을 보냅니다.</p>\n<pre><code class="language-sh"><span class="hljs-comment"># uwsgi_pass mapper</span>\nupstream django {\n<span class="hljs-comment">#       server unix:///YOUR_DJANGO_CODE_IN_SOCK_FILE_PATH/mclang.sock;</span>\n        server 127.0.0.1:1111;\n}\n\nserver {\n    listen      PORT;\n    server_name YOUR_IP <span class="hljs-comment"># substitute your machine\'s IP address</span>\n    charset     utf-8;\n\n    <span class="hljs-comment"># max upload size</span>\n    client_max_body_size 75M;   <span class="hljs-comment"># adjust to taste</span>\n\n    location /static {\n        <span class="hljs-built_in">alias</span> /PATH/collect_static;\n    }\n\n    location /uploads {\n        <span class="hljs-built_in">alias</span> /PATH/uploaded_files;\n    }\n\n    <span class="hljs-comment"># /static, /uploads 를 제외한 모든 요청은 이제 아래 설정된 django로 보내게 된다.</span>\n    location / {\n        uwsgi_pass      django;\n        include         /etc/nginx/uwsgi_params;\n    }\n}\n</code></pre>\n<p>upstream의 1111포트는 uwsgi 설정 파일에 지정한 port랑 똑같아야 합니다.</p>\n<pre><code class="language-sh"><span class="hljs-comment">#mclang.ini</span>\n[uwsgi]\n\n<span class="hljs-comment"># django 프로젝트 경로를 적어줍니다.</span>\n<span class="hljs-built_in">chdir</span>           = YOUR_DJANGO_CODE_PATH\nmodule          = mclang.wsgi\nmaster          = <span class="hljs-literal">true</span>\nplugin          = python3\n<span class="hljs-comment"># maximum number of worker processes</span>\nprocesses       = 10\n<span class="hljs-comment"># the socket (use the full path to be safe</span>\n<span class="hljs-comment"># socket          = YOUR_DJANGO_CODE_PATH/mclang.sock</span>\nsocket          = 127.0.0.1:1111\n<span class="hljs-comment"># ... with appropriate permissions - may be needed</span>\nchmod-socket    = 777\n<span class="hljs-comment"># clear environment on exit</span>\nvacuum          = <span class="hljs-literal">true</span>\nwsgi-file=YOUR_DJANGO_CODE_PATH/mclang/wsgi.py\n</code></pre>\n<p>중간에 보이는 socket 주석은 sock 파일 경로입니다. socket은 url로 해도, 파일 자체를 가리켜도 무방한데 저는 url 경로로 작업했습니다.</p>\n<h3>3-3. django 코드</h3>\n<p>django 코드를 서버로 배포하기 위해 ftp를 이용하자!</p>\n<p>는 생각따윈 버리고요... 마감이 일주일도 안남은 촉박한 타이밍이었지만! 프론트 배포 따위 생각해본 적도 없지만! 배포코드를 직접 만들어보기로 결심했습니다. python 배포 라이브러리인 <code>fabric</code>을 찾았고, 바로 시작했습니다.</p>\n<pre><code class="language-python"><span class="hljs-meta">@task</span>\n<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">backend_master_deploy</span><span class="hljs-params">()</span>:</span>\n    <span class="hljs-string">"""\n    -  Deploy all files. Include source files, image files.\n    """</span>\n    build_path = fabric_config.fabric_server_backend_project_name() + <span class="hljs-string">"_"</span> + str(datetime.now().strftime(<span class="hljs-string">"%Y%m%d%H%M"</span>))\n    server = fabric_config.fabric_server_backend_path() + <span class="hljs-string">"/"</span> + build_path\n    lnServer = fabric_config.fabric_server_backend_path() + <span class="hljs-string">"/"</span> + fabric_config.fabric_server_backend_project_name()\n\n    <span class="hljs-keyword">if</span> confirm(<span class="hljs-string">"continue master deploy?"</span>):\n        run(<span class="hljs-string">"uname -s"</span>)\n        run(<span class="hljs-string">"rm -rf "</span> + lnServer)\n        run(<span class="hljs-string">"mkdir -p "</span> + server)\n        run(<span class="hljs-string">"ln -s "</span> + server + <span class="hljs-string">" "</span> + lnServer)\n\n        _source_deploy_backend_uploader()\n\n        run(<span class="hljs-string">"rm -rf "</span> + fabric_config.fabric_server_backend_path() + <span class="hljs-string">"/mclang_conf/uploaded_files"</span>)\n        run(<span class="hljs-string">"rm -rf "</span> + server + <span class="hljs-string">"/uploaded_files"</span>)\n        _image_deploy_uploader()\n        run(<span class="hljs-string">"ln -s "</span> + fabric_config.fabric_server_backend_path() + <span class="hljs-string">"/mclang_conf/uploaded_files "</span> +\n            lnServer + <span class="hljs-string">"/uploaded_files"</span>)\n        run(<span class="hljs-string">"rm -rf "</span> + lnServer + <span class="hljs-string">"/conf/settings.py "</span> + lnServer + <span class="hljs-string">"/conf/settings.pyc"</span>)\n        run(<span class="hljs-string">"ln -s "</span> + fabric_config.fabric_server_backend_path() + <span class="hljs-string">"/mclang_conf/settings.py "</span> + lnServer + <span class="hljs-string">"/conf/settings.py"</span>)\n\n        <span class="hljs-keyword">with</span> cd(server):\n            run(<span class="hljs-string">"python3 manage.py collectstatic"</span>)\n        run(<span class="hljs-string">"service nginx restart"</span>)\n        run(<span class="hljs-string">"service uwsgi restart"</span>)\n</code></pre>\n<p>경로나 id, password는 보안 문제 + 귀찮기 때문에(...) conf파일로 따로 빼놓고, 서버와 로컬을 다르게 동작하도록 해놨습니다.</p>\n<p>또한, 이미지 배포에 매우 많은 시간을 잡아먹었습니다. (디자이너의 작품을 만드는 것이기 때문에 이미지가 매우 용량이 컸던 점을 <a href="https://jicjjang.github.io/2016/12/28/first-react-project-1/">앞 포스팅</a>{:target=&quot;_blank&quot;}에서 말씀드렸었죠)</p>\n<p>그래서 master_deploy 말고도 source_deploy, image_deploy를 따로 만들어서 배포를 했습니다.</p>\n<h2>4. 프론트엔드 배포</h2>\n<p>gulp나 grunt등을 찾아다가 문득 생각을 해보니, 어라... fabric으로 하면 안될 이유가 없잖아...? ㅋㅋㅋㅋㅋ\n바로 프론트 배포 코드도 작성했습니다.</p>\n<p>백엔드는 source + image라면 프론트엔드는 source + package install(npm install) 두 경우를 고려해야했고, package 설치가 매우 느렸기 때문에 master를 두 경우로 나눠서 다시 만들었습니다.</p>\n<pre><code class="language-python"><span class="hljs-meta">@task</span>\n<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">frontend_master_deploy</span><span class="hljs-params">()</span>:</span>\n    <span class="hljs-string">"""\n    -  React code and package Deployment.\n    """</span>\n    build_path = fabric_config.fabric_server_frontend_project_name() + <span class="hljs-string">"_"</span> + str(datetime.now().strftime(<span class="hljs-string">"%Y%m%d%H%M"</span>))\n    lnLocal = fabric_config.fabric_local_frontend_path() + <span class="hljs-string">"/"</span> + fabric_config.fabric_local_frontend_project_name()\n    server = fabric_config.fabric_server_frontend_path() + <span class="hljs-string">"/"</span> + build_path\n    lnServer = fabric_config.fabric_server_frontend_path() + <span class="hljs-string">"/"</span> + fabric_config.fabric_server_frontend_project_name()\n\n    <span class="hljs-keyword">if</span> confirm(<span class="hljs-string">"continue front code deploy?"</span>):\n        local(<span class="hljs-string">"rm -rf "</span> + lnLocal + <span class="hljs-string">"/build"</span>)\n        <span class="hljs-keyword">with</span> lcd(lnLocal):\n            local(<span class="hljs-string">"npm run build"</span>)\n        run(<span class="hljs-string">"uname -s"</span>)\n        run(<span class="hljs-string">"rm -rf "</span> + lnServer)\n        run(<span class="hljs-string">"mkdir -p "</span> + server)\n        run(<span class="hljs-string">"ln -s "</span> + server + <span class="hljs-string">" "</span> + lnServer)\n        _source_deploy_frontend_uploader()\n\n        run(<span class="hljs-string">"rm -rf "</span> + fabric_config.fabric_server_frontend_path() + <span class="hljs-string">"/mclang_conf/node_modules "</span> +\n            fabric_config.fabric_server_frontend_path() + <span class="hljs-string">"/mclang_conf/package.json"</span>)\n        _package_deploy_uploader()\n        <span class="hljs-keyword">with</span> cd(fabric_config.fabric_server_frontend_path() + <span class="hljs-string">"/mclang_conf"</span>):\n            run(<span class="hljs-string">"npm install --production"</span>)\n        run(<span class="hljs-string">"ln -s "</span> + fabric_config.fabric_server_frontend_path() + <span class="hljs-string">"/mclang_conf/node_modules "</span> +\n            lnServer + <span class="hljs-string">"/node_modules"</span>)\n        run(<span class="hljs-string">"service nginx restart"</span>)\n</code></pre>\n<hr>\n<p>이렇게 설정과 배포를 끝마치고 개발을 끝내게 되었죠.</p>\n<p>사실 끝은 아닙니다... 디자이너가 전시회를 하는 동안 발생하는 오류와 트래픽 (이미지 덕분에 걱정이...) 주시를 시작했지만 어느 정도 안정됨을 확인하고 끝내게 되었죠.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/server-setting/error_log.png" alt="image" style="display:inline-block; width:350px; margin:0 auto;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/server-setting/traffic_log.png" alt="image" style="display:inline-block; width:350px; margin:0 auto; vertical-align:top;">\n</figure>\n<p>안정적인 error_log와 전시 DP일, 시작일 등에 트래픽이 몰린 모습입니다. (트래픽은 대부분 이미지...)</p>\n<hr>\n<p>진짜로 끝입니다. 다 쓰고보니 React가 중점이 아닌 배포와 세팅이 주가 된 이야기였네요 ㅠㅠ... (시간은 프론트엔드 개발이 훠얼씬 들어갔습니다.)</p>\n<p>어쨌든! 힘겹게 개발과 세팅을 마쳤습니다. 디자이너와의 일정, 개발, 회의 등등... 하지만 일을하면서 하는 프로젝트는 엄청난 뿌듯함이!!! 언제든 시간이 된다면 환영하며 프로젝트를 다시 하고 싶어요 :D</p>\n<p>이렇게 11월 2일 ~ 12월 11일 까지의 프로젝트 경험기를 마무리하도록 하겠습니다. 긴 글 읽어주셔서 감사합니다.</p>\n</section>\n'},XxRy:function(n,s){n.exports='<section><h3>!!! 이 글은 사내 메신저인 Dooray에서 활용할 bot scheduler에 대한 소개로, 비정상적인 경로로의 접근은 하지 말아주시기 바랍니다. !!!</h3>\n<hr>\n<p>사내 메신저인 Dooray의 메뉴봇과 스케쥴러를 만들어서 공유드립니다.\n(매주 메뉴 이미지 1번을 넣어야 되는 귀찮음을 제외하고는 정말 편합니다.)</p>\n<hr>\n<p>사실 <code>&quot;git repository를 드리고 끝!! README를 보세요!!&quot;</code> 할 수 있지만, 설정하는 방법이 조금... 까다롭습니다.\n그래서 <code>README</code>를 어떻게 정리하면서 생각해보면서 내용을 공유해보고자 작성하게 되었습니다.</p>\n<h1>1. <a href="https://github.com/jicjjang/DoorayHookerFront">Dooray Hooker Front</a></h1>\n<h2>1-1. 설정 파일</h2>\n<p>Front 페이지로, vue를 사용해 만들었습니다. 딱히 서비스를 할 생각 없이 개인 자리에서 돌리는 서비스이기 때문에</p>\n<pre><code class="language-bash">$ git <span class="hljs-built_in">clone</span> https://github.com/jicjjang/DoorayHookerFront\n$ <span class="hljs-built_in">cd</span> DoorayHookerFront\n$ npm install\n$ npm run dev\n</code></pre>\n<p>명령어로 간단하게 npm을 설치하고 서버를 띄워줍니다.\n그러면 바로</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/dooray/scheduleFront/error1.png" alt="image" style="display:inline-block; width:80%; margin:0 auto;">\n</figure>\n<p>이런 에러가 발생합니다. 에러 내용대로 <code>src/config.js</code> 파일을 만들어줍니다. 이 때 참고해야 할 <code>ex.config.js</code> 파일이 있습니다.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> FIREBASE_URL = <span class="hljs-string">\'FIREBASE_URL\'</span>\n</code></pre>\n<p>firebase url은 스케쥴러가 돌면서 메세지를 보낼 데이터를 저장하기 위해 사용됩니다.</p>\n<h2>1-2. firebase 설정</h2>\n<p>우선 <a href="https://firebase.google.com/">https://firebase.google.com/</a> 로 이동합니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/dooray/scheduleFront/firebase/setting1.png" alt="image" style="display:inline-block; width:80%; margin:0 auto;">\n</figure>\n<p>로그인 후, 오른쪽 상단의 <code>&quot;콘솔로 이동&quot;</code> 버튼을 이용해 콘솔로 들어갑니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/dooray/scheduleFront/firebase/setting2.png" alt="image" style="display:inline-block; width:80%; margin:0 auto;">\n</figure>\n<p>콘솔로 이동하시면 프로젝트들이 나옵니다. 여기서 프로젝트를 하나 추가해줍니다.\n빈칸을 채워 앱을 만들면 아래 이미지와 같은 화면이 뜨는데, 이 동그란 세개의 버튼은 firebase로 서버 자체를 대체하는 앱을 만들 때 사용합니다.\n하지만 저희는 DB만 사용할 예정이니 신경쓰지 마시고, 왼쪽 리스트 중 <code>&quot;Database&quot;</code>를 선택합니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/dooray/scheduleFront/firebase/setting3.png" alt="image" style="display:inline-block; width:80%; margin:0 auto;">\n</figure>\n<p>먼저 <code>&quot;Database&quot;</code>의 Rule을 정해봅시다. 이 DB에 접근할 수 있는 권한을 부여한다면, 접근할 수 있는 인증이 필요합니다.\n현재는 인증에 대한 기능은 없기 때문에 read, write를 true로 줬습니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/dooray/scheduleFront/firebase/setting4.png" alt="image" style="display:inline-block; width:80%; max-width:500px; margin:0 auto;">\n</figure>\n<p>이제 마지막으로 <code>&quot;데이터&quot;</code> 탭으로 갑니다. 이 부분에 url이 있습니다. <code>https://xxxxxxx.firebaseio.com</code> 과 같은 url을 복사합니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/dooray/scheduleFront/firebase/setting5.png" alt="image" style="display:inline-block; width:80% ;max-width:500px; margin:0 auto;">\n</figure>\n<p>그리고 우리의 목표인 src/config.js 파일을 채웁니다.</p>\n<pre><code class="language-javascript"><span class="hljs-comment">// ~~~.com/ 과 같이 제일 마지막에 \'/\' 는 포함시키지 마세요.</span>\n<span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> FIREBASE_URL = <span class="hljs-string">\'https://xxxxxxx.firebaseio.com\'</span>\n</code></pre>\n<h2>1-3. 사용 방법</h2>\n<p>처음 실행해주셨던</p>\n<pre><code class="language-bash">$ npm run dev\n</code></pre>\n<p>명령어를 다시 실행합니다. (서버를 끄지 않으셨다면 자동으로 리프레시가 되어있을 겁니다.)\n그러면 아래와 같은 화면에 Scheduler List만 없이 나올것입니다. 이제 스케쥴을 등록해주시면 됩니다!</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/dooray/scheduleFront/front1.png" alt="image" style="display:inline-block; width:80%; margin:0 auto;">\n</figure>\n<h3>1-3-1. ID</h3>\n<p>봇에 관심을 두셨던 분들이라면 다 알만한 내용입니다.\n봇으로 메세지를 보내려면 채팅방의 id가 필요하겠죠??</p>\n<p>아래 이미지처럼 <a href="https://nhnent.dooray.com">두레이</a> 사이트에서 설정 탭으로 들어갑니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/dooray/scheduleFront/dooray1.png" alt="image" style="display:inline-block; width:80%; max-width:500px; margin:0 auto;">\n</figure>\n<p>그리고 <code>&quot;서비스 연동&quot;</code>에서 서비스를 추가합니다. 추가 후 나오는 url을 복사해야 하는데, 이 url이 바로 ID가 됩니다!</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/dooray/scheduleFront/dooray2.png" alt="image" style="display:inline-block; width:80%; max-width:500px; margin:0 auto;">\n</figure>\n<h3>1-4. 사용</h3>\n<p>1-3-1 에서 구한 ID (url)를 <code>Add Scheduler</code>의 ID에 입력해줍니다. 나머지는 원하시는대로 빈칸을 채워주시면 됩니다. (등록된 스케쥴을 클릭하여 수정 및 삭제 가능합니다.)</p>\n<p><code>Description</code>: 메세지 보낼 때 사용되지는 않습니다. Scheduler List를 공유하는 인원들이 알아볼 수 있도록 쓰는 설명입니다.\n<code>Hook Type</code>: 메세지와 메뉴를 선택할 수 있습니다. 메뉴 선택 시 점심과 저녁을 추가적으로 고를 수 있습니다.\n<code>Image Url</code>: 봇의 이미지입니다. (직접 업로드는 불가능합니다 ㅠㅠ)\n<code>Hook Time</code>: 메세지를 보낼 시간입니다. <code>&quot;24:00&quot;</code>과 같이 입력해주세요. (아래에서 설명드릴 서버 코드를 확인해주시면 19:00 이후 ~ 익일 10:00 까지는 퇴근 시간으로 제외되어 있습니다.)\n<code>Hook Term</code>: 특정 시간마다 반복되는 동작을 할 수 있습니다. (5분 간격, 10분 간격...)\n<code>Bot Name</code>: 봇의 이름입니다.\n<code>Bot Text</code>: 봇의 메세지 내용입니다. (Hook Type을 메뉴로 하셔도 메세지가 보내집니다.)</p>\n<hr>\n<p>쓰다보니 내용이 길어졌네요... 이제 봇을 만들고 관리하는 Front 페이지에 대한 설명이 끝났습니다.\n서버에 대한 내용은 다른 게시물에 따로 게시하겠습니다.</p>\n<p>감사합니다.</p>\n</section>\n'},YQ9w:function(n,s){n.exports='<section><p>뜬금없지만 이번 7월 16일 부터 7월 19일까지 일본 여행을 가게 되었습니다. 물론 이미 잘 다녀온 여행이고 즐거웠습니다.\n그런데 여행 도중 갑자기 이용중인 서버 호스팅 사이트로부터 문자를 받게 되었습니다.</p>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/etc/malware/message.png" alt="image" />\n</figure>\n<p><code>초과금 과금예정</code> 이란 단어에 스트레스가 쫘아악 올라가더군요;;;</p>\n<p>여행 도중이었기 때문에 바로 서버를 꺼주고 여행이 끝난 뒤 어떤 공격을 받은건지 확인을 했습니다.</p>\n<p>먼저 서버 호스팅의 트래픽 사용량과 로그를 확인해보았습니다.</p>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/etc/malware/traffic1.png" alt="image" />\n</figure>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/etc/malware/traffic2.png" alt="image" />\n</figure>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/etc/malware/traffic3.png" alt="image" />\n</figure>\n<p>... 눈물이 앞을 가립니다...</p>\n<p>...서버를 켜주고 (트래픽 차단을 해제하지 않아도 서버만 켜주면 사이트가 들어가지더군요...) coda 프로그램을 이용해 access.log 파일과 error.log 파일을 받았습니다.</p>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/etc/malware/log1.png" alt="image" />\n</figure>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/etc/malware/log2.png" alt="image" />\n</figure>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/etc/malware/log3.png" alt="image" />\n</figure>\n<pre><code>&quot;x00_-gawa.sa.pilipinas.2015&quot;\n&quot;http://google.com/search?q=2+guys+1+horse&quot;\n&quot;/Ringing.at.your.dorbell!&quot;\n</code></pre>\n<p>위 사진에서 뿐만 아니라 많은 로그들이 있었으나, 3개의 문장들이 많은 반복이 있었으므로 3개의 문장들을 기준으로 구글링을 해봤습니다.</p>\n<p><a href="http://www.skepticism.us/2015/05/13/">shellshock attack</a> 라는 malware였습니다. (해결 방법까지 제공!)</p>\n<p>ps. 현재 사이트를 운영중인게 아니라 큰 조치를 취할 필요는 없었습니다.\nphpschool 호스팅을 쓰면서 무료로 제공하는 Dnszi에서, 유료면서 동일 IP에 대한 반복적인 리퀘스트를 제한해준다고 추천받은 Dnsever로 (유료지만..ㅠㅠ)\nDNS를 옮기는게 제가 취한 조치였습니다.</p>\n<hr>\n<p>여행 도중이란 상황에 많이 당황하고, 아무것도 없는 빈 사이트, 서버에 이런 공격이 오리라곤 생각도 못하고 있었기에 두번 세번 당황했습니다.</p>\n<p>일이 터지기 전에 미리 조심해야 함을 다시 깨닫게 되는 여행이었고, 빈 사이트가 오히려 더 위험하다는걸 깨닫게 되었습니다.</p>\n</section>\n'},"Yoa/":function(n,s){n.exports='<section><h2>Dependencies</h2>\n<p>Themes are written using Sass to keep things modular and reduce the need for repeated selectors across files. Make sure that you have the reveal.js development environment including the Grunt dependencies installed before proceeding: https://github.com/hakimel/reveal.js#full-setup</p>\n<h2>Creating a Theme</h2>\n<p>To create your own theme, start by duplicating a <code>.scss</code> file in <a href="https://github.com/hakimel/reveal.js/blob/master/css/theme/source">/css/theme/source</a>. It will be automatically compiled by Grunt from Sass to CSS (see the <a href="https://github.com/hakimel/reveal.js/blob/master/Gruntfile.js">Gruntfile</a>) when you run <code>grunt css-themes</code>.</p>\n<p>Each theme file does four things in the following order:</p>\n<ol>\n<li>\n<p><strong>Include <a href="https://github.com/hakimel/reveal.js/blob/master/css/theme/template/mixins.scss">/css/theme/template/mixins.scss</a></strong>\nShared utility functions.</p>\n</li>\n<li>\n<p><strong>Include <a href="https://github.com/hakimel/reveal.js/blob/master/css/theme/template/settings.scss">/css/theme/template/settings.scss</a></strong>\nDeclares a set of custom variables that the template file (step 4) expects. Can be overridden in step 3.</p>\n</li>\n<li>\n<p><strong>Override</strong>\nThis is where you override the default theme. Either by specifying variables (see <a href="https://github.com/hakimel/reveal.js/blob/master/css/theme/template/settings.scss">settings.scss</a> for reference) or by adding any selectors and styles you please.</p>\n</li>\n<li>\n<p><strong>Include <a href="https://github.com/hakimel/reveal.js/blob/master/css/theme/template/theme.scss">/css/theme/template/theme.scss</a></strong>\nThe template theme file which will generate final CSS output based on the currently defined variables.</p>\n</li>\n</ol>\n</section>\n'},ZN23:function(n,s){n.exports='<section><p>이번 포스트에서는 <code>자바스크립트의 동기를 위한 promise와 async</code> 를 알아보겠습니다.</p>\n<p>보통 동기화를 위해서 많이 쓰는 방법은 <code>setTimeout</code> 입니다.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> a = somethingFunction();\n\n<span class="hljs-keyword">var</span> b = <span class="hljs-literal">null</span>;\nsetTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n  b = somethingAnotherFunction();\n}, <span class="hljs-number">0</span>);\n</code></pre>\n<p>위와같은 방식을 이용하여 sync를 맞출 수 있었습니다. 편법이긴 하지만 promise나 async (제가 웹을 코딩하기도 이전에 나온 기능들이지만 ㅠㅠ)들이 나오기 전에는 으례 이 방식을 사용했다고 많이 들어왔습니다.</p>\n<p>이제는 이 방식을 벗어나기 위해 sync를 맞추기 위한 promise, async, setTimeout 세 기능들에 대해 알아보겠습니다.</p>\n<h3>1. setTimeout</h3>\n<pre><code class="language-javascript"><span class="hljs-comment">// setTimeout</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testSetTimeout</span>(<span class="hljs-params">callback</span>) </span>{\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"1. Before callback"</span>);\n  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"2. callback function"</span>);\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">"function"</span>) {\n      callback();\n    } <span class="hljs-keyword">else</span> {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"   Callback is not func!"</span>);\n    }\n  }, <span class="hljs-number">3000</span>);\n  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"3. After callback"</span>);\n}\n\n(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runA</span>(<span class="hljs-params"></span>) </span>{\n  testSetTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"   Call about setTimeout callback func!!"</span>);\n  });\n})();\n</code></pre>\n<p>callback함수를 포함해 testSetTimeout 함수를 호출합니다. 함수 내부의\nsetTimeout에서 3000ms를 기다리는 동안 계속 다음 명령어가 실행되므로 <code>3. After callback</code>이\n찍힐 수밖에 없습니다.</p>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/javascript/promise/settimeout.png" alt="image" style="width:50%; margin:0 auto;">\n</figure>\n<p>(<code>1. Before callback</code>, <code>3. After callback</code> 이후에 <code>2. callback function</code>, <code>Call about setTimeout callback func!!</code> 가 찍히는 모습.)</p>\n<h3>2. Promise</h3>\n<pre><code class="language-javascript"><span class="hljs-comment">// Promise</span>\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPromise</span>(<span class="hljs-params">callback</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">resolve, reject</span>) </span>{\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">"function"</span>) {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"1. callback is function."</span>);\n      setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n        resolve(callback);\n      }, <span class="hljs-number">2000</span>);\n    } <span class="hljs-keyword">else</span> {\n      reject(<span class="hljs-string">"2. callback is not a function."</span>);\n    }\n  });\n}\n\n(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runA</span>(<span class="hljs-params"></span>) </span>{\n  testPromise(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"2. callback function!"</span>);\n  }).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">callback</span>) </span>{\n    callback();\n  }).then(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>{\n    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"3. callback is done."</span>);\n  }).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">reason</span>) </span>{\n    <span class="hljs-built_in">console</span>.error(reason);\n  });\n})();\n</code></pre>\n<p>callback함수를 포함해 testPromise를 호출하고, callback이 함수면 2000ms 뒤에 resolve()로 callback 파라미터를 포함해 다음 함수 (then)을 실행합니다. promise로 물려있는 then 함수들이 순서대로 실행됩니다. (reject 발생 시 catch로 들어갑니다.)</p>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/javascript/promise/promise.png" alt="image" style="width:50%; margin:0 auto;">\n</figure>\n<p>(바로 <code>1. callback is function.</code> 이 실행되고 2초뒤에 <code>2. callback function!</code> 과 <code>3. callback is done</code> 이 실행되는 모습.)</p>\n<h3>3. async</h3>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testPromise</span>(<span class="hljs-params">callback</span>) </span>{\n  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">"function"</span>) {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"1. callback is function."</span>);\n      setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n        resolve(callback);\n      }, <span class="hljs-number">2000</span>);\n    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">"number"</span>) {\n      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"1. callback number is "</span> + callback);\n      setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n        resolve(callback);\n      }, <span class="hljs-number">2000</span>);\n    } <span class="hljs-keyword">else</span> {\n      reject(<span class="hljs-string">"1. callback is not a function, number"</span>);\n    }\n  });\n}\n\n<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">testAsync</span>(<span class="hljs-params">x</span>) </span>{\n  <span class="hljs-keyword">var</span> a = testPromise(<span class="hljs-number">20</span>)\n  <span class="hljs-keyword">var</span> b = testPromise(<span class="hljs-number">30</span>)\n\n  <span class="hljs-keyword">return</span> x + <span class="hljs-keyword">await</span> a + <span class="hljs-keyword">await</span> b\n}\n\ntestAsync(<span class="hljs-number">50</span>).then(<span class="hljs-function"><span class="hljs-params">result</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(result))\n</code></pre>\n<p>우선 이 함수를 실행시켜볼 때 까지 몰랐던 것이... 크롬에서 ES6를 이미 지원해서 바로 실행된다는 것입니다...\n위 promise 예제에서 썼던 promise 생성 부분을 확장시켜, number 값이 들어오면 그 값을 보여주고 callback으로 넘겨주도록 만들어놓고 async 함수로 사용을 해봅니다.</p>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/javascript/promise/async.png" alt="image" style="margin:0 auto;">\n</figure>\n<p>위와 같은 결과가 나옵니다. a, b에는 거의 동시에 promise로 들어가기에 <code>1. callback number is ~~</code> 가 두번 찍히게 되고, return 값에 있는 await에 해당하는 a와 b가 모두 할 일(promise의 2000ms)을 기다렸다가 끝나면 return을 하게됩니다.</p>\n<hr>\n<p>매우 간단한 것들이지만 setTimeout과는 다르게 promise와 async는 명확히 앞서 하던 일들이 끝나면 다음 일을 할 수 있도록 명시해줍니다. 이 차이 때문에라도 setTimeout을 사용하는 일은 그만해야 할 것입니다.</p>\n<p><strong>이번 회사 프로젝트를 하면서 Promise가 IE11에서도 먹히지 않는 모습을 보았습니다. 브라우저 호환성을 위해서 IE에서는 promise polyfill이나 async polyfill을 사용해야 합니다. async 또한 모든 브라우저에서 현재 ES6를 지원하는 것이 아니기 때문에 조심해서 사용해야 합니다.</strong></p>\n<p>오늘 포스팅은 여기서 마무리하겠습니다. 감사합니다.</p>\n</section>\n'},d6Cz:function(n,s){n.exports='<section><p>개발 블로그지만 일상에 대한 얘기를 간간히 올려보기 위한 life 카테고리를 생성했습니다.\n오늘은 얼마전에 출전했던 서울시 공공앱 공모전에 대해 얘기해보려 합니다.\n억울 한 마음에 이런 글을 쓰는 것도 있겠지만 노력에 대한 정당한 평가를 받지 못했다고 생각이 됐기 입니다.</p>\n<hr>\n<p>지난주 월요일... 제출했던 <a href="https://jicjjang.github.io/blog/post/seoul-app-contest-with-node-and-react-native">서울시 앱 공모전</a>\n에 대한 결과를 메일로 받았습니다. 결과는 <code>예선 당선</code>. 본선엔 나가지 못하고 예선으로 끝났습니다.\n하지만 지속적으로 서버 로그와 디비 로그를 살펴보고 있던 저희팀에겐 궁금증이 많았죠. ^^</p>\n<p>우선, 15년도에 진행했던 서울시 앱 공모전도 디비에 심사위원으로 추정되는 계정이 하나 생성되어 있었습니다.\n(사실 심사위원인지는 모릅니다. 하지만 팀원들은 아무에게도 앱을 배포하지 않았고,\n앱에는 팀원들이 만들지 않은 계정이 하나 덩그러이 있었습니다.)\n서울시에 놀러오는 외국인들을 위해 지하철 역을 기준으로 가이드를 매칭해주는 시스템을 개발했었으나,\n더미데이터를 하나도 넣지 않아서 가이드를 해주는 사람의 정보가 아무것도 없었기에, 지하철 역을 눌러도 아무런\n데이터가 나오지 않아서 충분히 오해할 소지가 있었습니다. 그렇기 때문에 우리는 우리가 잘못(?)\n생각했다는 것을 깨닫고 씁쓸해 할 뿐이었습니다.</p>\n<p>그렇게 2년이 지나 공모전에 다시 한 번 참여했으나 결과는 달라지지 않았습니다.\n15년도와 비슷하게 사용자가 데이터를 올리고, 다른 사용자의 참여가 있어야 활발해지는 형식의\n어플을 만들었습니다. 이전과는 조금 다르게, 예를 들면 <code>인스타의 맥주 버전</code> 일 것입니다. 물론 15년도 처럼\n실수(?)를 하지 않기 위해 더미데이터 또한 충분히 넣어놓았죠. 그런데 5명의 심사위원(으로 추정되는 계정.\n이번에도 팀원들은 그 누구에도 앱에 대해 알려주지 않았으며, 팀원들 또한 아닌)으로 추정되는 계정 중에\n피드를 올린 계정은 단 하나도 없었습니다. 제일 많이 다른 탭으로 이동한 계정이 3~4번 탭을 터치한 것이\n최대한이었습니다.</p>\n<p>결과를 떠나 정말 궁금한 것이, 얼마나 심사할 대상이 많았기에 이렇게 보신 것일까?</p>\n<p>담당자 분께 메일을 보냈습니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/life/seouldrinker/mail1.png" alt="image" style="display:inline-block; width:100%; margin:0 auto;">\n</figure>\n<p>메일을 보시지 않아 다시 한 번 메일을 보냈습니다. ^^;</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/life/seouldrinker/mail2.png" alt="image" style="display:inline-block; width:100%; margin:0 auto;">\n</figure>\n<p>답장이 와서 읽는 도중 전화가 왔습니다. 담당자 분께서 해주시는 설명은</p>\n<p>1.점수는 공개하지 않는다. (처음에 왜 공개하지 않나 했는데 결국 물어볼까봐 그런 건가 라는 생각이...)\n2.외부 주관사가 평가한다.\n3.<code>창의성</code> 이 부족한 앱이었다.</p>\n<p>제가 말씀드린 내용은</p>\n<p>1.네;; 당황스럽지만 <code>창의성</code>... 네...\n2.그럼 왜 피드를 아무것도 안올려주시느냐... 한번도 아니고...\n3.외부 주관사가 하는 것이라면 직접 하신것은 아니겠지만, 담당자라면 책임이 있지 않느냐.</p>\n<p>(나중에 찾아보니 담당자 분이 가입한 로그도 있었습니다. 물론 피드는 없었네요...)</p>\n<p>이런 저런 얘기를 하다 전화를 끊었습니다. 답답한 마음에 대한 한풀이였죠.</p>\n<p>그리고 더 답답한 마음에 얘기해보자면 <code>창의성</code>... 이거... 네 저희 앱이 창의성이 부족하다고 할 수 있습니다.\n그런데 15년부터 올해까지, 나와있는 수상 목록을 보면 같은 주제에 대한 아이디어들이 한두개가 아닌데\n하나도 없는 <code>맥주</code>에 대한 저희 앱은 <code>창의성</code> 부족...</p>\n<hr>\n<p>답답한 마음에 서울 공공앱 공모전에 대해 현재까지 있었던 내용의 글을 썼지만\n바뀌는게 없을 것 같다는 생각이 듭니다.</p>\n<p>하지만 스스로의 일에 무책임하고 부주의한 결과로\n누군가 피해를 본다는 점은 아셨으면 하는 마음에 이런 글을 씁니다.</p>\n</section>\n'},fV5o:function(n,s){n.exports='<section><p>오늘은 <code>[2018 IT 트렌트 스페셜 리포트]</code> 도서에 대한 리뷰를 진행해보려 합니다.\n한빛미디어에서 진행하는 두번째 IT관련 도서 리뷰인데요! 평소에 개발서적만 읽었지\n개발 트렌트에 대한 생각은 해본적이 없었기 때문에 뭔가 신선하네요.</p>\n<hr>\n<p>이 책은 세계적 IT 자문기관인 <a href="https://www.gartner.com">가트너</a>가\n가트너 심포지엄·IT 엑스포 2017에서 발표한 <code>2018년 이후 주목해야 할 10대 전망</code>을 중점으로 두지만,\n회사인 만큼 자기업의 이익이 되도록 트랜드를 바꾸기 때문에 몇몇 주제를 바꿔가며 분석한 내용들 입니다.</p>\n<p>처음부터 많은 관심이 있는 책은 아니었지만, 요즘 비트코인에 열중하고 있기 때문에 (이놈의 똥손...)\n블록체인에 대한 내용은 제 시선을 끌기에 충분했습니다. 게다가 책을 한참 보다보니 금용권 직장인과 같이\n현 세상 물정에 밝아야 하는 직업에 특히 어울리는 책이라 생각합니다.</p>\n<p>관심있는 파트를 위주로 한번 정리해보겠습니다.</p>\n<h2>1.인공지능 시대</h2>\n<p>조지아 대학에서의 질문에 답변하는 챗봇을 사용한 내용이 정말 시선을 붙잡았습니다. 프로젝트에서 머신러닝도\n진행해보고, 핀테크 관련 개인 프로젝트도 진행해 보았으나 실직적인 데이터를 얻기란 정말 힘든 법이니까요.\n또한 직업적으로 사람이 밀린다거나, 기술적으로 AI가 도입되기만 하면 된다! 하기에는\nIT 생태계의 발전 상승곡선이 직선으로 올라가고 있는 것이 아니기 때문에 책의 내용대로\n아직 멀었다고 생각합니다. 또한 미래에도 항상 AI가 할 수 없어서\n대체되는 직업이나 기술이 있을 것이라 생각합니다.</p>\n<h2>2.블록체인, 핀테크를 넘어서</h2>\n<p>이 부분에 대해서는 요즘 핫이슈죠. 책의 내용과는 조금 떨어져 있지만, 정부의 규제는\n조금 엇나갔다는 생각이 듭니다. 문제가 있으면 고쳐야하는데 고치다 보면 발전이 늦어질 것 같다.\n그러니 일단 세금을 물리자. 라는 생각밖에 들지 않습니다.</p>\n<p>다시 돌아와서... 책의 내용은 다양해지고 범용적으로 사용될 <code>블록체인</code> 기술에 대해서 설명이 되어있습니다.\n금융권에서야 이미 충분히 핫해졌지만 비금융권 또한 메신저, 채팅, p2p 등의 기술에 충분히 접목될 수 있는\n요소들이 있죠. 이 책은 그런 부분에 대한 전망과 접속될 요소, 위험성 등에 충분히 설명을 해주고 있습니다.</p>\n<h2>4.챗봇, 웹과 앱을 넘어서</h2>\n<p>개인적으로 이 부분은 조금 공감하기 힘들었습니다. 웹 개발자로써 웹과 앱으로 부족한 부분을 챗봇으로\n채운다는 내용이 있었는데 이게 가능한지 의문이긴 합니다. 비교할 영역이 조금 다른 것 같습니다.\n인공지능이나 블록체인은 한 해를 넘어서 시대를 아우를 기술이라 생각하지만 챗봇에 대한 내용이 나오며\n조금 규모가 작아지지 않았나 하는 생각도 들었습니다. 물론 웹이나 앱과 같은 경우에 대해선\n사용법을 알려주기 위한 튜토리얼이 필요한 경우가 있는데, 이런 것에 대해선 챗봇이\n훌륭한 역할을 할 것이라 여겨집니다.</p>\n<h2>7.인공지능 비서 서비스, 차세대 플랫폼 전쟁</h2>\n<p>이 아이디어는 정말 괜찮은 것 같습니다. 이미 트렌드이며, 꽤 오랫동안 트랜드일 것인데요. 하지만 가장 큰\n이슈이며, 해결하기 힘든 부분이 있습니다. 음성에 대해 지문처럼 id값을 가져야 하지 않느냐 하는 점인데,\n예를 들어 <a href="https://1boon.kakao.com/5minute_lab/59ac1cf46a8e5100011218ae">버거킹에서 구글을 해킹한 사건입니다.</a>\n이러한 일이 타 음성비서 서비스에서 나타나지 않으리란 법이 없기 때문입니다. 심지어 이 당시에\n버거킹에서는 구글이 내놓을 대응책을 미리 예견하고 그 다음 해킹까지 준비했다고 합니다.</p>\n<p>이 책이 시사하는 점은 분명 트랜드들에 대한 문젯거리나 이슈를 해결하기 위한 방법들이 아닌 당장 사람들의\n관심을 끄는 아이디어들 입니다. 4번에서 제가 느꼈다는 <code>시대를 아루를 기술이 아니다</code> 라는 것처럼\n어떤 기술은 누군가를 사로잡고, 어떤 기술은 누군가 흥미 없게 느낄 것입니다. 이러한 기술들이 모두 모여\n고루 사람들에게 있어 발전을 주는 것이고 진보할 수 있게 해주는 것이라 생각합니다.</p>\n<hr>\n<p>제 의견이 많이 들어간 리뷰였지만, 책이 알려주는 점들에 대해 모르는 부분이 많이 담겨있었고,\n트랜드라는 제목이 어울릴만한 책이었다는 점입니다. 책을 받고 처음 펼쳤던 때와 달리 책을 덮으며 느낀 점은\n생각보다 얻어가는게 많았다는 점입니다.</p>\n<p>감사합니다.</p>\n</section>\n'},gCqr:function(n,s){n.exports='<section><p>오늘은 <code>[You don\'t know js]</code> 도서에 대한 리뷰를 진행해보려 합니다.\n책을 읽고 내용을 정리한 적은 있지만 책에 대한 리뷰를 해본적은 없는 것 같은데\n한빛미디어에서 진행하는 <code>[나는 리뷰어다!]</code> 이벤트를 통해 책을 받아보고 리뷰를 진행을 하려 합니다.\n(사실 원래 사려고 했던 서적...)</p>\n<p>사실 이 리뷰는 7월 중순까지 진행해야 하던 이벤트였습니다... (제가 메일을 정확히 확이 못한 탓이죠...\n#한빛미디어 죄송합니다 ㅠㅠ)\n하지만 책을 다 읽고 리뷰를 진행하고 싶었고, 두껍지않은 2~300장 내외의 책이었지만 일과 병행하며 읽기에\n쉽게 읽히는 책은 아니였습니다. (제가 게이른 탓이겠죠...)</p>\n<p>한장 한장을 넘겨가며 깊게 고민해야 하는 부분이 대다수였던 책으로 분명 초보자를 위한 책은 아니었습니다.</p>\n<hr>\n<p>잡설은 제외하고 책을 읽어본 것에 대한 느낌과 중요하다 생각되는 부분에 대한\n간략한 정리로 리뷰를 진행해보려 합니다.</p>\n<h2>Chap 4. 강제 변환</h2>\n<p>엥? 1번은 어디가고 4번부터...</p>\n<p>이 책은 부제는 <code>타입과 문법, 스코프와 클로저</code> 입니다. Chap1 부터 문법이 나옴에도 불구하고\n타입이라는 말이 첫 머리부터 오는데 이유가 있습니다. (제가 갖다 붙인걸수도 있겠네요)</p>\n<p>물론 다른 챕터에서도 중요한 부분이 많지만, 간단한 정리와 ES6에 대한 설명들, ES6가 들어오면서\n기존에 쓰던 부분이 어떻게 보강이 되는지에 대한 설명이 대다수이고, 강제 변환만큼 중요한 챕터는 없었습니다.</p>\n<p>모든 챕터 중에 가장 많은 페이지를 차지하고, 저자가 중요하게 생각한다는게 느껴지는 부분입니다.\n이 챕터를 읽으면서 저는 아직 중급자가 되기엔 멀었으며, 그저 자바스크립트의 겉을 핥고있는 너드라는걸\n깨달았습니다. (주륵... ㅠㅠ)</p>\n<p>명시적 형변환과 암시적 형변환에 대해 깊은 부분까지 파고드는데 형변환의 정의인\nToNumber, ToString, ToPrimitive가 어떤 상황에서 어떤 원리로 적용되는지에 대해 <code>매우</code> 자세하게\n나와있습니다. (이렇게까지 해야 초급을 벗어날 수 있구나 라는걸 확실히 깨달을 정도로 DEEP하게!)</p>\n<pre><code class="language-javascript"><span class="hljs-comment">// 형변환 시 특이한 값이 나오는 경우</span>\n<span class="hljs-built_in">Number</span>([]); <span class="hljs-comment">// 0</span>\n<span class="hljs-built_in">Number</span>([<span class="hljs-string">\'test\'</span>]); <span class="hljs-comment">// NaN</span>\n\n<span class="hljs-comment">// falsy</span>\n!!<span class="hljs-literal">undefined</span>\n!!<span class="hljs-literal">null</span>\n!!<span class="hljs-number">0</span>\n!!<span class="hljs-literal">NaN</span>\n!!<span class="hljs-string">""</span>\n\n<span class="hljs-comment">// truthly</span>\n<span class="hljs-comment">// 0이 아닌 모든 숫자와 문자열</span>\n</code></pre>\n<p>우리가 true/false로 알았던 값들이 사실은 완전한 true/false가 아닌 truthly/falsy였다는 것이\n꽤나 신기했습니다. 그 전까지는 아무 생각없이 <code>\'아 이렇게 하면 false가 나왔지?? true가 나왔지??\'</code>\n하며 사용했던 부분을 다시 한 번 사용하면서 쓰게 되더군요.</p>\n<h2>Chap 5. 문법</h2>\n<p>가장 멘붕이 왔던 부분! <code>[] + {} / {} + []</code> 였습니다. <code>[] + {}</code>의 결과는 &quot;[object Object]&quot;\n이며, <code>{} + []</code>의 결과는 0입니다. 강제 변환과 연관이 있는 부분으로 블록의 문법이 어떤 식으로 사용되는지\n나오며 보통은 사용하지 않으나, 한번 즈음은 사용될 일이 있는 문법이고 그 문법이 ES6를 만나 어떻게\n발전되는지에 대한 얘기들이 주를 이룹니다. 그리고 사용을 지향하는지 지양하는지를 알려주는데 노력합니다.</p>\n<h2>단점과 장점</h2>\n<p>제가 느낀 명확한 단점은 <code>&quot;사용자들이 어려워하는 부분을 알려주거나 ES6를 알려주거나... 하나에 집중하는 편이 좋지 않을까&quot;</code> 하는 점입니다. 저자가 사용자들이 어려워 하는 부분에 대해 알려주고 싶고,\nES6도 알려주고 싶고... 많은 것을 전달해주고 싶어하는 것을 알 수 있으나, 하나에 집중하지 못해 초보에서\n중급으로 넘어가고자 하는 사용자 (특히 ES6 문법을 모르는)들은 어려움에 봉착할 여지가 있다고 느꼈습니다.\n하지만, ES6에 대해서 어느정도 알기만 한다면 기초의 꽤나 깊은 부분까지 알 수 있는 것 같습니다.\n이 책을 읽고 You don\'t know JS의 다른 시리즈들도 확실히 읽어야겠다는 확신했습니다.</p>\n<p>결국 드리고 싶은 말은 <code>[이 책을 읽기 전에 ES6만 어느정도 공부하고 보자]</code> 입니다. 그러면 확실히\n중급 이상으로 올라갈 수 있으며, 다른 시리즈까지 읽는다면 고급단계로 올라갈 수 있지 않을까 생각합니다.</p>\n<hr>\n<h2>마지막으로...</h2>\n<p>자바스크립트 서적을 공부하면서 한 계단을 올랐다고 느꼈던 책은 더글라스 크락포드의\n<code>자바스크립트 핵심 가이드</code>를 제외하고 처음이었습니다. 그 다음단계로 넘어가기가 힘들었는데 그 다음 계단을\n올라갈 수 있게 도와준 책이라 생각됩니다.</p>\n<figure style="text-align: center; cursor: pointer;">\n  <a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B8227329776" target="_blank"\n    style="border: none;">\n    <img src="https://jicjjang.github.io/blog/static/image/review/youdontknowjs/hanbit.jpg"\n      alt="image" style="display:inline-block; width:100%; margin:0 auto;">\n  </a>\n  <figcaption>&lt;You don\'t know js&gt;</figcaption>\n</figure>\n<p>중고급 개발자로 올라갈 수 있게 도와주는 (번역된)서적이 적은 국내시장에서 한단계 올라갈 수 있는\n발판이 될 수 있는 책이라 확신합니다.</p>\n</section>\n'},gsPb:function(n,s){n.exports='<section><p>제네릭 제한과 하면 안되는 부분에 대해 간략히 알아보겠습니다.</p>\n<pre><code class="language-java">\n<span class="hljs-keyword">package</span> generic;\n\n<span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span>\n</span>{\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLevel</span><span class="hljs-params">()</span></span>;\n}\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">levelInfo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Info</span>\n</span>{\n    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> rank;\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">levelInfo</span><span class="hljs-params">(<span class="hljs-keyword">int</span> rank)</span>\n    </span>{\n        <span class="hljs-keyword">this</span>.rank = rank;\n    }\n\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getLevel</span><span class="hljs-params">()</span>\n    </span>{\n        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.rank;\n    }\n}\n\n<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Paper</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Info</span>, <span class="hljs-title">S</span>&gt;  // <span class="hljs-title">Info</span>가 <span class="hljs-title">interface</span>여도 상관 없이 <span class="hljs-keyword">extends</span>로 받아옴.\n</span>{                               <span class="hljs-comment">// super 명령어는 extends 와 반대로, 해당 클래스만 제외한다는 뜻.</span>\n    <span class="hljs-keyword">public</span> T info1;\n    <span class="hljs-keyword">public</span> S info2;\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Paper</span><span class="hljs-params">(T info1, S info2)</span>\n    </span>{\n        <span class="hljs-keyword">this</span>.info1 = info1;\n        <span class="hljs-keyword">this</span>.info2 = info2;\n    }\n    <span class="hljs-keyword">public</span> &lt;U&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">printInfo</span><span class="hljs-params">(U info)</span>\n    </span>{\n        System.out.println(info);\n    }\n}\n\n<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LimitsGeneric</span>\n</span>{\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span>\n    </span>{\n        levelInfo li = <span class="hljs-keyword">new</span> levelInfo2(<span class="hljs-number">3</span>);\n        Paper&lt;levelInfo, Integer&gt; p2 = <span class="hljs-keyword">new</span> Paper2&lt;levelInfo, Integer&gt; (li, <span class="hljs-number">3</span>);\n        Paper&lt;String, Integer&gt; p3 = <span class="hljs-keyword">new</span> Paper&lt;String, Integer&gt; (<span class="hljs-string">"String"</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// error! Info를 상속받은 클래스만 사용 가능.</span>\n    }\n}\n</code></pre>\n<p>원래 Wrapper 클래스로 써야 하지만, <code>Paper&lt;String, Integer&gt; p3 = new Paper&lt;String, Integer&gt; (&quot;String&quot;, 3);</code> 에서 3 같은 경우는\nauto-boxing으로 자동으로 Integer 형태로 바뀝니다.</p>\n<hr>\n<p>위 Paper 클래스에서 extends가 없으면 당연하게 getLevel() 메서드는 사용할 수 없습니다.<br>\n평소에 <code>class Paper&lt;T&gt;</code>라고 쓰는 형태는 사실 아래와 같은 형태를 축소해 놓은 것이기 때문입니다.\n그래서 info는 Object의 기본 메서드만 사용할 수 있습니다.</p>\n<pre><code class="language-java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Paper</span>&lt;<span class="hljs-title">T</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object</span>&gt;\n</span>{\n    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(T info)</span>\n    </span>{\n        info.getLevel();    <span class="hljs-comment">// 사용 불가 Object형식만 가능. getLevel은 Info를 상속받은 애들만 구현했으니까.</span>\n     }\n }\n</code></pre>\n<hr>\n<p>제가 보던 책에도 없던 부분이지만 중요하게 쓰일 수 있을 법 한 부분이었습니다.</p>\n</section>\n'},htLw:function(n,s,a){"use strict";var e=a("EFqf"),t=a.n(e);s.a={name:"post__postName",layout:"post",data:function(){return{post:"",postName:""}},validate:function(n){var s=n.params;return"post"===s.post||"revlog"===s.post},computed:{postContent:function(){return t()(a("lDZ2")("./"+this.post+"/"+this.postName+".md"))}},created:function(){this.post=this.$route.params.post||"post",this.postName=this.$route.params.postName||1}}},ifLy:function(n,s){n.exports="<section><p>요즘 블로그 개편 후 거의 매일 포스팅을 만들고 있는데요! 한빛미디어에서 진행하는\n세번째 IT관련 도서 리뷰! <code>[Learning HTTP/2]</code> 도서에 대한 리뷰를 진행하겠습니다.\n예전에 HTTP/1.1까지 구매했었는데 (대략 1000페이지가 넘는...) HTTP/2에 대한 도서를\n바로 리뷰할 수 있게되어 신청하게 되었습니다. 책에 대한 설명, 시작하겠습니다.</p>\n<hr>\n<p>사실 HTTP라는 것은 구현체가 아닌 약속(Protocol)이기 때문에 그냥 보는 것으로는\n지루할 수 밖에 없습니다. 하지만 웹을 개발하는 입장에서 절대 빼놓고 갈 순 없죠. https에 대한\n관심이 사실 억지로라도(점유율이 가장 높은 브라우저인 크롬에서 http 페이지에 대해서 안전하지\n않음 메세지를 띄워줍니다.) 가질 수밖에 없는 상황에서 한번 중요한 부분은 짚어보겠습니다.</p>\n<h2>Chap. 1 HTTP의 진화</h2>\n<p>HTTP 자체의 역사입니다. HTTP/2가 어떻게 생기게 되었는지 알 수 있습니다.</p>\n<h2>Chap. 2 HTTP/2 맛보기</h2>\n<p>https는 기본적으로 인증서를 거쳐서 통신을 하게 됩니다. 실제 웹 서비스에서 사영하려는 인증서에\n대한 사용법과 설명에 대해 간단히 알려줍니다.</p>\n<h2>Chap. 3 웹을 파헤치는 이유와 방법</h2>\n<p>이 장에서는 http에서의 이슈와 그를 https에서 어떻게 해결하려고 HTTP/2를 정의했는지에 대해\n알려줍니다. 가장 신경이 쓰였던 것은 HTTP/1.1에서는 이미지로 인한 connection의 시간을 줄이기\n위해 이미지 스프라이팅을 했었는데, Request에 대한 병렬 처리가 가능해졌기 때문에\n(현재 브라우저 단에서 받아들일 수 있는 최대 병렬처리 개수는 6개) https에서 이 기능은\n<code>안티패턴</code>이 되었습니다!!! 이 뿐만 아니라 안티패턴이 된 추가적인 요소들이 있어서 https를\n사용하는 입장에서 확실히 알고넘어가야 겠더군요.</p>\n<h2>Chap. 4 HTTP/2로의 전환</h2>\n<p>http를 넘어서 https 적용 시, 알고가야 할 설정이나, 인증서에 대한 설명이 있습니다.</p>\n<h2>Chap. 5 HTTP/2 프로토콜</h2>\n<p>네트워크 레벨의 이야이가 나옵니다. Request, Response의 헤더를 집중적으로 분석해주고,\nhttp와 https일때의 차이를 설명해줍니다. 그리고 HTTP/2의 가장 메인 기능이라고 할 수 있는\n<code>서버 푸시</code>에 대한 설명이 나옵니다. 기존 폴링방식(Client -&gt; Server)이었던 데이터 교환이\n반대로 된다는 얘긴데 사실상 현 웹 체계에서는 힘듭니다. 꼼수로 timeout이나 특정 함수,\niframe 같은 곳에서 서버에 사용자가 인지하지 못한 시간에 Request를 해서 자동으로 Response가\n오는 듯한 효과를 줄 수만 있었죠. 앞으로의 업데이트에서 이 부분이 어떻게 구체적으로 정의되는지\n저는 가장 흥미롭게 보고있습니다.</p>\n<h2>Chap. 6 HTTP/2 성능</h2>\n<p>생각보다 깜짝 놀란 부분인데 https가 대부분 브라우저에서 http에 비해 전혀 느려지지 않더군요\n(...왜 내가하는건...) http, https 모두 지원하는 상황에서의 최적화 또한 고려해 볼 문제입니다.\n앞서 말한 안티패턴과 서버 푸시에 대해 다시한 번 나오는데 이전보다는 구체적인 해결방법을 알려줍니다.</p>\n<h2>Chap. 7 HTTP/2 구현</h2>\n<p>...HTTP/2를 직접 구현해주실 갓을 위한 내용이네요;;; 계속 나오지만 <code>RFC7540</code> 버전에 대한\n얘기가 계속 나옵니다. 이 버전의 규약에 대해 깊이 공부해 볼 필요가 있습니다.</p>\n<h2>Chap. 8 HTTP/2 디버깅하기, Chap. 9 다음은 무엇인가</h2>\n<p>...</p>\n<hr>\n<p>기본적으로 https에서 강화된 보안때문에 속도가 상당히 느려지는 케이스가 있었는데,\n이러한 경우들 모두 최적화에 대한 신경을 쓰지 않아 발생했던 이슈들이었다는 것을\n책을 보며 깨달았습니다. 또한 HTTP/1.1에서는 권장 사항으로 여겨지턴 패턴이 HTTP/2에서는\n안티패턴이 된 것들이 더러 있어 HTTP 메이저 버전 업데이트에 얼마나 많은 노력이 들어갔는지\n(20년 만의 업데이트...) 다시한 번 놀라울 따름이네요.</p>\n</section>\n"},kXW5:function(n,s){n.exports="<section><p>7월 한빛미디어 <code>[Think data structures]</code> 도서에 대한 리뷰를 해보겠ㅅ브니다.\n한빛미디어를 통해 매번 도서 리뷰를 진행하는데... 정시를 맞춘적이 거의 없는 것 같습니다...\n(그래도 계속 뽑아주셔서 감사해요 ㅠㅠ 열심히 하겠습니다...)</p>\n<p>이번 리뷰에서는 제가 주로 개발하는 Node나 Javascript에 관련된 책이 없었기 때문에,\n회사 백엔드 스택으로 들어가 있는 자바에 대한 책으로 리뷰를 진행하기로 결정하고 신청했습니다.</p>\n<p><code>Think data structures 도서</code>에 대한 리뷰! 시작하겠습니다.</p>\n<hr>\n<p>200p가 되지 않는 얇은 책이기 때문에 부담없이 읽을 수 있는 책입니다. 물론 한 언어의\n알고리즘이란 주제로 200p라면 모든 내용을 담지 못하기 때문에, 중요한 내용들을\n잘 응축해 놓았겠죠?! 그 중에서도 중요하거나 괜찮은 내용이 들은 챕터를 위주로\n리뷰를 해보겠습니다.</p>\n<h2>Chap. 1 인터페이스</h2>\n<p>알고리즘에 대한 자세한 설명 전, List와 List를 implements한 ArrayList, LinkedList를 가지고\nCasting에 대한 매우 간략한 (주로 Downcasting 에 대한)설명이 나옵니다. 인터페이스를 <code>왜</code> 쓰는지\n아는건 중요한 일이죠.</p>\n<h2>Chap. 3 ArrayList 클래스</h2>\n<p>제목은 ArrayList지만, ArrayList의 구성 요소들 (get, equals, remove, removeAll 등등...)을\n보여주고, LinkedList를 설명해준다. (음...? chap4가 LinkedList인데 여기서 나오네...?)</p>\n<h2>Chap. 4 LinkedList 클래스</h2>\n<p>chapter의 제목을 조금 바꿔야할 것 같네요... chap4에서는 ArrayList와 LinkedList(add 메서드의)의\n성능 비교를 합니다. 몇개를 add할 때, 얼마나 걸리는지를 구한 뒤,\n수식을 통해 어떤 결과가 나오는 지 확인할 수 있습니다.</p>\n<h2>Chap. 5 이중 연결 리스트</h2>\n<p>LinkedList의 앞, 뒤에 Element가 추가될 때의 성능을 비교하고, 이중 연결 리스트에서\n같은 연산에서 어떤 자료구조가 효율적인지 확인해봅니다.</p>\n<h2>Chap. 6 트리 순회, Chap. 7 철학으로 가는 길</h2>\n<p>검색 엔진 <code>(검색 엔진은 크롤링 / 인덱싱 / 검색으로 이루어짐)</code>을 주제로\n<code>[위키트리의 본문의 제일 첫 소문자 링크를 클릭하고 이어지는 기사에서도 이를 반복하다 보면 마지막 글은 철학에 도달하게 된다]</code>\n라는 추측을 테스트 해 봅니다. 깊이 우선 탐색을 Iterator로 반복하여 탐색하는 구조에 대해 설명하는데,\n짧게 설명하다보니 생략된 부분이 많아 내용을 모르고 보는 초보자들에게는 조금 어려울 수 있을 것 같네요.\n반복적인 트리 순회로 <code>크롤러</code>를 만드는 챕터입니다.</p>\n<h2>Chap. 8 인덱서</h2>\n<p>인덱서란 검색어가 다수라면 이들의 집합을 분석하고, 검색어를 바탕으로 관련성 높은 페이지를 추리는 작업을 합니다.\n콜렉션, 맵이 이에 알맞는 자료구조지만 이 중 속도면에서는 맵이 더 빠르기에, 맵을 이용해 인덱서를 구성해봅니다.</p>\n<h2>Chap. 9 Map 인터페이스</h2>\n<p>가장 많이 사용하는 자료구조 중 하나인 Map입니다. 반복적이고 단순한 구조인 LinearMap에 대해 설명되어 있습니다.</p>\n<h2>Chap. 10 해싱, Chap. 11 HashMap 클래스</h2>\n<p>Map 인터페이스를 해시값으로 구현한 해싱입니다. 반복으로 키에 매핑되는 값을 구해내는 LinearMap과는 달리,\n해시된 키를 이용하여 값을 구하는 방법입니다.</p>\n<h2>Chap. 12 TreeMap 클래스, Chap. 13 이진 탐색 트리</h2>\n<p>해시맵에서도 O(n)구조를 벗어날 수 없었기에, 조금 더 빠른 구조인 TreeMap이 나왔습니다. <code>(O(logn))</code>\n이 TreeMap에 사용된 이진 탐색 트리 구조가 어떤 것인지, 또 다른 트리구조엔 어떤것이 있는지 알아봅니다.</p>\n<hr>\n<ul>\n<li>추가적인 chapter가 있지만, 필수적이라기보단, 성능 향상과 추가 기능들을 알려줍니다.</li>\n</ul>\n<p>이번 리뷰 도서는 조금... 애매합니다. 주관적으로 생각하기에는 난이도가 고르지 못한 느낌이었고,\nchapter의 제목이 내용과 매치되지 않는 부분이 존재했습니다. 문장들이 이해하긴 쉬웠지만\n조금 다듬어야 될 것 같습니다.</p>\n<p>이번 리뷰는 여기서 마치겠습니다.</p>\n<p>감사합니다.</p>\n</section>\n"},l7Gu:function(n,s){n.exports='<section><p>오랜만에 블로그를 쓰게 되었습니다. 16년 초에 미국에 다녀오고, 학교를 다니면서 계속 졸업 프로젝트에 매달리다보니 블로그를 쓰기 어렵게 되더군요.</p>\n<p>오늘은 pip로 라이브러리 배포 및 사용하기에 대한 내용입니다.</p>\n<p>배포한 라이브러리는 &lt;<a href="https://github.com/sosanara/sosaML">https://github.com/sosanara/sosaML</a>&gt; sosaML이라는 이미지 전처리와 머신러닝 데이터와 값을 비교하는 부분입니다. 팀원이 따로 라이브러리를 배포하여 사용해보려고 했습니다.</p>\n<h4>1. setup.py</h4>\n<p>setup.py파일을 먼저 만듭니다. &lt;<a href="https://github.com/sosanara/sosaML/blob/master/setup.py">https://github.com/sosanara/sosaML/blob/master/setup.py</a>&gt;</p>\n<pre><code class="language-python"><span class="hljs-keyword">from</span> setuptools <span class="hljs-keyword">import</span> setup, find_packages\n\nsetup_requires = [\n    ]\n\ninstall_requires = [\n    <span class="hljs-string">\'pillow==3.2.0\'</span>,\n    <span class="hljs-string">\'numpy==1.11.0\'</span>,\n    <span class="hljs-string">\'scipy==0.17.0\'</span>,\n    <span class="hljs-string">\'sklearn==0.0\'</span>,\n    ]\n\ndependency_links = [\n    ]\n\nsetup(\n    name=<span class="hljs-string">\'sosaML\'</span>,\n    version=<span class="hljs-string">\'0.1\'</span>,\n    description=<span class="hljs-string">\'sosanara machine learning\'</span>,\n    author=<span class="hljs-string">\'WonJongLee\'</span>,\n    author_email=<span class="hljs-string">\'b1o3.sosanara@gmail.com\'</span>,\n    packages=[<span class="hljs-string">"ML"</span>],\n    include_package_data=<span class="hljs-keyword">True</span>,\n    install_requires=install_requires,\n    setup_requires=setup_requires,\n    dependency_links=dependency_links,\n    <span class="hljs-comment"># scripts=[\'manage.py\'],</span>\n    entry_points={\n        <span class="hljs-string">\'console_scripts\'</span>: [\n            ],\n        <span class="hljs-string">"egg_info.writers"</span>: [\n                <span class="hljs-string">"foo_bar.txt = setuptools.command.egg_info:write_arg"</span>,\n            ],\n        },\n    )\n</code></pre>\n<p>위 처럼 의존받는 패키지들과 각 설정 부분을 채워주시면 됩니다.</p>\n<h4>2. MANIFAST.in</h4>\n<p>MANIFAST.in 파일 안에는 static, template 파일들을 설정해줍니다.\n<code>recursive-include app/static *</code> 와 같이 간단하게 작성해 주시면 됩니다.</p>\n<h4>3. additional files</h4>\n<p>각 설정에 따라 <code>README.txt</code>파일과 <code>LICENSE.txt</code>파일을 추가해주세요.</p>\n<h4>4. 배포 준비</h4>\n<p>위 파일들의 작성으로 업로드 준비가 완료되었습니다.</p>\n<p><code>$ python setup.py sdist</code></p>\n<p>해당 명령어로 배포를 시작합니다. 배포를 하면 새로운 폴더에 tar (압축파일)이 생깁니다.</p>\n<h4>5. 설치</h4>\n<p><code>$ python setup.py install</code></p>\n<p>위 명령어로 tar 파일을 간단하게 설치할 수 있습니다.</p>\n<p><code>$ python setup.py develop</code></p>\n<p>개발 버전이라면 위 명령어로도 설치할 수 있습니다.</p>\n<h4>6. 공유</h4>\n<p>라이브러리를 사용자들에게 공유하기 위해 배포하는 것이니, 이 부분이 가장 중요하다고 할 수 있습니다.</p>\n<p><code>$ python setup.py register</code></p>\n<p>위 명령어로 packaging을 수행하고 등록 절차를 수행합니다. 순서대로 설정을 마쳤다면</p>\n<p><code>$ python setup.py sdist upload</code></p>\n<p>업로드를 시작합니다.</p>\n<p>이처럼 매우 간단하게 설정 및 배포를 할 수 있습니다. 버전 변경은 <code>setup.py</code> 파일에서 수행하면 됩니다. 바뀐 로그는 <code>CHANGE.txt</code>에 반영됩니다.</p>\n<h4>7. 사용</h4>\n<p>하지만, 이런 배포가 아닌 pip에서 바로 github같은 vcs에 있는 라이브러리를 사용해야 할 경우가 있습니다. (배포가 아닌 나만 사용할 라이브러리.) 이런 경우에는 애초에 배포를 할 경우, 설정 파일이 필요없습니다.</p>\n<p><code>$ pip install -e git+https://github.com/sosanara/sosaML.git#egg=ML</code></p>\n<p>위와 같은 명령어로 설치할 수 있습니다. <code>-e</code> 옵션은 egg로 파일을 설치하겠다는 뜻이며, <code>egg=ML</code> 부분은 egg의 이름으로 ML로 설치하겠다는 뜻입니다.</p>\n<hr>\n<p>배포를 자세하게 알아보고 찾아봤지만, sosaML이라는 라이브러리는 저희가 사용하기 위해 최적화 해놓은 라이브러리 였기 때문에 git에서 바로 끌어다 사용하였습니다. 하지만, 이 방법은 PyCharm에서도 자동 경로탐색을 하지 못하는 문제를 보였습니다.</p>\n<p>오랜만에 블로그 글을 작성했는데, 이제는 더 많은 부분을 정리해야 할 것 같네요. 앞으로 자주 뵙겠습니다.</p>\n<p>참고 - <a href="https://pip.pypa.io/en/stable/user_guide/#installing-packages">https://pip.pypa.io/en/stable/user_guide/#installing-packages</a><br>\n참고 - <a href="https://www.digitalocean.com/community/tutorials/how-to-package-and-distribute-python-applications">https://www.digitalocean.com/community/tutorials/how-to-package-and-distribute-python-applications</a></p>\n</section>\n'},lDZ2:function(n,s,a){var e={"./README.md":"WJZd","./post/RESTful.md":"sKfu","./post/airbnb-review.md":"Sl33","./post/blog-renewal.md":"7yFs","./post/browserify.md":"MWcy","./post/dooray-bot-front.md":"XxRy","./post/dooray-bot-server.md":"pRsX","./post/first-react-project-1.md":"0muq","./post/first-react-project-2.md":"XOfj","./post/front-end-question.md":"SsDy","./post/java-foundation1.md":"no0D","./post/java-foundation2.md":"yRXK","./post/java-foundation3.md":"gsPb","./post/java-foundation4.md":"DFDR","./post/javascript-optimize-1.md":"p0g8","./post/javascript-optimize-2.md":"WH3K","./post/javascript-optimize-3.md":"Vyx5","./post/javascript-optimize-4.md":"TYW8","./post/javascript-optimize-6.md":"+tm4","./post/javascript-optimize-7.md":"qHDP","./post/javascript-optimize-8.md":"IMT9","./post/jwt.md":"XOMP","./post/life.md":"d6Cz","./post/liff-app-dev.md":"8/1M","./post/liff-app.md":"TH2L","./post/malware.md":"YQ9w","./post/new-jobs.md":"/rhx","./post/php-fastcgi.md":"3bLg","./post/problem-in-el-capitan.md":"pA4x","./post/promise-and-async-await.md":"ZN23","./post/prototypal-inheritance-model.md":"0SnD","./post/review-2018-it-trend-special-report.md":"fV5o","./post/review-functional-programming.md":"z1jw","./post/review-learning-http-2.md":"ifLy","./post/review-modern-startup.md":"vSPW","./post/review-rxjs.md":"zhBN","./post/review-think-data-structures.md":"kXW5","./post/review-you-dont-know-js.md":"gCqr","./post/scale-up-for-security.md":"+YQi","./post/seoul-app-contest-with-django.md":"wmgb","./post/seoul-app-contest-with-node-and-react-native.md":"8TrP","./post/to-deployment-pip.md":"l7Gu","./post/web-presentation.md":"AFtW","./post/welcome-vue-card-layer.md":"WWNi","./slides/css/theme/README.md":"Yoa/","./slides/plugin/markdown/example.md":"6wSq"};function t(n){return a(p(n))}function p(n){var s=e[n];if(!(s+1))throw new Error("Cannot find module '"+n+"'.");return s}t.keys=function(){return Object.keys(e)},t.resolve=p,n.exports=t,t.id="lDZ2"},no0D:function(n,s){n.exports='<section><p>자바를 공부하면서 코딩을 하며 input을 받는 상황에서 한줄씩 밀리는 현상을 발견했습니다.</p>\n<h2>에러가 난 상황</h2>\n<pre><code class="language-java">Scanner s = <span class="hljs-keyword">new</span> Scanner(System.in);\n\nSystem.out.println(<span class="hljs-string">"값을 입력하세요."</span>);\n<span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">3</span>; i++) {\n    System.out.println(<span class="hljs-string">"첫 번째"</span>);\n    String a = s.nextLine();\n    <span class="hljs-keyword">int</span> b = s.nextInt();\n    String c = s.nextLine();    <span class="hljs-comment">// c에 값을 입력 후, 다시 a에 nextLine();을 넣기 전에, a에 \\n이 들어가버림.</span>\n}\n</code></pre>\n<p>뭔가 잘못했나... 생각을 하다 구글링으로 next()와 nextLine()의 차이점으로 발생한 문제라는 것을 알았습니다.</p>\n<h3>next()</h3>\n<pre><code class="language-java">Scanner s = <span class="hljs-keyword">new</span> Scanner(<span class="hljs-string">"\\n\\ntest\\nhoho\\n"</span>);\n\n<span class="hljs-keyword">while</span> (s.hasNext()) {\n    System.out.println(<span class="hljs-string">"출력: "</span> + s.next());\n}\n<span class="hljs-comment">// &lt;결과&gt;</span>\n<span class="hljs-comment">// 출력: test</span>\n<span class="hljs-comment">// 출력: hoho</span>\n</code></pre>\n<p>※ next()는 개행문자, 공백은 무시하고 문자를 입력받습니다.</p>\n<h3>nextLine()</h3>\n<pre><code class="language-java"><span class="hljs-comment">// nextLine()</span>\nScanner s = <span class="hljs-keyword">new</span> Scanner(<span class="hljs-string">"\\n\\ntest\\nhoho\\n"</span>);\n\n<span class="hljs-keyword">while</span> (s.hasNext()) {\n    System.out.println(<span class="hljs-string">"출력: "</span> + s.nextLine());\n}\n<span class="hljs-comment">// &lt;결과&gt;</span>\n<span class="hljs-comment">// 출력:</span>\n<span class="hljs-comment">// 출력:</span>\n<span class="hljs-comment">// 출력: test</span>\n<span class="hljs-comment">// 출력:</span>\n<span class="hljs-comment">// 출력: hoho</span>\n<span class="hljs-comment">// 출력:</span>\n</code></pre>\n<p>※ nextLine()은 한 줄 단위로 입력받기 때문에 개행문자도 한 줄로 인식합니다.</p>\n<hr>\n<p>기초가 중요함을 느낄 수 있는 포스팅이었습니다. php와 다른 점들이 헷갈릴 수 있으니 차근차근 공부하며 포스팅하겠습니다.</p>\n</section>\n'},p0g8:function(n,s){n.exports='<section><p>5월 연휴 잘 보내셨나요? 저는 연휴와 주말동안 Vue 라이브러리와 간단한 프로그램들을 만드는데 보냈습니다.\n회사에서 준 yes24 도서이용권으로 (공짜 책!!!)구매한 자바스크립트 성능 최적화에 대한 간단한 정리를 해보려 합니다.\n요점만 집어서! 써보겠습니다 :D</p>\n<h2>1. 로딩과 실행</h2>\n<p>사용자의 한 Process에서 UI업데이트와 Script 실행을 하지만, 동시에 진행하지는 못합니다. 브라우저는\n&lt;script&gt; 태그를 만나면 처리를 중단하고 해당 Script를 실행한 뒤 페이지 분석과 랜더링을 다시 진행합니다.\n처리하는 중에 페이지 랜더링이나 사용자의 동작은 완전히 차단되게 됩니다.</p>\n<h3>1-1. 스크립트 위치</h3>\n<p>&lt;head&gt; 태그 내부에 &lt;script&gt; 태그를 사용하면 안된다는 것은 많이 알려져있습니다.\n위에 설명드린 것처럼 &lt;script&gt;를 만나면 진행되던 처리를 중단하고 Script 처리를 진행하기 때문입니다.\n그렇기 때문에 &lt;haed&gt; 태그에 Script (외부 파일로드, 내부 스크립트 실행 상관 없이)가 들어갈수록, 많아질수록\n사용자는 비어있는 화면을 보는 시간이 늘어나게 됩니다. 그렇기 때문에 &lt;script&gt; 태그는 &lt;body&gt; 태그의\n최하단에 위치해야 합니다. 그러면 html 랜더가 끝난 후 실행이 되기 때문에 화면이 <code>일단</code> 보여지기 때문에 문제가 없어집니다.</p>\n<h3>1-2. 스크립트 묶기</h3>\n<p>html 페이지를 분석하는 동안 &lt;script&gt; 태그를 만날수록 코드를 실행할 때의 지연시간이 생깁니다. &lt;script&gt; 태그를\n만날 때마다 랜더링이 차단되기 때문입니다. 이런 지연시간을 최소화해야 합니다. 단적인 예로 외부 자바스크립트 25kb 파일 4개보다 100kb 파일 1개가\n더 빠르게 로드됩니다.</p>\n<h3>1-3. 비차단 스크립트</h3>\n<p>Script의 HTTP요청이나 UI업데이트 동안의 브라우저 프로세스 차단은 개발자에게 큰 문제입니다. 25kb 파일 4개보다 100kb 파일1개를 로드하는 방식도\n용량이 더 커지게 된다면 &lt;body&gt; 태그의 최하단에 위치한다 해도 사용자의 움직임을 오랫동안 차단하게 만듭니다.\n이 문제를 해결하기 위한 방법들이 있습니다.</p>\n<h4>1-3-1. 지연 스크립트</h4>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/javascript/optimize/1/script.jpg" alt="image" style="margin:0 auto;">\n</figure>\n<p>&lt;script&gt; 태그의 async나 defer 속성을 사용한다면 사용됨과는 상관 없이 스크립트를 load하게 됩니다.</p>\n<h4>1-3-2. 동적 &lt;script&gt; 태그</h4>\n<p>DOM을 이용해 페이지 로드 이후, 동적으로 &lt;script&gt; 태그를 만드는 방법이 있습니다.</p>\n<pre><code class="language-js"><span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">\'script\'</span>);\nscript.type = <span class="hljs-string">\'text/javascript\'</span>;\nscript.src = <span class="hljs-string">\'file1.js\'</span>;\n<span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">\'head\'</span>)[<span class="hljs-number">0</span>].appendChild(script);\n</code></pre>\n<p>위 코드처럼 &lt;script&gt; 태그를 생성하고 페이지에 추가하는 순간, <code>file1.js</code> 파일을 내려받기 시작합니다.\n위치는 head, body 어디든 상관 없습니다. 또한, onload 이벤트로 파일을 모두 받았는지 알 수 있습니다.</p>\n<h4>1-3-3. XMLHttpRequest 스크립트 삽입</h4>\n<p>흔히 말하는 Ajax 방식입니다. 비동기로 코드를 불러오기 때문에 원하는 시기에 호출을 할 수 있으며,\n로드가 된 후에도 바로 데이터를 삽입하는 것이 아니라 사용자가 원할 때, 원하는 곳에 넣을 수 있습니다.\n단점은 데이터를 요청하는 페이지와 데이터를 제공하는 페이지가 같은 도메인이어야 한다는 점입니다.</p>\n<hr>\n<p>오늘 2장까지 바로 진행하겠습니다~</p>\n</section>\n'},pA4x:function(n,s){n.exports='<section><p>Macbook OS를 Yosemite로 올리고 난 후, 문제가 몇가지 있었습니다. 특히, 오디오 관련 에러가 많이 생겼는데, 이어폰을 끼고 노래를 듣다 이어폰을 빼면\n소리가 커지거나 작아지는 동작들이 먹히지 않았습니다. 또, 듀얼모니터를 쓰면 자잘한 에러들이 많이 발생하고, 개발 툴들을 2, 3개 이상 켜면 점점 느려졌습니다.\n그렇기에 공모전이 끝난 후, Yosemite보다 안정적이게 되었다는 El Capitan으로 바로 올리자 마음을 먹고 공모전이 끝난 후, 바로 업그레이드를 하게 되었습니다.</p>\n<p>하지만, 아직 정식 릴리즈 되지 않은게 화근이었던 것인지, 버그가 속속들이 등작했습니다.</p>\n<p>새로 node + express + socket.io + angular를 시작하게 되었는데, 설치 전,<br>\n<code>brew upgrade &amp;&amp; brew upgrade</code> 를 하였습니다.</p>\n<figure>\n    <img src="https://jicjjang.github.io/blog/static/image/etc/el-capitan/llvm35.png" alt="image">\n</figure>\n<p>위 사진처럼 <a href="https://ko.wikipedia.org/wiki/LLVM">LLVM35</a>가 brew에서 업데이트 되고있었습니다.\n문제는 아래 사진처럼 cxxabi.h와 string.h 헤더파일을 찾을 수 없는 에러 때문이었습니다.</p>\n<figure>\n    <img src="https://jicjjang.github.io/blog/static/image/etc/el-capitan/error.png" alt="image">\n</figure>\n<p>?!</p>\n<p>분명 xcode는 최신버전으로 업데이트를 미리 마쳤는데, 잘 모르는 cxxabi.h는 몰라도\nstring.h 헤더까지 없다니...</p>\n<p>어리둥절하며 구글링을 시작했습니다. 가장 많은 의견은 El Capitan에서 추가된 rootless 기능이었습니다.\nrootless란, 아이폰에서 탈옥이 너무 성행한것에서 아이디어를 얻어온 것으로, 사용자가 시스템에 접근하는 것을 막는 기능입니다.</p>\n<p>에이... sudo로 root가 되면 되잖아...?</p>\n<p>물론, root여도 상관 없이 정해진 경로 (/, /usr, /lib 등등...)를 접근할 수 없습니다.\n개발자들에게 그리 메리트가 없는 부분이고, 에러가 연관된 것 같았기에 바로 기능을 차단했습니다.\n(아래 사진과 같은 검색으로 이미 많은 방법들이 나와있었습니다.)</p>\n<figure>\n    <img src="https://jicjjang.github.io/blog/static/image/etc/el-capitan/rootless-disable.png" alt="image">\n</figure>\n<p>하지만, rootless 기능을 차단하고도 계속 같은 오류가 발생했습니다.\n그리고 알게된 <a href="http://stackoverflow.com/questions/32898887/boost-no-longer-works-with-homebrew-on-mac-el-capitan/32928840#32928840">stackoverflow</a>에서</p>\n<p><code>xcode-select --install</code> 명령어로 xcode cli를 설치한 뒤, 정상적으로 작동되기 시작했습니다.</p>\n<figure>\n    <img src="https://jicjjang.github.io/blog/static/image/etc/el-capitan/fix.png" alt="image">\n</figure>\n<hr>\n<p>(xcode가 cli버전이 있다는걸 처음 알게된 맥북 1.3년 경력의 개발자...)</p>\n<p>위의 에러는 정말 시급했기에 (과제를 해야 했기에) 바로바로 고쳤지만,</p>\n<ol>\n<li>sublime에서도 에러가 나더군요 (?!) 들어보지 못한 에러가 2~3개의 경고문을 뱉어내서 캡쳐를 해놨지만\n자주 뜨지 않아서 제대로 해결을 못했습니다.</li>\n<li>블로그를 octopress + jekyll로 사용하고 있는데, bundle과 jekyll이 사라졌습니다... 재설치를 했는데\nruby installer인 gem에서 또 다른, 어떤 프로그램들이 사라졌는지는 정확히 모르겠습니다.</li>\n</ol>\n<p>그래도 Yosemite보다 훨씬 안정적이고 빠르고 특히, 노래를 많이 듣는데 음량에서 에러가 나지 않는게 너무 행복합니다.\n(아직 업그레이드 한지 일주일도 안된 상태지만...)</p>\n<p>너무 두서없이 해결된 것 같지만, xcode-select가 원래는 기본 업데이트가 되는 것이어서 제가 몰랐던 것 같습니다.</p>\n<p>아직 모든 버그가 수정되진 않은 것 같지만, 사용감에서는 정말 만족하는 El Capitan! 정식 release가 기대됩니다!</p>\n</section>\n'},pRsX:function(n,s){n.exports='<section><h3>!!! 이 글은 사내 메신저인 Dooray에서 활용할 bot scheduler에 대한 소개로, 비정상적인 경로로의 접근은 하지 말아주시기 바랍니다. !!!</h3>\n<hr>\n<p>Front 게시물에 이어서 바로 서버 사용법을 설명드리겠습니다. 일단 서버는 노드로 구현이되어있고,\n타이머를 돌면서 1분마다 firebase를 찔러보며 hook time이 현재 시간과 일치하는 스케쥴의\n내용을 Dooray로 쏴줍니다.</p>\n<h1>1. <a href="https://github.com/jicjjang/DoorayHooker">Dooray Hooker</a></h1>\n<p>서버에서 사용하는 <a href="https://github.com/jicjjang/menubot">menubot</a> 에서의 동작은 크게 3가지로 나뉩니다.</p>\n<ol>\n<li>이미지 자르기</li>\n<li>이미지 위치 구하기</li>\n<li>글자 인식</li>\n</ol>\n<p>이러한 동작을 위해 기본 세팅이 조금 필요합니다.</p>\n<h2>1-1. 기본 세팅</h2>\n<p>우선 이미지를 자를 때 필요한 <a href="https://www.imagemagick.org/script/index.php">imagemagick</a> 라이브러리 입니다.\nbrew로 간단하게 설치할 수 있습니다.</p>\n<pre><code class="language-bash">$ brew install imagemagick\n</code></pre>\n<p>그리고 이미지 인식에 사용할 <a href="https://cloud.google.com/sdk/docs/quickstart-mac-os-x">google-vision</a>이 필요합니다.\n(구글 비전은 링크를 보시고 순서대로 실행해주세요)</p>\n<h2>1-2. 설정 파일</h2>\n<pre><code class="language-bash">$ git <span class="hljs-built_in">clone</span> https://github.com/jicjjang/DoorayHooker\n$ <span class="hljs-built_in">cd</span> DoorayHooker\n$ npm install forever -g\n$ npm install\n$ npm run start\n</code></pre>\n<p>우선 npm을 설치하고 서버를 띄웁니다.\n이번에도 바로 에러가 뜹니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/dooray/scheduleServer/error1.png" alt="image" style="display:inline-block; width:80%; margin:0 auto;">\n</figure>\n<p>다시 <code>&quot;ex.config.js&quot;</code> 파일을 참고하여 <code>&quot;config.js&quot;</code> 파일을 만듭니다.</p>\n<h4>그리고 메뉴 이미지를 넣어줍니다. 메뉴봇을 이용할 때, 기본적으로 &quot;img/all_menu/menu.png&quot; 경로로 저장된 이미지를 사용하도록 해놨습니다. 해당 경로로 식사메뉴 이미지를 다운받아서 해당 경로로 넣어줍니다.</h4>\n<h2>1-3. 사용</h2>\n<p>서버에서는 기본 세팅이 복잡하고, 사용에 대해선 큰 어려움이 없습니다.</p>\n<pre><code class="language-bash">$ npm run start\n</code></pre>\n<p>서버를 시작해주시면 됩니다. <a href="https://www.npmjs.com/package/forever">forever</a>를 사용하였기 때문에\n서버가 시작되면</p>\n<pre><code class="language-bash">$ forever list\n</code></pre>\n<p>명령어로 현재 서버에 대한 로그파일을 확인하실 수 있습니다.</p>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/dooray/scheduleServer/log1.png" alt="image" style="display:inline-block; width:80%; margin:0 auto;">\n</figure>\n<figure style="text-align: center;">\n  <img src="https://jicjjang.github.io/blog/static/image/etc/dooray/scheduleServer/log2.png" alt="image" style="display:inline-block; width:80%; margin:0 auto;">\n</figure>\n<p>등록되어있는 스케쥴들이 정상적으로 봇으로 동작하는 모습을 보실 수 있습니다!</p>\n<hr>\n<p>봇을 만든것에 대한 경험 공유는 여기까지 입니다.\n사용하시면서 어려우실 만한 부분은 google vision의 설치일 것 같네요... (저도 꽤나 오래 걸렸습니다...)</p>\n<p>감사합니다.</p>\n</section>\n'},qHDP:function(n,s){n.exports='<section><p>가장 많이 쓰이며, 프론트 엔지니어에게 필수인 비동기 통신 요청인 Ajax에 대해 알아보겠습니다</p>\n<h2>7. Ajax</h2>\n<p>비동기적으로 데이터를 주고 받아서 페이지 부하를 최대한 줄일 수 있는\n고성능 javascript의 초석인 Ajax에 대해 알아보겠습니다.</p>\n<h3>7-1. 데이터 전송</h3>\n<ol>\n<li>XMLHttpRequest</li>\n<li>동적 &lt;script&gt; 태그 삽입</li>\n<li>iframe</li>\n<li>Comet</li>\n<li>Multipart XHR</li>\n</ol>\n<p>5종류의 기능을 주로 사용하지만, iframe이나 Comet은 데이터 전송 용도로 사용한다기엔 무리가 있으므로 제외합니다.</p>\n<p>보통 jQuery의 ajax 기능을 이용해서 많이 사용하는 XMLHttpRequest에는 readyState라는 중요한 요소가 있습니다.\n전송중일 경우, 즉 스트리밍을 하는 동안에 readyState 값의 변화가 있다는 점입니다. 그 말은 스트리밍이 진행중일 때를\n캐치할 수 있다는 것이지요.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> req = <span class="hljs-keyword">new</span> XMLHttpRequest();\n\nreq.onreadystatechange = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">event</span>) </span>{\n  <span class="hljs-keyword">if</span> (req.readyState === <span class="hljs-number">3</span>) {             <span class="hljs-comment">// 일부 데이터를 받았음. 전송 진행중.</span>\n    <span class="hljs-comment">// ...</span>\n  } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req.readyState === <span class="hljs-number">4</span>) {      <span class="hljs-comment">// 데이터 전송이 끝남.</span>\n    <span class="hljs-comment">// ...</span>\n  }\n}\n...\n</code></pre>\n<p>또한 GET방식으로 데이터 요청 시 데이터는 캐시가 되기 때문에 같은 데이터를 여러번 가져 올 경우 성능이 향상됩니다.\n(물론 가져온 데이터를 저장해서 사용하는 것이 가장 효율적입니다.)</p>\n<p>GET방식은 URL과 매개변수의 길이가 2,048자로 제한이 되기 때문에 사용 시 유의해야 합니다.\n(길이를 넘는다면 POST를 사용해야 합니다.)</p>\n<hr>\n<p>동적 &lt;script&gt; 태그 삽입은 다른 도메인에 있는 서버에 데이터를 요청할 수 없다는 XHR의 단점을 극복할 수 있는\n방법입니다. 그래서 해킹이라고 볼 수 있습니다.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> scriptA = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">\'script\'</span>);\nscriptA.src = <span class="hljs-string">\'address\'</span>;\n<span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">\'head\'</span>)[<span class="hljs-number">0</span>].appendChild(scriptA);\n</code></pre>\n<p>데이터를 받는 부분은 어떻게 해야할까요?</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">var</span> scriptA = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">\'script\'</span>);\nscriptA.src = <span class="hljs-string">\'http://test.com/lib.js\'</span>;\n<span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">\'head\'</span>)[<span class="hljs-number">0</span>].appendChild(scriptA);\n\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsonCallback</span>(<span class="hljs-params"></span>) </span>{\n  ...\n}\n\n<span class="hljs-comment">// lib.js file</span>\njsonCallback({<span class="hljs-attr">status</span>: <span class="hljs-string">\'success\'</span>, <span class="hljs-attr">value</span>: {<span class="hljs-attr">a</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">2</span><span>}}</span>)\n</code></pre>\n<p>이렇게 호출할 때 callback 함수를 미리 생성해 놓고, 불러온 파일 내부에서 callback 함수를 실행시키는 것입니다.\n하지만 이 방법은 누군가 인지하고 callback 함수를 구현한 javascript 파일을 불러온다면 문제가 발생할 여지가 있기에\n데이터가 변할 수 있는 기능에 추천하지 않습니다.</p>\n<hr>\n<p>Multipart XHR은 기본 XHR 통신과 거의 같습니다. 다만, n개의 파일을 가져올 때 n번의 XHR요청을 보내는 것이 아니라\n1번의 요청을 보내면서 n개의 파일을 하나로 합쳐서 받는 것입니다.</p>\n<p>서버에서 base64 인코딩을 한 결과 값들을 특정 구분자로 이어붙여서 리턴하면 그 값을 javascript에서 다시 잘라서 사용합니다.</p>\n<pre><code class="language-shell"><span class="hljs-meta">$</span><span class="bash">images = array(<span class="hljs-string">\'a.jpg\'</span>, <span class="hljs-string">\'b.jpg\'</span>, <span class="hljs-string">\'c.jpg\'</span>);</span>\nforeach ($images as $image) {\n<span class="hljs-meta">  $</span><span class="bash">image_fh = fopen(<span class="hljs-variable">$image</span>, <span class="hljs-string">\'r\'</span>);</span>\n<span class="hljs-meta">  $</span><span class="bash">image_data = fread(<span class="hljs-variable">$image_fh</span>, filesize(<span class="hljs-variable">$image</span>));</span>\n<span class="hljs-meta">  fclose($</span><span class="bash">image_fh);</span>\n<span class="hljs-meta">  $</span><span class="bash">payloads[] = base64_encode(<span class="hljs-variable">$image_data</span>);</span>\n}\n<span class="hljs-meta">\n$</span><span class="bash">newline = chr(1);  // 구분자. unicode 1</span>\n\necho implode($newline, $payloads);  // $newline을 구분자로 $payloads를 연결시킴.\n</code></pre>\n<pre><code class="language-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">splitImages</span>(<span class="hljs-params">imageString</span>) </span>{\n  <span class="hljs-keyword">var</span> imageData = imageString.split(<span class="hljs-string">\'\\u001\'</span>);     <span class="hljs-comment">// unicode 1. 구분자를 기준으로 나눔.</span>\n  <span class="hljs-keyword">var</span> imageElement;\n  <span class="hljs-keyword">var</span> doc = <span class="hljs-built_in">document</span>;\n\n  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, len = imageData.length; i &lt; len; i++) {\n    imageElement = doc.createElement(<span class="hljs-string">\'img\'</span>);\n    imageElement.src = <span class="hljs-string">\'data:image/jpeg;base64,\'</span> + imageData[i];\n    doc.getElementById(<span class="hljs-string">\'container\'</span>).appendChild(imageElement);\n  }\n}\n</code></pre>\n<p>이미지 뿐만 아니라 같은 확장자의 파일 (css, js, png, jpg, html...)모두 가능합니다.</p>\n<p>큰 단점은 캐시가 되지 않는다는 점입니다. 파일 형식으로 불러오는 것이 아니라 string형식으로 가져오기 때문입니다.</p>\n<hr>\n<p>XHR을 사용할 때 속도는 GET이 POST보다 빠릅니다. GET은 기본적으로 1개의 패킷을, POST는 2개의 패킷을 사용하는데\n데이터 양이 많으면 패킷을 하나 더 쓴다는 단점이 희석되기 때문에 데이터 양이 많을 때에는 POST가 적합합니다.</p>\n<h3>7-2. 데이터 포맷</h3>\n<p>데이터 포맷의 종류로는</p>\n<ol>\n<li>XML</li>\n<li>XPath</li>\n<li>JSON</li>\n<li>JSON-P</li>\n<li>HTML</li>\n<li>Custom Format</li>\n</ol>\n<p>6가지가 있습니다.</p>\n<p>이제는 거의 사용을 하지 않는 XML, XPath는 제외하겠습니다. 이들은 사용에 있어서 모호함이 있기 때문에\n지양됩니다. (코드를 관리하는 방법이 3가지이기 때문에 애매합니다.)</p>\n<p>최근 가장 널리 사용되는 포맷인 JSON은 객체와 배열의 문법을 가볍게 파싱할 수 있습니다.\neval로도 쉽게 파싱할 수 있으나, 보안의 위협이 될 수 있으므로 JSON.parse 메서드를 사용해야 합니다.</p>\n<p>JSON-P는 XHR로 데이터를 받았을 때, JSON이 string으로 오는 이슈를 해결하기 위해 사용됩니다.\nJSON 데이터를 전달받은 즉시 JSON 형식으로 사용하기 위해선 데이터를 callback함수로 감싸야 합니다.</p>\n<pre><code class="language-javascript">parseJSON([\n  {<span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">username</span>: <span class="hljs-string">\'...\'</span>},\n  {<span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">username</span>: <span class="hljs-string">\'...\'</span>},\n  {<span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">username</span>: <span class="hljs-string">\'...\'</span>},\n  ...\n])\n</code></pre>\n<p>JSON과 마찬가지로 네이티브 코드인 JSON-P는 파일 크기가 조금 더 늘어나는 단점이 있으나, 파싱 시간이 줄어들기 때문에\n속도가 JSON보다 빠릅니다.</p>\n<p>JSON-P의 단점은 파싱할 수 없는 데이터를 받았을 때 발생합니다. 파싱 불가능한 형식의 response가 온다면\n에러가 발생할 수 있습니다.</p>\n<p>HTML은 XML과 비슷할 정도로 복잡한 포맷입니다. 그렇기 때문에 직접적으로 서버에서 응답을 주는 것은 최소한으로 줄여야 합니다.</p>\n<p>Custom Format은 a:junseok;jicjjang12@gmail.com; b:aa:aa@gmail.com; .... 처럼\n사용자가 직접 만든 문법을 사용하는 방식인데, split으로 간단하게 자르는 형식이기 때문에 속도는 매우 빠릅니다.\n(이 또한 보안상 이슈가 될 수 있으므로 간단하고 문제될 일 없는 데이터에만 사용하길 권장합니다.)</p>\n<h3>7-3. Ajax 성능 가이드</h3>\n<h4>Ajax의 성능을 끌어올리기 위해선 응답을 캐시하도록 HTTP Header를 설정해야 합니다.</h4>\n<p>얼마의 기간동안 지니고 있어도 되는지를 파악하고 해당 Expires를 설정하여 브라우저에 저장합니다.\n해당 날짜가 지나면 Cache의 값 대신 서버로 요처을 보냅니다.</p>\n<h4>클라이언트 측에서 가져온 데이터를 로컬에 저장해 재요청을 줄입니다.</h4>\n<p>로컬 스토리지에 URL을 키값으로 하는 데이터를 저장합니다. 그러면 키값에 대한 고민이 해결되고\n데이터를 쉽게 로컬 스토리지에 저장할 수 있습니다. 로컬 스토리지에 값이 없을 때에만 서버로 요청을 보냅니다.</p>\n<hr>\n<p>이번 장은 여기까지 입니다.\nXML은 널리, 많이 사용되지만 파싱에 많은 시간이 소모되는 단점이 있습니다. 이미 널리 사용되었기 때문에\n이전 데이터를 모두 수정하기에 힘든 부분이 많습니다. 이제부터라도 저장되는 데이터는 JSON 형식으로 사용하는 것이\n필수적입니다.</p>\n</section>\n'},sKfu:function(n,s){n.exports='<section><p>인턴 생활이 끝나고 다시 혼자 공부를 시작하면서 시간적 여유가 생겨 블로그를 다시 시작하게 되었습니다.\n오늘 알아보고자 하는 내용은 &quot;RESTful&quot; 입니다.</p>\n<p>바쁜 와중에 \'rest란 이런내용이야\' 하고 살짝 맛만 본 상태라 자세히 알아보기로 했습니다.</p>\n<p><code>Roy Fielding의 2000년 박사논문에서 소개되었다.</code>\n<code>Roy Fielding은 HTTP의 주요 저자 중 한 사람이다.</code>\n<code>이 개념은 네트워킹 문화에 널리 퍼졌다.... (wiki)</code></p>\n<p>REST(Representaional State Transfer)는 웹 프로토콜(HTTP)을 활용하여, 네트워크 기반 Resource 인터페이스를 제안했습니다. 이미 SOAP이라는 규약이 있었으나,\n복잡함 때문에 사용자들이 REST를 더 많이 사용하고 있습니다. 한마디로 REST는 URI + HTTP Method 입니다.</p>\n<p><code>URI = Resource, HTTP Method = Action</code></p>\n<p>자세히 설명을 해보자면,</p>\n<ul>\n<li>URL에 모든 Resource를 표현함.</li>\n<li>CRUD를 이용해 Action을 표현함.</li>\n</ul>\n<p>REST의 가장 큰 특징중의 하나가 모든 자원을 Resource로 표현한다는 것인데, 이 말은 Resource가 HTTP URL에 의해서 표현되는 것입니다. 예를 들어 제 블로그의\narticles 안의 web-presentation 게시글을 보려면 https://jicjjang.github.io/blog/post/web-presentation 로,\nURI 뒤에 articles/web-presentation으로 들어가야 합니다. 이는 REST가 ROA를 따르는 웹 서비스이기 때문입니다.</p>\n<p>CRUD란 create, read, update, delete의 모음으로 HTTP Method 인 GET, POST, PUT, DELETE로 이를 제어합니다.</p>\n<ol>\n<li>https://example.com/user/jicjjang 의 GET Method로 불러온 페이지는 Read (사용자 정보 조회)</li>\n<li>https://example.com/user/jicjjang 의 POST Method로 불러온 페이지는 Create (사용자 정보 생성)</li>\n<li>https://example.com/user/jicjjang 의 PUT Method로 불러온 페이지는 Update (사용자 정보 추가)</li>\n<li>https://example.com/user/jicjjang 의 DELETE Method로 불러온 페이지는 Delete (사용자 정보 삭제)</li>\n</ol>\n<p>현재 HTTP Method는 더 많으나, CRUD만으로 모든 행위를 표현할 수 없고, URL로 표현할 때에도 문맥상 문제가 발생하는 경우가 많습니다.</p>\n<p>REST는 기존 HTTP를 변환없이 그대로 쓸 수 있으므로 사용에 어려움도 없습니다. 그저 조금 더 CRUD와 RESTful함을 생각하며 설계를 해 나가면 됩니다.</p>\n<p>REST는 쓰기 쉽고, 이해하기도 쉬우므로 네트워크 및 웹 서비스 사용자들이 많이 사용하고 있다는 장점이 있습니다. 하지만 표준이 아니라 관리가 어렵다는 점이 단점으로 계속 남아있습니다.</p>\n<figure style="text-align: center;">\n    <img src="https://jicjjang.github.io/blog/static/image/etc/RESTful/crud.jpg" alt="image">\n    <figcaption><a href="http://excitingstory.tistory.com/entry/REST-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0-1%EB%B6%80-%EC%97%B0%EB%8F%99%EC%9D%98-%EC%97%AD%EC%82%AC" title="desciprtion">&lt;출처 - 랄라룰루님&gt;</a></figcaption>\n</figure>\n<hr>\n<p>2000년대에 발표된 논문을 토대로 나온 이론에, 표준 아닌 표준으로 자리잡아 많은 사용자들이 있는 시점에서도 표준으로는 SOAP가 자리잡고 있습니다.\n블로그 글을 쓰기 전에도 자료를 찾으면서도 REST에 대한 충분한 자료들이 많이 있다는 것을 느꼈습니다.\n개인적으로 REST가 표준으로 자리잡기 전에 아마 새로운 표준이 나오지 않을까... 하는 생각도 들었습니다.</p>\n<p>포스팅을 마무리하겠습니다.</p>\n</section>\n'},vSPW:function(n,s){n.exports='<section><p>이번 리뷰는 배송이 잘못되어서 원래 수~목요일 까지던 일정이 조금 밀렸습니다.\n그럼에도 불구하고... 일요일에 책을 모두 읽고 리뷰를 진행합니다.\n(죄송합니다 한빛... 그래도 매번 뽑아주셔서 감사해요! ㅠㅠ)</p>\n<p>리뷰 도서는 항상 회사로 받고있습니다만, <code>모던 스타트업 - 팀 생산성을 높여주는 21가지 도구와 서비스</code>\n라는 제목은 누가봐도 <code>창업을 준비하는구나</code> 라는 느낌을 받을 것 같았(지만 한장 펼처보니 전혀 그렇지 않)습니다.\n(<code>팀 생산성을 높여주는 21가지 도구와 서비스</code> 단어가 특히 작습니다. ㅠㅠ)</p>\n<p>그럼, 이번 리뷰 <code>모던 스타트업</code>에 대한 리뷰를 진행해보겠습니다.</p>\n<hr>\n<p>이번 리뷰도서는 개발과 그로스 해킹에 대한 도구, 서비스들에 대한 소개이므로\n일반적으로 잘 알기 힘든 도구와 서비스들 위주로 리뷰드리려 합니다.</p>\n<h2>1. 조직 관리</h2>\n<h3>1-1. 비즈니스 플랫폼: G 스위트</h3>\n<p>일반적으로 다들 잘 알고계실 Google의 G-Suite 입니다. Mail, Calender, Hangout, Docs 등등\n회사 생활에 필요한 툴 전반을 모두 담고있습니다. Mail을 보내고, 회의 일정을 직접 Calender로 잡으며\nHangout으로 원격 및 화면공유 회의를 진행할 수 있고 기획서나 공용 문서를 Docs, Spreadsheet 등으로\n공유할 수 있습니다.</p>\n<h2>2. 프로젝트 관리</h2>\n<h3>2-5. 지속적 통합 및 배포: 트래비스 CI</h3>\n<p>Github을 쓰다보면 이름을 들어볼 수밖에 없는 도구입니다. 협업 시, 코드의 Sync를 맞추기 위해 사용하며\n코드 업데이트 및 퀄리티 향상을 위해 사용합니다.</p>\n<h3>2-6. 시간 관리: 레스큐타임</h3>\n<p>개인적으로 느끼기엔 <a href="https://francescocirillo.com/pages/pomodoro-technique">뽀모도로 학습법</a>의 팀버전\n같은 느낌이었습니다. 25분 학습에 5분 휴식 같은 방식은 아니지만, 자신이 집중하는 시간 및 일하는 시간을 공유하는 방식으로\nRemote 근무를 하는 곳이라면 주의깊게 볼만한 툴 같네요.</p>\n<h2>3. 인프라 관리</h2>\n<h3>3-1. IaaS: 아마존 웹 서비스</h3>\n<p>이 파트에서 궁금했던 점은 제일 처음 인용된 <code>스스로 만들고, 스스로 운영하라</code> 라는 아마존 CTO의 말이었습니다.\n스스로 만들고 운영해야 한다면 IaaS 서비스가 아니라 직접 만들어야지...?\n궁금증은 일단 뒤로 미루고, 서비스 자체에 대해 말씀드리자면 아마존 서비스 전체에 대한 간단한 세팅과\n사용법에 대한 내용입니다. 제가 직접 AWS를 써본 경험은 없지만 찬양하시는 분들이 이미 많기 때문에\n물리서버를 소유하기 힘든 환경의 개발자라면 이미 사용하시고 계실겁니다.</p>\n<pre><code class="language-javascript"><span class="hljs-keyword">const</span> AWS  = {\n  <span class="hljs-attr">EC2</span>: <span class="hljs-string">\'가상 서버 서비스\'</span>,\n  <span class="hljs-attr">S3</span>: <span class="hljs-string">\'무제한 저장공간 서비스\'</span>,\n  <span class="hljs-attr">RDS</span>: <span class="hljs-string">\'관계형 데이터 서비스\'</span>,\n  <span class="hljs-attr">SQS</span>: <span class="hljs-string">\'메세지 큐 서비스\'</span>,\n  <span class="hljs-attr">Lamda</span>: <span class="hljs-string">\'서버리스 서비스\'</span>,\n}\n</code></pre>\n<h3>3-2. 인스턴스 가상화: 도커</h3>\n<p>Docker도 이미 유명한 서비스죠. 하나의 커널로 여러 환경의 서비스를 관리할 수 있는 가상화도구입니다.\n<code>모던 스타트업</code> 도서에서는 원리가 아닌 사용법에 집중하고 있지만, 서버 개발자라면 필수로 사용해야 합니다.\n(그래서 프론트 개발자인 저는 사용해본 적은 없습니다 ㅠㅠ)</p>\n<p><a href="https://www.slideshare.net/awskorea/codigm-aws-container-day">AWS Container Day</a>에서의\n발표자료를 참고하여 말씀드리자면 <code>AWS S3</code>과 같은 저장소에 도커 구동에 필요한 이미지를 저장해두고,\n이미지의 업데이트는 해당 저장소에서만 실행합니다. 그리고 해당 서비스를 serving할 서버에서\n업데이트가 있을때마다 <code>AWS S3</code> 저장소에서 이미지를 가져옵니다.</p>\n<p>위 발표자료의 구름 IDE에서는 추후 속도개선때문에 도커에 대한 구조를 변경했지만, 기본적인 Flow는 동일합니다.</p>\n<p><img src="http://localhost:3000/blog/static/image/review/modern-startup/docker.jpg" alt="도커"></p>\n<h3>3-4. 설정 자동화: 앤서블</h3>\n<p>서버 설정을 코드로 할 수 있게 도와주는 서비스입니다. 서버를 직접 다룰일은 거의 없기에\n사용해본 경험은 없지만, 주변 서버개발자들 사이에서 들어본 경험이 있는 정도입니다.</p>\n<h2>4. 서비스 운영</h2>\n<h3>4-2. 충돌 감지 및 보고: 크래시리틱스</h3>\n<p>해당 서비스는 안드로이드를 위한 서비스입니다. 나와있진 않지만,\n웹앱에서의 Crash detecting은 <code>Sentry</code>를 주로 사용합니다.\nWebhook을 이용하여 충돌 발생시, 타 서비스로 알림 또한 가능합니다.</p>\n<h3>4-3. 웹 서비스 성능 모니터링: 핑돔</h3>\n<p>보통 많이들 사용하는 UX에 대한 검증(예를 들어, A라는 버튼을 눌렀는지)은\nA 버튼에 event binding을 하는 형식으로 많이 사용하는데, 핑돔은\n해당 서비스의 url을 입력하면, 입력했을 때의 기준으로 해당 페이지를\n크롤링하여 페이지의 요소를 select할 수 있게 해줍니다. 코드에 심어주는\nUser Experience에 대한 이벤트를 제거할 수 있는것만으로도\n뭔가 고마움이 느껴집니다.</p>\n<h3>4-4. 서버 애플리케이션 성능 분석: 뉴렐릭 APM</h3>\n<p>병목이 일어나는 부분을 알 수 있게 도와주는 서비스입니다.\n잘 활용한다면 A/B 테스트에도 사용할 수 있을 것 같고,\n위험한 코드들에 대한 대비책이 될 수 있겠네요.</p>\n<h3>5. 그로스 해킹</h3>\n<h3>5-1. 소셜 미디어 관리: 버퍼</h3>\n<p>기획 쪽 인력들이 좋아할만한 기능을 가진 버퍼 입니다.\n페이스북, 인스타, 트위터와 같은 소셜 미디어의 잠재고객 및 시장 파악을\n통합관리할 수 있게 도와주는 서비스 입니다.</p>\n<hr>\n<p>아무래도 제가 알고있는, 필요한 내용들을 위주로 많이 작성하게 됐습니다.\n모르고 있던 괜찮은 서비스들이 많아서 리뷰를 작성하면서 한번씩 찾아보게 되었는데요!\n그래야 확실히 내용을 알고 사용하는 레벨까지 갈 수 있을 것 같습니다.</p>\n<p>마지막 부분에는 여러 스타트업 CTO님들의 인터뷰 글도 있었지만, 제가 리뷰할\n깜냥은 되지 않는 내용들 같습니다. 하지만 모두 동일 한 생각을 한다 느껴진 것은\n조직을 발전시키기 위해 어떤 도구와 방법을 사용할 것인지에 대한 것과,\n그것에 대한 노력이었습니다.</p>\n<p>이러한 내용들에 대한 총 평은 책의 내용은 사용법에 치중하고 있어서\n정확한 기능을 파악하기 힘들지만, 모르던 서비스와 툴들이 많아\n지루하지 않았다는 것입니다.</p>\n<p>오랜만에 찾기 힘든 <code>재밌는 개발 서적</code>을 보고 리뷰하게 되어 재밌었습니다.</p>\n</section>\n'},wmgb:function(n,s){n.exports='<section><p>개강 후 한동안 블로그에 신경을 쓰지 못했습니다. ㅠㅠ 변명하자면...!</p>\n<h2>2015 서울 앱 공모전</h2>\n<h4><a href="https://github.com/ShanghaiDeluxe/guideMatching">Github repository</a></h4>\n<p>10월 31일까지 제출하는 서울 앱 공모전에 프로젝트를 출품했습니다. 두달동안 진행한 프로젝트에서 여러 이슈가 발견되었지만,\n그 중 몇개의 이슈 및 프로젝트 소개를 해보겠습니다.</p>\n<hr>\n<p>일단 이 프로젝트는 &quot;서울&quot; 이라는 주제 때문에 서울이라는 테두리에서 해야 하는 프로젝트였습니다.\n그래서 생각난게 &quot;서울 관광 활성화를 위해 서울 시민이 직접 가이드가 되어 관광객을 매칭해주자&quot; 였습니다.\n기획자가 따로 없는 상황에서 한번도 해보지 않은 프로젝트 설계에 디비 설계까지...! 역시 해보지 않은 일에 도전한다는건 엄청난 발전을 가져다 준다는 것을\n다시 느끼게 해줬습니다. (성적 뺴고...)</p>\n<ol>\n<li>\n<p>로그인 (부가적으로 회원가입, 분실 PW찾기 등등...)</p>\n</li>\n<li>\n<p>가이드 신청</p>\n<ol>\n<li>\n<p>지하철 역을 중심으로 가이드 받고 싶은 역 찾기.</p>\n</li>\n<li>\n<p>그 역을 가이드하려고 등록해 놓은 사용자에게 가이드 요청 보내기.</p>\n</li>\n</ol>\n</li>\n<li>\n<p>마이페이지</p>\n<ol>\n<li>\n<p>내 정보 수정</p>\n</li>\n<li>\n<p>상대방, 나의 요청 보기 &amp; 받기 &amp; 끝난 여행 댓글달기</p>\n</li>\n</ol>\n</li>\n</ol>\n<p>이 정도가 기본적인 기능이었습니다. 앱이 기본이었기 때문에 웹앱으로 기획을 시작했습니다.</p>\n<p>제 목표는 해보지 않은 것을 하자! -&gt; 처음 해보는 python을 해볼까...? -&gt; 프레임워크 flask/django -&gt; 시간이 많은게 아니니까 풀스택 프레임워크인 django!</p>\n<p>이렇게 프로젝트가 시작되었고, 여러 기능들을 공부하고 시작을 하였습니다.\n(도중에 중간고사가;;; 매우 큰 장벽이었고, 제출도 마감 2분전에;;;; 이때도 카페였는데 문을 닫는다고 나가라고 하는거 사정사정해서... 거의 극적으로 했습니다 ㅠㅠ)</p>\n<hr>\n<p>문제 1. 불안정한 서버...</p>\n<p>예전에 <a href="https://jicjjang.github.io/2015/07/20/malware">Malware</a> 공격을 당했다는 글을 써놨는데 그 문제가 지금까지 이어져오고 있었습니다... (세팅 자체를 잘못한 것 같네요...)</p>\n<figure>\n    <img src="https://jicjjang.github.io/blog/image/python/seoul-app-contest/error1.png" alt="image">\n</figure>\n<p>서버에서 테스트하려고 열어놓은지 3~4일만에... 이... 일단 이 문제는 덮어놓고</p>\n<p>지인분께 부탁을 드려 서버 한귀퉁이를 빌릴 수 있었습니다. <a href="http://wani.kr">wani</a> 감사드려요 :)</p>\n<hr>\n<p>문제 2. django의 csrf 문제.</p>\n<p>웹앱을 만들긴 했지만, front-end 와 back-end를 분리해서 쓰지 않고 하나로 만들고\n앱에서는 InAppbrowser에서 location.href같은 방식으로 주소만 이동하는 방식으로 앱을 만들었습니다. (시간의 촉박함과 front-end framework의 능력 부족으로 ㅠㅠ...)\ndjango는 csrf를 <code>{ % csrf_token % }</code> 이라는 태그로 지원을 해주고 있어서 template에서 사용만 하면 되는데, 자꾸 아래와 같은 에러가 빌생했습니다.</p>\n<figure>\n    <img src="https://jicjjang.github.io/blog/static/image/python/seoul-app-contest/error2-1.png" alt="image">\n    <img src="https://jicjjang.github.io/blog/static/image/python/seoul-app-contest/error2-2.png" alt="image">\n</figure>\n<p>이유를 찾던 도중, <code>@csrf_exempt</code> 라는 태그를 찾았습니다. csrf protection을 제외해 주는 위험한... 기능을 하지만, ajax 통신을 할 때\ncsrf value를 포함해줘도 나는 에러를 제어할 수 없어서 결국 이 어노테이션을 사용해야 했습니다.</p>\n<hr>\n<p>문제 3. Cordova 문제.</p>\n<p>웹앱을 만들었기에 안드로이드, ios 파일로 변환을 해야 하기 때문에, cordova나 phonegap이 필수였습니다.</p>\n<p>그 중에 ios는 udid라는 것을 등록하라고 하였는데 개발자 계정이 있어야 했습니다... (1년 13만원.. ㅠㅠ)</p>\n<p>...</p>\n<p>네 다음 apk...</p>\n<p>apk파일에 올인을 하고 어찌어찌 제출도 다 하고 하였으나, 마지막까지 고치지 못한 기능이 하나 있습니다.</p>\n<p>사진첩에 들어가는 기능인데, cordova.js 에서 지원하는 navigator.camera.getPicture 라는 기능을 써야하는데, InApp에서 location.href로 들어가다 보니</p>\n<p>cordova.js에 접근을 하지 못하더군요... ㅠㅠ 으아아... 일주일이 지난 지금도 해결을 못했습니다.. ㅠㅠ</p>\n<hr>\n<p>이밖에도 무수한 에러나 문제나, 기획 변경, 디자인에 의한 기능 변경 등 두달동안 제대로 쉬지도 못하고, 시험공부도 도중에 애매하게 껴 있어서 몸 고생, 마음 고생 다 하며 보냈습니다.</p>\n<p>처음엔 조그마한 격려상이라도 받았으면 했지만.... (...먼산)</p>\n<p>하하 그래도 첫 공모전을 끝마칠 수 있다는 것 만으로도 너무 뿌듯한 두달이었습니다 :D</p>\n<p>(공모전 덕에 쌓인 과제는 한둘이 아닌데 흐하하ㅡ하하ㅏ하 안정기에 접어드려면 일주일은 족히 걸리겠네요 ㅠㅠ)</p>\n<p>다른 공모전에 또 다른 재밌는 언어, 사람들, 다른 요소들로 참가해 보고 싶네요.</p>\n<p>행복한 두달이었습니다... 모두 공모전에 참가하세요! (홍보?!)</p>\n<p>이젠 자주 공부하며 블로그를 이어 나가겠습니다.</p>\n</section>\n'},yRXK:function(n,s){n.exports='<section><p>iterator를 사용할 수 없는 컬렉션인 Map에서 iterator를 사용하려면 2가지 키워드가 있습니다.<br>\n바로 Map.keyset(), Map.entrySet() 입니다. 둘 다 각자의 특성이 있어서 어떤 것이 더 좋다 비교하기는 어렵습니다.</p>\n<h2>Map.entrySet()</h2>\n<pre><code class="language-java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">iteratorUsingEntrySet1</span><span class="hljs-params">(HashMap map)</span>\n</span>{\n    Set&lt;Map.Entry&lt;String, Integer&gt;&gt; entries = map.entrySet();\n    Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; i = entries.iterator();\n\n    <span class="hljs-keyword">while</span>(i.hasNext()) {\n        Map.Entry&lt;String, Integer&gt; entry = i.next();\n        System.out.println(entry.getKey() + <span class="hljs-string">" : "</span> + entry.getValue());\n    }\n}\n</code></pre>\n<p>간단하게 사용해보겠습니다.</p>\n<pre><code class="language-java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">iteratorUsingEntrySet2</span><span class="hljs-params">(HashMap map)</span>\n</span>{\n    Iterator i = map.entrySet().iterator();\n\n    <span class="hljs-keyword">while</span>(i.hasNext()) {\n        Map.Entry&lt;String, Integer&gt; entry = (Map.Entry&lt;String, Integer&gt;)i.next();\n        System.out.println(entry.getKey() + <span class="hljs-string">" : "</span> + entry.getValue());\n    }\n}\n</code></pre>\n<h2>Map.keySet()</h2>\n<pre><code class="language-java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">iteratorUsingKeySet</span><span class="hljs-params">(HashMap map)</span>\n</span>{\n    Set&lt;String&gt; entries = map.keySet();\n    Iterator&lt;String&gt; i = entries.iterator();\n\n    <span class="hljs-keyword">while</span>(i.hasNext()) {\n        String key = i.next();\n        Object value = map.get(key);\n        System.out.println(key + <span class="hljs-string">" : "</span> + value);\n    }\n}\n</code></pre>\n<p>간단하게 사용해보겠습니다.</p>\n<pre><code class="language-java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">iteratorUsingKeySet</span><span class="hljs-params">(HashMap map)</span>\n</span>{\n    Iterator i = map.keySet().iterator();\n\n    <span class="hljs-keyword">while</span>(i.hasNext()) {\n        String key = (String)i.next();\n        Integer value = (Integer)map.get(key);\n        System.out.println(key + <span class="hljs-string">" : "</span> + value);\n    }\n}\n</code></pre>\n<hr>\n<p>비슷한 두가지 방식 때문에 헷갈릴 요소가 다분합니다. iterator가 편리한 요소이니 만큼 위험한 부분이 많으므로 조심해서 사용해야합니다.</p>\n</section>\n'},z1jw:function(n,s){n.exports="<section><p>한빛미디어 <code>[Functional Programming JAVASCRIPT]</code> 도서에 대한 리뷰를 진행하겠습니다.\n한빛미디어에서 진행하는 세번째 IT 도서 리뷰! 이지만 지난 주까지 였던 리뷰가 늦어지게 되었네요 ㅠㅠ (죄송합니다 한빛미디어...)\n함수형 프로그래밍 서적도 이미 한두권 정도 보았었는데, 다른 책과의 비교도 약간 넣어서 리뷰를 시작하겠습니다.</p>\n<hr>\n<p>함수형 프로그래밍 (이하 FP)이란 말이 떠오르기 시작한건 벌써 몇 년 (<s>태초에는 웹이 이..ㅆ...</s>\n불과 몇 년이 아닌 이유는 웹이 생기고, 대표적 FP인 자바스크립트가 활성화 된\n시기에 비하면 몇 년 조차도 적은 기간이 아니기 때문)이 되었습니다. 하지만 그 기간동안 제대로 정리된\nFP 내용에 대한 서적은 별로 보질 못했던 것 같습니다.</p>\n<p>오늘 이 책을 보고, 다른 곳에서 배우지 못했던 점에 대한 얘기만 해보겠습니다.</p>\n<h2>Chap. 1 함수형 길들이기</h2>\n<p>우선 책을 펼치자 마자 나오는 Chap 1의 예제 코드는 es6 람다 문법.\n이미 자바스크립트 코딩에선 webpack과 babel 설명을 맞추고 es6문법을 사용하는게 기본으로\n자리잡는 마당에 아직 es5에 jQuery로만 예제를 구성하는 책이 있습니다. (하아...)</p>\n<p>RxJS에 대한 적용이 1장부터...? 다른 FP 서적의 마지막 보충설명에서 라이브러리 소개로 나온 걸\n본 적은 있지만 메인으로, 사용 예제가 나온건 애초에 처음 보았습니다.</p>\n<h2>Chap. 2 고계 자바스크립트</h2>\n<p>React에서 핫한 영역으로 자리잡은 HOC (High Order Component)의 베이스가 되는 High\nOrder Function에 대한 설명은 다른 책에서 찾아보기 힘들었는데, 매우 자세히 설명되어 있습니다.\nCurry까지 나와있는 책은 많았지만 이런 부분까지 정리되어있다는데 놀랍네요.</p>\n<h2>Chap. 3 자료구조는 적게, 일은 더 많이, Chap. 4 재사용 가능한, 모듈적인 코드로</h2>\n<p>Chap 3, 4에서는 코드에 대한 정리 및 OOP와 FP에 대한 비교가 주를 이루기 때문에\n앞 Chap처럼 화려한 라이브러리, 최신 OOO에 대한 내용은 없습니다. 하지만 기본에 충실한\n자료구조, Curry 들을 자세히 설명해 놓았습니다.</p>\n<h2>Chap. 5 복잡성을 줄이는 디자인 패턴</h2>\n<p>C, Java처럼 컴파일 언어가 아닌 JS에서 자료구조를 C, Java처럼 직접 유저가 다 구현해서 사용하기는\n힘들지만 디자인 패턴은 어느 정도 구현할 수 있다고 생각합니다. 하지만 그 설명을 찾기란 힘들죠...</p>\n<h2>Chap. 6 빈틈없는 코드 만들기, Chap. 7 함수형 최적화</h2>\n<p>빼놓을 수 없는 테스팅 및 마무리 코드 최적화. 한가지 아쉬운건 이미 대세인 jest나 mocha를 놔두고\njQuery에서 만든 Qunit을 사용했어야 하는가.... 라는 부분입니다.</p>\n<h2>Chap. 8 비동기 이벤트와 데이터를 관리</h2>\n<p>사실 제일 기대하기도 했고, 어떤 JS 책을 보던 가장 중요하게 생각하는 부분입니다.\nes6가 생긴 이후 가장 빠르게 변하기도 하며 다른 언어에서 또한 포커싱이 맞춰져 있는 비동기.</p>\n<p>es5에서 es6로 올라가면서 Promise가, es6에서 es7으로 올라가면서 async/await이 사용되고 있는데\nPromise로, 내용을 발전시켜 RxJS까지, 사용자가 어떻게 프로그램을 발전시켜야 하는지 알려주기 위한\n정성이 느껴집니다.</p>\n<hr>\n<p>항상 자바스크립트에 관련된 책만 읽고, 리뷰도 그에 관련된 내용들만 하는데 그 중 가장 앞서나가는 책이\n확실하다고 생각합니다. 이전까지의 책들에서 보지 못했던 발전 (es6, 비동기 처리, HOF, RxJS 등등)들을\n제대로 정리해 놓았고, 어려운 부분까지 확실하게 풀어 설명했네요. 저도 따라가지 못했던 부분들이\n몇몇 보여서 반성하게 되었습니다.</p>\n<p>단점은 아니지만 지금 당장 시작하는 초보자가 보기에는 약간의 허들이 있다곤 생각합니다. 5단계로 치면\n2~3단계 정도의 초중급 책이며 그 위로 올라갈 수 있도록 확실히 뒷받침 해줄 수 있다고 확신할 수 있겠습니다.</p>\n</section>\n"},zhBN:function(n,s){n.exports='<section><p>평소에 관심있었던 <code>[RxJS 프로그래밍]</code> 책에 대한 리뷰를 진행하려 합니다.\n11월 초 서비스 런칭을 준비하고 있어서 짬이 나지 않았는데요.\n블로그 포스팅들과 리뷰를 할 틈이 나질 않았다는 변명을... 하면서\n항상 그렇듯 지각인 리뷰를 시작하겠습니다.</p>\n<hr>\n<p>솔직히, 이 책을 제외하고도 RxJS 책이 한 권 있습니다.\n두 책을 비슷한 시기에 읽다보니 자연스레 비교하며 읽게 되었는데요!</p>\n<p>본격적인 리뷰를 시작하기에 앞서 설명드리자면\n<code>기본적인 부분에 있어서 철저히 RxJS 문서를 기반으로 하는 설명</code>이 있다고 생각합니다.\n어느 정도 지식이 있는 상태에서라면 <code>그냥 문서를 읽지...</code> 라고 생각하겠지만\n친절하게 번역해서 상황에 맞는 예제와 다이어그램으로 설명을 해주며\n예제 또한 실제 문서에서 보여주는 예제를 각색하여, 문서를 이해하기도 쉽게 도와줍니다.</p>\n<h2>Part. 1 RxJS 소개</h2>\n<p>Part 1 이하에는 <code>RxJS 소개와 개발 환경 구축</code>, <code>RxJS의 기본 개념</code>, <code>생성 함수</code>\n가 설명되며 RxJS의 가장 중요한 개념인 Observable, Observer, Subject, Subscription에 대한\n기본적인 설명과 Observable을 생성하기 위한 함수들과 기능들에 대해 말해줍니다.</p>\n<p>기초적이면서도 시작점인 부분이기에 RxJS 책에선 가장 중요한 부분입니다.</p>\n<h2>Part. 2 RxJS의 연산자, Part. 3 효과적인 RxJS 사용</h2>\n<p>이 부분들은 간단히 말해 <code>Part. 1</code>에서 생성된 Observable을 어떻게 다룰지에 대한 소개를 담은\n챕터이다. RxJS를 상황마다 유연하게 사용하려면 이 부분을 자세히 알아야 하지만\n<a href="https://rxjs-dev.firebaseapp.com/api">RxJS공식 문서</a> 를 보면 알 수 있듯이\n엄청난 수의 Operators가 있기 때문에 보통은 이 모든 동작을 외울 수 없습니다.\n(es5 ~ es8까지의 모든 기능을 외울 수 없는 것처럼...)\n익숙한 JS 개발자라면 기능들을 천천히 살피는 것이\n<code>모를 때 어떻게 찾아야 하는지</code> 에 대해 도움이 된다는 것을 알 수 있을 것입니다.</p>\n<h2>Part. 4 실전 RxJS</h2>\n<p>이 책에서 가장 흥미로웠고, 읽기 전부터 기대했던 부분인데요. ES6 (ES2015+)와의 async / await과 함께 사용하는 방법이나\n(Vue는 없지만) React, Angular 와의 콜라보, redux / redux-observable 라이브러리로 사용하는 RxJS 등등,\n실전에서 사용하는 방법들에 대한 설명이 이어집니다.</p>\n<hr>\n<p>이번 책 리뷰의 내용은 개념적으로 크게 어려운 부분이 없어 이정도로 정리하려 합니다.\n이 책에서는 첫 부분에 말한 장점이 단점이기도 한데요,\n<code>친절하게 번역해서 상황에 맞는 예제와 다이어그램으로 설명을 해주며 예제 또한 실제 문서에서 보여주는 예제를 각색</code>\n이라는 말은 <code>영어 번역이 어려운 초보자에게 하는 설명입니다.</code> 라는 말일 수 있고, es2015 문법도 자세히 설명하는 것이\n<code>책을 읽는 독자의 미니멈 수준을 너무 낮게 잡은게 아닐까~</code> 생각들게 하였습니다.</p>\n<p>초보적인 부분에 큰 도움이 될 수는 있겠지만, 실무적인 부분에 참고할 부분이 적었던 것은 사실입니다.\n이러한 부분에 있어 약간의 아쉬움을 가지고 이번 리뷰 마무리 하겠습니다.</p>\n<p>감사합니다.</p>\n</section>\n'}});