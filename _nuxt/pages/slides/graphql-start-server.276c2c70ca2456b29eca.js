webpackJsonp([14],{"0zQE":function(t,a,s){"use strict";Object.defineProperty(a,"__esModule",{value:!0});var i=s("zzjs"),e=s("26aK"),n=s("VU/8")(i.a,e.a,!1,null,null,null);n.options.__file="pages/slides/graphql-start-server.vue",a.default=n.exports},"26aK":function(t,a,s){"use strict";var i=function(){var t=this.$createElement;this._self._c;return this._m(0)};i._withStripped=!0;var e={render:i,staticRenderFns:[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"slides"},[s("section",{attrs:{ondblclick:"RevealNotes.open();"}},[s("h2",[t._v("GraphQL 시작하기 1")]),s("h3",[t._v("NHN Bugs")]),s("p",[s("small",[t._v("Created by "),s("a",{attrs:{href:"https://jicjjang.github.io/blog",target:"_blank"}},[t._v("Junseok, Choi")])])]),s("aside",{staticClass:"notes"},[t._v("\n      주제를 시작하기 1로 정한것은, 서버와 클라이언트 모두 적용해야 하기 때문인데,\n      금일 발표는 서버를 위주로 발표를 진행하고, 추후 발표에서 Vue에 적용한\n      클라이언트 위주의 발표를 진행하겠습니다.\n    ")])]),s("section",[s("div",[s("h2",[t._v("순서")]),s("ul",{staticStyle:{"list-style":"none",margin:"0"}},[s("li",{staticClass:"fragment"},[t._v("1. About GraphQL")]),s("li",{staticClass:"fragment"},[t._v("2. Example GraphQL")]),s("li",{staticClass:"fragment"},[t._v("3. Stable GraphQL")]),s("li",{staticClass:"fragment"},[t._v("Q & A")])])])]),s("section",[s("section",[s("h2",[t._v("1. About GraphQL")]),s("div",{staticStyle:{width:"90%",margin:"0 auto"}},[s("span",{staticStyle:{display:"inline-block",width:"58%",margin:"5px","vertical-align":"top"}},[s("img",{staticClass:"fragment",attrs:{"data-fragment-index":"1",src:"/blog/static/slides/image/graphql-start/about1.jpg"}}),s("div",{staticClass:"fragment",staticStyle:{"font-size":"20px"},attrs:{"data-fragment-index":"3"}},[t._v("필요한 것만 정확히 물어볼 수있는 기능을 제공하며 시간이 지남에 따라 API를 쉽게 개발할 수 있도록...")])]),s("span",{staticStyle:{display:"inline-block",width:"38%",margin:"5px"}},[s("img",{staticClass:"fragment",attrs:{"data-fragment-index":"2",src:"/blog/static/slides/image/graphql-start/about2.jpg"}}),s("div",{staticClass:"fragment",staticStyle:{"font-size":"20px"},attrs:{"data-fragment-index":"4"}},[t._v("GraphQL은 단독 버전 관리를 통해 기존 코드 수정없이 보다 깨끗하고 유지보수가 쉽게 사용이 가능...")])])]),s("aside",{staticClass:"notes"},[t._v("\n        4/4"),s("br"),t._v("\n        이러한 장점이 있는데요,\n        저희 서비스에 적용한다면 어떤 도움이 될지,\n        어떤 점을 미리 살펴봐야 할 지 알아보겠습니다.\n      ")])]),s("section",[s("h2",[t._v("들어가기에 앞서...")]),s("div",{staticStyle:{display:"inline-block",width:"45%","vertical-align":"top"}},[s("img",{staticClass:"fragment",attrs:{"data-fragment-index":"1",src:"/blog/static/slides/image/graphql-start/apollo1.png"}}),s("div",{staticClass:"fragment",attrs:{"data-fragment-index":"3"}},[s("a",{attrs:{href:"https://graphql-kr.github.io/code/#apollo-server-https-www-apollographql-com-docs-apollo-server-github-https-github-com-apollographql-apollo-server-npm-https-www-npmjs-com-package-apollo-server-express",target:"_blank"}},[t._v("Apollo를 사용합니다.")])])]),s("div",{staticStyle:{display:"inline-block",width:"50%"}},[s("img",{staticClass:"fragment",attrs:{"data-fragment-index":"2",src:"/blog/static/slides/image/graphql-start/apollo2.png"}})]),s("aside",{staticClass:"notes"},[t._v("\n        3/3"),s("br"),t._v("\n        그 전에, GraphQL은 Apollo와 함께 사용하겠습니다.\n        기본적으로 `GraphQL은 API를 위한 쿼리언어` 이므로 서버만 지원을 합니다.\n        서버에 GraphQL을 적용하고, 클라이언트에서는 데이터만 호출할 수도 있지만\n        프론트와 서버 사이 GraphQL 데이터를 편리하게 교환할 수 있도록\n        Apollo가 도와줍니다."),s("br"),s("br"),t._v("\n        Apollo는 JavaScript 서버 프레임워크들에 대해서 클라이언트와의 더욱 쉬운 연결을 위해\n        별도의 지원 또한 하고있습니다.\n        "),s("br"),s("br"),t._v("\n        또한, GraphQL에서도 공식적으로 Apollo를 사용하라고 가이드를 제공해줍니다.\n        (물론 서버까지 커버해줍니다.)\n      ")])]),s("section",[s("h3",[s("a",{attrs:{href:"https://github.com/seouldrinker/seoulDrinkerGraphql/blob/master/api/graphql/typeDefs.js",target:"_blank"}},[t._v("Type 정의")])]),s("div",[s("img",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"15%",margin:"0 10px"},attrs:{src:"/blog/static/slides/image/graphql-start/type1.jpg"}}),s("img",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"15%",margin:"0 10px","vertical-align":"top"},attrs:{src:"/blog/static/slides/image/graphql-start/type2.jpg"}}),s("span",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"65%","margin-top":"20%","vertical-align":"top"}},[t._v("MVC 모델에서의 Model과 동일")])]),s("aside",{staticClass:"notes"},[t._v("\n        2/3"),s("br"),t._v("\n        MVC 모델에서의 Model과 동일하게 DB의 필드가 아닌,\n        "),s("br"),t._v("3/3"),s("br"),t._v("\n        가져올 데이터에 대해 사전에 정의를 해놓습니다.\n      ")])]),s("section",[s("h3",[s("a",{attrs:{href:"https://github.com/seouldrinker/seoulDrinkerGraphql/blob/master/api/graphql/typeDefs.js",target:"_blank"}},[t._v("Query & Mutation 정의")])]),s("div",[s("img",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"25%",margin:"0 10px"},attrs:{src:"/blog/static/slides/image/graphql-start/query_mutation.jpg"}}),s("span",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"65%","margin-top":"20%","vertical-align":"top"}},[t._v("데이터를 가져올 수 있는 조합인 Query 및 Mutation을 정의합니다.")])]),s("aside",{staticClass:"notes"},[t._v("\n        1/2"),s("br"),t._v("\n        저희가 기존에 만들던 Query와 동일합니다.\n        Mutation은 Get이 아닌 Post, Put, Delete, Options 요청들이며,\n        "),s("br"),t._v("2/2"),s("br"),t._v("\n        정의에 있어서 Get과 큰 차이는 없습니다.\n      ")])]),s("section",[s("h3",[t._v("Interface 정의")]),s("div",[s("div",{staticClass:"fragment",staticStyle:{width:"48%",margin:"0 auto"}},[s("pre",[s("code",{staticStyle:{"font-size":"12px","line-height":"18px"},attrs:{"data-trim":"","data-noescape":""}},[t._v("\n            interface Character {\n              id: ID!\n              name: String!\n              friends: [Character]\n              appearsIn: [Episode]!\n            }\n\n            type Human implements Character {\n              id: ID!\n              name: String!\n              friends: [Character]\n              appearsIn: [Episode]!\n              starships: [Starship]\n              totalCredits: Int\n            }\n\n            type Droid implements Character {\n              id: ID!\n              name: String!\n              friends: [Character]\n              appearsIn: [Episode]!\n              primaryFunction: String\n            }\n          ")])])]),s("div",{staticClass:"fragment"},[t._v("interface를 상속하여 타입 구현")])]),s("aside",{staticClass:"notes"},[t._v("\n        1/2"),s("br"),t._v("\n        React, Vue에 Flow나 Typescript로 타입에 강제성을 부여는 것과 마찬가지로\n        "),s("br"),t._v("2/2"),s("br"),t._v("\n        GraphQL에 Interface를 정의 후, type에서 implements 한 값을 정의합니다.\n      ")])]),s("section",[s("h3",[t._v("Resolver")]),s("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"55%","vertical-align":"top"}},[s("img",{attrs:{src:"/blog/static/slides/image/graphql-start/resolvers1.png"}})]),s("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"40%",margin:"0 10px"}},[s("img",{attrs:{src:"/blog/static/slides/image/graphql-start/resolvers2.png"}})]),s("div",{staticClass:"fragment"},[t._v("정의한 Query와 Mutation에 대한 내용을 구현합니다.")]),s("aside",{staticClass:"notes"},[t._v("\n        2/3"),s("br"),t._v("\n        type으로 정의한 모델에 맞게 기능들을 구현합니다.\n        "),s("br"),t._v("3/3"),s("br"),t._v("\n        모델들이 구현되어있는 이유는, 해당 모델에서 조인하여 가져오는 값들을\n        어떻게 가져올지에 대해 정의한 것입니다.\n        `pubDetail` Query를 실행한다고 하였을 때, return 값은 Pub 모델과 같은데 Pub 에는\n        Feed의 배열인 `_feedList` 값이 있습니다. 이 값을 구현해줍니다. 또한, Feed에서 연결된,\n        연결된, 연결된.... 값들을 모두 정의해주면\n        필요할 경우, 원하는 쿼리에 대한 결과를 가져올 수 있습니다.\n      ")])])]),s("section",[s("h3",[t._v("2. Example GraphQL")]),s("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"50%","vertical-align":"top"}},[s("div",{staticStyle:{"font-size":"20px"}},[s("a",{attrs:{href:"https://github.com/seouldrinker/seoulDrinkerGraphql",target:"_blank"}},[t._v("< 예제를 보면서 확인해봅시다! >")])])])]),s("section",[s("section",[s("h3",[t._v("3. Stable GraphQL")]),s("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"50%","vertical-align":"top"}},[s("img",{attrs:{src:"/blog/static/slides/image/graphql-start/stable1.png"}}),s("div",{staticStyle:{"font-size":"20px"}},[s("a",{attrs:{href:"https://www.apollographql.com/docs/#client-section",target:"_blank"}},[t._v("< Apollo 클라이언트 >")])])]),s("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"40%"}},[s("img",{attrs:{src:"/blog/static/slides/image/graphql-start/stable2.png"}}),s("div",{staticStyle:{"font-size":"20px"}},[s("a",{attrs:{href:"http://graphql.org/code/#server-libraries",target:"_blank"}},[t._v("< GraphQL 서버 >")])])]),s("div",{staticClass:"fragment"},[t._v("서버와 클라이언트 각종 언어 및 라이브러리에 대응")]),s("aside",{staticClass:"notes"},[t._v("\n        3/3"),s("br"),t._v("\n        GraphQL가 만들어진 12년도 이후로 서버는 각종 언어에 대한 지원을 시작했습니다.\n        Apollo는 16년 2월 경 시작하였지만 현재 스타 6,500여개에 contributor가 700명 이상입니다.\n      ")])]),s("section",[s("h3",[t._v("사용하면서 발견한 이슈?!")]),s("div",{staticClass:"fragment"},[t._v("는 아직까지 없습니다.")]),s("aside",{staticClass:"notes"},[t._v("\n        1/1"),s("br"),t._v("\n        아직까지 만들어보면서 발견한 이슈는 없고, Get, Post 등 동작은 확인했지만\n        파일이나 이미지 업로드에 대한 구현을 해보지 못했습니다.\n      ")])]),s("section",[s("h3",[t._v("벅스에 도움이 될만한 부분")]),s("div",{staticClass:"fragment"},[t._v("클라이언트 & 웹, 지금의 API로 한번에!!")]),s("aside",{staticClass:"notes"},[t._v("\n        1/1"),s("br"),t._v("\n        클라이언트와 웹 모두 API를 사용한다고 하면, 서로 다른 API를 가져오는 이슈가 있는데\n        이를 GrapghQL로 해결이 가능합니다.\n      ")])]),s("section",[s("h3",[t._v("사용 중인 기업")]),s("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"50%","vertical-align":"top"}},[s("img",{attrs:{src:"/blog/static/slides/image/graphql-start/users.png"}}),s("div",{staticStyle:{"font-size":"20px"}},[s("a",{attrs:{href:"http://graphql.org/users/",target:"_blank"}},[t._v("< 더 많은 기업들 >")])])]),s("aside",{staticClass:"notes"},[t._v("\n        1/1"),s("br"),t._v("\n        많은 기업에서 사용중이지만, 대표적으로 이미지와 같이 페이스북, 깃헙, 핀터레스트, 코세라 등등의\n        기업들에서 사용 중입니다.\n      ")])]),s("section",[s("h3",[t._v("컨퍼런스")]),s("div",{staticClass:"fragment",staticStyle:{display:"inline-block",width:"50%","vertical-align":"top"}},[s("img",{attrs:{src:"/blog/static/slides/image/graphql-start/conference.png"}}),s("div",{staticStyle:{"font-size":"25px"}},[s("a",{attrs:{href:"https://summit.graphql.com/",target:"_blank"}},[t._v("< 발표자 - 페이스북, 깃헙, 트위치, oauth, IBM 등등 기업 직원들... >")])])]),s("aside",{staticClass:"notes"},[t._v("\n        1/1"),s("br"),t._v("\n        2016, 2017년도에 Apollo의 주도로 컨퍼런스가 이루어졌으며 매년 개최될 예정입니다.\n      ")])])]),s("section",[s("section",[s("h1",[t._v("Q & A")])]),s("section",[s("h1",[t._v("끝")]),s("div",[t._v("감사합니다.")])])])])}]};a.a=e},zzjs:function(t,a,s){"use strict";a.a={name:"graphql-start-server",layout:"slides"}}});