webpackJsonp([12],{"7nVi":function(t,s,a){"use strict";var e=function(){var t=this.$createElement;this._self._c;return this._m(0)};e._withStripped=!0;var n={render:e,staticRenderFns:[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"slides"},[a("section",[a("h1",[t._v("React.js")]),a("h3",[t._v("Javascript View Framework")]),a("p",[a("small",[t._v("Created by "),a("a",{attrs:{href:"https://jicjjang.github.io/blog"}},[t._v("Junseok, Choi")])])])]),a("section",[a("p",[t._v("시작은 페이스북 & 인스타그램 개발자들의 View에만 집중된 프레임워크를 블라블라....(생략)")]),a("br"),a("h2",{staticClass:"fragment"},[a("a",{attrs:{href:"https://facebook.github.io/react/blog/2013/06/05/why-react.html"}},[t._v('"지속해서 데이터가 변화하는 대규모 애플리케이션을 구축하기" 용도')])]),a("aside",{staticClass:"notes"},[t._v("\n      물론 data, routing, action에 대한 기능들 사용 가능합니다.\n    ")])]),a("section",[a("section",[a("h2",[t._v("React의 특징")]),a("aside",{staticClass:"notes"},[t._v("\n        맨날 사람들이 React, React하는데 왜 그런지 장점에 대해서 한번 살펴보겠습니다.\n      ")])]),a("section",[a("h2",[t._v("Components")]),a("p",{staticStyle:{width:"60%",margin:"0 auto"}},[a("img",{attrs:{src:"/blog/static/slides/image/react-basic/component.png"}})]),a("small",[t._v("\n        출처 - http://www.slideshare.net/taggon/react-js-46357445\n      ")]),a("aside",{staticClass:"notes"},[t._v("\n        Component란, 재사용 가능한 UI 구성 단위입니다. React는 컴포넌트 구조로 이루어져 있으며 컴포넌트를 만들때 JSX문법이 사용됩니다. 상위에서 하위 컴포넌트로 연결되어 서로 결합됩니다. 컴포넌트 별로 데이터가 사용됩니다.\n      ")])]),a("section",[a("h2",[t._v("Components")]),a("p",{staticStyle:{width:"80%",margin:"0 auto"}},[a("img",{attrs:{src:"/blog/static/slides/image/react-basic/component_example.png"}})]),a("aside",{staticClass:"notes"},[t._v("\n        제가 예전에 공부했던 코드입니다.\n        데이터는 state와 prop를 이용하는데, props는 불변하는 객체, state 변하는 객체 입니다.\n        뒤에서 더 자세히 설명드리겠습니다.\n      ")])]),a("section",[a("h2",[t._v("Virtual DOM")]),a("p",[a("span",[t._v("DOM?")]),t._v(" No..., "),a("span",[t._v("Virtual DOM?")]),t._v(" Yes!\n      ")]),a("aside",{staticClass:"notes"},[t._v("\n        SPA앱에서 사용자가 끊임없이 data를 가져오고, 현재 상태를 확인해서 data-binding을 해줘야 하는데 이 과정은 프로젝트가 커질수록 복잡해집니다."),a("br"),t._v("\n        React에서는 가상의 DOM을 사용합니다. Virtual DOM에서는 Reactive Rendering 기법을 이용해 DOM에 변경사항이 생기면 이를 감지하고 변경된 부분만 Re-Rendering을 합니다.\n        브라우저에 의존적이지 않고 / 빠르다는 장점이 있습니다.\n      ")])]),a("section",[a("h2",[t._v("단반향 데이터 흐름")]),a("p",[t._v("\n        상위 컴포넌트 (Parent) to 하위 컴포넌트 (Children)\n      ")]),a("p",{staticStyle:{width:"80%",margin:"0 auto"}},[a("img",{attrs:{src:"/blog/static/slides/image/react-basic/tree.png"}})]),a("aside",{staticClass:"notes"},[t._v("\n        앞서 보여드린 코드와 같이 CardList, CardItem, CardDetail 과 같이\n        상위 -> 하위 로 진행되는 구조를 나타냅니다. 이러한 컴포넌트 구조를 따라가며\n        데이터 또한 단방향으로 진행되게 됩니다.\n      ")])]),a("section",[a("h2",[t._v("JSX")]),a("p",[t._v("\n        Javascript + XML\n      ")]),a("aside",{staticClass:"notes"},[t._v("\n        XML의 문법을 차용하여 사용합니다. 자바스크립트 자체로도 만들 수 있고, 처음엔 불편하기도 하지만\n        조금만 사용해 보면 훨씬 간단하고 쉽게 Comopnent를 만들 수 있습니다.\n        JSX문법으로 만든 후 JSXTransformer로 JS코드 컴파일링을 합니다.\n      ")])]),a("section",[a("h2",[t._v("Flux")]),a("p",{staticStyle:{width:"80%",margin:"0 auto"}},[a("img",{attrs:{src:"/blog/static/slides/image/react-basic/mvc.png"}})]),a("aside",{staticClass:"notes"},[t._v("\n        flux 패턴의 사용은 필수는 아닙니다. 웹의 구조에서 양방향 데이터 바인딩 형식인 mvc 패턴의 사진입니다.\n      ")])]),a("section",[a("h2",[t._v("Flux")]),a("p",{staticStyle:{width:"80%",margin:"0 auto"}},[a("img",{attrs:{src:"/blog/static/slides/image/react-basic/flux.png"}})]),a("aside",{staticClass:"notes"},[t._v("\n        flux 패턴은 MVC와는 다르게 단방향 데이터 통신에 맞게 나온 새로운 패턴입니다.\n        Dispatcher, Stores, View 로 구성되어 있는데, action을 실행하고, 저장하고, 보여줄 수 있는\n        구조로 구성되어 있습니다.\n      ")])]),a("section",[a("h2",[t._v("Flux")]),a("p",{staticStyle:{width:"80%",margin:"0 auto"}},[a("img",{attrs:{src:"/blog/static/slides/image/react-basic/flux1.png"}})]),a("aside",{staticClass:"notes"},[t._v("\n        state는 액션마다 재기록 되는데, 각각의 액션 전, 후로 state를 구분해줘야 합니다.\n      ")])]),a("section",[a("h2",[t._v("Flux")]),a("p",{staticStyle:{width:"80%",margin:"0 auto"}},[a("img",{attrs:{src:"/blog/static/slides/image/react-basic/flux2.png"}})]),a("aside",{staticClass:"notes"},[t._v("\n        그리고 middleware를 쉽게 붙일 수 있어야 하는데, 이 또한 쉽지 않습니다.\n      ")])]),a("section",[a("h2",[t._v("Redux")]),a("p",{staticStyle:{width:"80%",margin:"0 auto"}},[a("img",{attrs:{src:"/blog/static/slides/image/react-basic/redux1.png"}})]),a("aside",{staticClass:"notes"},[t._v("\n        이를 해결하기 위해 Flux 기반의 Redux 라이브러리를 사용합니다.\n        액션 전, 후로 state를 구분하지 못하는 문제는 액션 마다 상태를 수정하지 않는 대신\n        상태를 복사하여 각각의 복사본을 수정해주는 방식을 택했습니다.\n      ")])]),a("section",[a("h2",[t._v("Redux")]),a("p",{staticStyle:{width:"80%",margin:"0 auto"}},[a("img",{attrs:{src:"/blog/static/slides/image/react-basic/redux2.png"}})]),a("aside",{staticClass:"notes"},[t._v("\n        그리고 연결하기 힘든 middleware는 액션에만 적용하여 데이터와는 관심사를 분리시켰습니다.\n      ")])])]),a("section",[a("h2",[t._v("기타 등등...")]),a("p",[t._v("기타 등등이라고 중요하지 않은 것은 아닙니다.")]),a("ul",[a("li",{staticClass:"fragment"},[t._v("es6")]),a("li",{staticClass:"fragment"},[t._v("webpack")]),a("li",{staticClass:"fragment"},[t._v("npm")]),a("li",{staticClass:"fragment"},[t._v("...")])]),a("aside",{staticClass:"notes"},[t._v("\n      React로 개발을 시작하면 무조건 만날 수 밖에 없는 요소들이지만\n      지금 세미나에선 생략하겠습니다.\n    ")])]),a("section",[a("h2",[t._v("환경 설정")]),a("p",{staticClass:"fragment fade-out",staticStyle:{position:"absolute"}},[t._v("이제 npm으로 babel와 react, 부가적인 라이브러리를 설치하고 babel로 JSX를 JS로 컴파일 하는 환경과 webpack.config.js로 개발환경 전용 서버를 돌아가게 하는 세팅을 하고...")]),a("h3",{staticClass:"fragment fade-in"},[t._v("이 모든 것을 간단하게!"),a("br"),a("a",{attrs:{href:"https://github.com/facebookincubator/create-react-app"}},[t._v("create-react-app!")])]),a("aside",{staticClass:"notes"},[t._v("\n      초반에는 설정이 꽤나 복잡했습니다. React의 컨트리뷰터인 Dan Abramov 이런 문제를 인지하고 있었는데, (제가 듣기론 Vue.js였던 것 같습니다.) 컨퍼런스의 Framework 내장 shell 환경을 보고\n      자동으로 세팅을 해주는 환경을 만들었다고 합니다. 이 환경을 install해주고, run만 해주면 바로 React 전용 서버가 켜지게 됩니다. dev환경에서 사용하는 서버이기 때문에, 개발이 끝난 후 build를 하면\n      개발 시 사용되었던 라이브러리들이 한꺼번에 build되어 나타납니다.\n    ")])]),a("section",{attrs:{"data-markdown":""}},[a("script",{attrs:{type:"text/template"}},[t._v("\n      ## 환경 설정\n      ```\n      $ npm install -g create-react-app\n      $ create-react-app my-app\n      $ npm start\n      ```\n      #### 끝.\n    ")])]),a("section",[a("h2",[t._v("개발")]),a("p",{staticClass:"fragment",staticStyle:{width:"60%",margin:"0 auto"}},[a("img",{attrs:{src:"/blog/static/slides/image/react-basic/develop.png"}})]),a("aside",{staticClass:"notes"},[t._v("\n      이제 실제 개발에 대해 알아보겠습니다.\n    ")])]),a("section",[a("section",{staticStyle:{"font-size":"28px"},attrs:{"data-markdown":""}},[a("script",{attrs:{type:"text/template"}},[t._v('\n        ## Data를 사용하기 위한 필요 요소\n        ### 1. props\n        ```\n        class hello extends Component {\n          // 3. 생성자에서 this.props를 사용하기 위해서는\n          // super에 props를 넣어주어야 합니다.\n          constructor(props) {\n            super(props);\n          }\n\n          render() {\n            // 4. return 은 단일 태그로만 가능.\n            return (\n              // 5. 부모 컴포넌트에서 전달해 준 name을 넣어준다.\n              // => Hello junseok!\n              <p>Hello {this.props.name}!</p>\n            )\n          }\n        }\n\n        ReactDOM.render(\n          <hello name="junseok" />,\t// 1. 컴포넌트를 호출하면서 name props를 넘겨준다.\n          document.getElementsById("root")\t// 2. 호출한 컴포넌트를 해당 DOM에 넣어준다.\n        );\n        ```\n      ')]),a("aside",{staticClass:"notes"},[t._v("\n        props는 부모 컴포넌트에서 자식 컴포넌트로 넣어준 데이터로, 상수처럼 변하지 않는 값 입니다. 위 예제처럼 호출하면서 넣어준 데이터를 하위 컴포넌트에서 사용할 수 있습니다.\n      ")])]),a("section",{staticStyle:{"font-size":"28px"},attrs:{"data-markdown":""}},[a("script",{attrs:{type:"text/template"}},[t._v("\n        ## Data를 사용하기 위한 필요 요소\n        ### 2. state\n        ```\n        class hello extends Component {\n          constructor(props) {\n            super(props);\n            // 1. state를 초기화해준다.\n            this.state = {\n              count: 0\n            }\n          }\n          // 2. 이벤트가 들어오면 count가 1 증가하는 함수\n          increase() {\n            this.setState({count: this.state.count+1});\n          }\n          render() {\n            // 3. JSX에서 onclick같은 부분은 camel-case로 써야한다.\n            // ps. css도 마찬가지 (backgroundImage, backgroundColor...)\n            // 4. a에 click 이벤트를 연결해준다.\n            return (\n              <a onClick={this.increase.bind(this)}>Click me!</a>\n            )\n          }\n        }\n        ```\n      ")]),a("aside",{staticClass:"notes"},[t._v("\n        state는 변수처럼 변할 수 있는 데이터를 들고있습니다. 여러 이벤트에 사용할 수 있습니다. 상위컴포넌트의 state를 자식에게 준다면 어떻게 될까요?\n        자식에서는 props로 사용하게 됩니다. 하지만 부모 요소의 this.state.a가 바뀐다고 하면 Re-Rendering이 되기 때문에 자식 또한 바뀌게 됩니다.\n      ")])]),a("section",{staticStyle:{"font-size":"28px"}},[a("h2",[t._v("Data를 사용하기 위한 필요 요소")]),a("h3",[t._v("3. Life Cycle")]),a("p",{staticStyle:{width:"80%",margin:"0 auto"}},[a("img",{attrs:{src:"/blog/static/slides/image/react-basic/lifecycle.png"}})]),a("small",[t._v("출처 - https://www.reddit.com/r/javascript/comments/45khex/reactjs_life_cycle_diagram_oc/")]),a("aside",{staticClass:"notes"},[t._v("\n        생명주기 입니다. 만들어 질 때, 업데이트 될 때, 없어질 때 3가지 케이스로 나눠져 rendering이 되는데\n        rendering이 되는 과정에 거쳐가는 메서드 들입니다. 이 메서드 들을 이용해 컴포넌트가\n        생성이나 업데이트 전에 데이터를 가져오거나 초기화 하는 기능, 지워지기 직전에 어떠한 행동 등을 할 수 있습니다.\n      ")])])]),a("section",[a("h2",[t._v("Think about it")]),a("h3",{staticClass:"fragment"},[t._v("어라?")]),a("p",{staticClass:"fragment"},[t._v("그렇다면 state와 props는"),a("br"),t._v("각각의 컴포넌트가 모두 들고있는 건가?")]),a("h2",{staticClass:"fragment"},[t._v("ㅇㅇ")]),a("aside",{staticClass:"notes"},[t._v("\n      네. 모든 컴포넌트는 각각의 state와 props를 가지고 있습니다. 그렇기에 data가 어디에서 어떻게 사용되는지 주의깊게 살피고 사용해야 합니다.\n    ")])]),a("section",[a("section",[a("h2",[t._v("이쯤에서 다시보는 Redux")]),a("p",{staticClass:"fragment",staticStyle:{width:"80%",margin:"0 auto"}},[a("img",{attrs:{src:"/blog/static/slides/image/react-basic/withRedux.png"}}),a("small",[t._v("출처 - https://css-tricks.com/learning-react-redux/")])]),a("aside",{staticClass:"notes"},[t._v("\n        Flux 패턴은 꼭 있어야 하는 것은 아니지만 거의 필수처럼 자리잡고 있습니다.\n        Redux가 없는 Flux에서는 왼쪽과 같이 각각의 데이터가 어지럽게 사용됩니다. 그러나 Redux는 Store를 공유하기때문에 어디서든 자유롭게 사용할 수 있습니다.\n      ")])]),a("section",{staticStyle:{"font-size":"28px"},attrs:{"data-markdown":""}},[a("script",{attrs:{type:"text/template"}},[t._v("\n        ## 이쯤에서 다시보는 Redux\n        ```\n        ...\n        // action을 props로 넣어주는 예제\n        const mapDispatchToProps = (dispatch) => bindActionCreators({\n          name: function(state, action) {\n            const {type, changeFunc} = action;\n\n            switch (type) {\n              case 'CHANGE_FUNCTION':\n                return changeFunc;\n              default:\n                return state;\n            }\n          }\n        }, dispatch);\n\n        // state와 action을 props로 넣어줍니다.\n        export default connect(mapStateToProps, mapDispatchToProps)(MyApp);\n        ```\n      ")]),a("aside",{staticClass:"notes"},[t._v("\n        이런식으로 코드가 나오는데 자세한 것은 코드를 보면서 진행하겠습니다.\n      ")])])]),a("section",[a("h2",[t._v("이제 코드를 보며 이해해 보겠습니다.")]),a("a",{attrs:{href:"localhost:3000"}},[t._v("localhost:3000")])])])}]};s.a=n},Yafh:function(t,s,a){"use strict";s.a={name:"react-basic",layout:"slides"}},ieHu:function(t,s,a){"use strict";Object.defineProperty(s,"__esModule",{value:!0});var e=a("Yafh"),n=a("7nVi"),i=a("VU/8")(e.a,n.a,!1,null,null,null);i.options.__file="pages/slides/react-basic.vue",s.default=i.exports}});